"""
–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –±–æ—Ç–∞
"""
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from ...config.settings import ADMIN_IDS
from ...utils.config_utils import load_users

def create_main_menu(user_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    try:
        from ...utils.localization import _
        add_record_text = _("buttons.add_record", user_id)
        select_sheet_text = _("menu.select_sheet", user_id)
        status_text = _("menu.status", user_id)
        stats_text = _("menu.stats", user_id)
        select_spreadsheet_text = _("menu.select_spreadsheet", user_id)
        payments_text = _("menu.payments", user_id)
        my_payments_text = _("menu.my_payments", user_id)
        analytics_text = _("menu.analytics", user_id)
        settings_text = _("menu.settings", user_id)
    except:
        # Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        add_record_text = "‚ûï ’£÷Ä’°’º’∏÷Ç’¥"
        select_sheet_text = "üìã ‘∏’∂’ø÷Ä’•’¨ ’©’•÷Ä’©’´’Ø"
        status_text = "üìä ‘ø’°÷Ä’£’°’æ’´’≥’°’Ø"
        stats_text = "üìà ’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂"
        select_spreadsheet_text = "üìä ‘∏’∂’ø÷Ä’•’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø"
        payments_text = "üí∏ ’é’≥’°÷Ä’∂’•÷Ä"
        my_payments_text = "üí∞ ‘ª’¥ ’æ’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä’®"
        analytics_text = "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞"
        settings_text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ - 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        [
            InlineKeyboardButton(add_record_text, callback_data="add_record_select_sheet"),
            InlineKeyboardButton(_("buttons.add_skip"), callback_data="add_skip_record_select_sheet")
            # InlineKeyboardButton(select_sheet_text, callback_data="select_sheet")
        ],
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        [
            # InlineKeyboardButton(status_text, callback_data="status"),
            # InlineKeyboardButton(stats_text, callback_data="stats")
        ],
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã - –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤–æ –≤—Å—é —à–∏—Ä–∏–Ω—É
        # [InlineKeyboardButton(select_spreadsheet_text, callback_data="select_spreadsheet")]
    ]
    
    if user_id and user_id in ADMIN_IDS:
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ - –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        keyboard.extend([
            [
                InlineKeyboardButton(payments_text, callback_data="pay_menu"),
                # InlineKeyboardButton(analytics_text, callback_data="analytics_menu")
            ],
            # [InlineKeyboardButton(settings_text, callback_data="settings_menu")]
        ])
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        keyboard.extend([
            [
                InlineKeyboardButton(my_payments_text, callback_data="my_payments"),
                # InlineKeyboardButton(settings_text, callback_data="settings_menu")
            ]
        ])
    
    return InlineKeyboardMarkup(keyboard)

def create_analytics_menu(user_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        from ...utils.localization import _
        general_text = _("analytics.general", user_id)
        users_text = _("analytics.users", user_id)
        financial_text = _("analytics.financial", user_id)
        periods_text = _("analytics.periods", user_id)
        export_text = _("analytics.export", user_id)
        detailed_text = _("analytics.detailed", user_id)
        back_text = _("menu.back", user_id)
    except:
        # Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        general_text = "üìä –û–±—â–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
        users_text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        financial_text = "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
        periods_text = "üìÖ –ü–æ –ø–µ—Ä–∏–æ–¥–∞–º"
        export_text = "üìä –≠–∫—Å–ø–æ—Ä—Ç"
        detailed_text = "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"
        back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    
    keyboard = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∏–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ - –ø–æ 2 –≤ —Ä—è–¥
        [
            InlineKeyboardButton(general_text, callback_data="general_analytics"),
            InlineKeyboardButton(users_text, callback_data="user_analytics")
        ],
        [
            InlineKeyboardButton(financial_text, callback_data="financial_analytics"),
            InlineKeyboardButton(periods_text, callback_data="period_analytics")
        ],
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        [
            InlineKeyboardButton(detailed_text, callback_data="detailed_analytics"),
            InlineKeyboardButton(export_text, callback_data="export_analytics_menu")
        ],
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        [InlineKeyboardButton(back_text, callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_settings_menu(user_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    try:
        from ...utils.localization import _
        language_text = _("settings.language", user_id)
        notifications_text = _("settings.notifications", user_id)
        limits_text = _("settings.limits", user_id)
        backup_text = _("settings.backup", user_id)
        users_text = _("settings.users", user_id)
        system_info_text = _("settings.system_info", user_id)
        translation_text = _("settings.translation_management", user_id)
        back_text = _("menu.back", user_id)
    except:
        # Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        language_text = "üåê –Ø–∑—ã–∫"
        notifications_text = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        limits_text = "üí∞ –õ–∏–º–∏—Ç—ã"
        backup_text = "üíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏"
        users_text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
        system_info_text = "üîß –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
        translation_text = "üåç –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏"
        back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    
    keyboard = [
        [
            InlineKeyboardButton(language_text, callback_data="language_menu"),
            InlineKeyboardButton(notifications_text, callback_data="notification_settings")
        ],
        [
            InlineKeyboardButton(limits_text, callback_data="limits_settings"),
            InlineKeyboardButton(backup_text, callback_data="backup_menu")
        ]
    ]
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if user_id and user_id in ADMIN_IDS:
        keyboard.extend([
            [
                InlineKeyboardButton(users_text, callback_data="user_management"),
                InlineKeyboardButton(system_info_text, callback_data="system_info")
            ],
            [InlineKeyboardButton(translation_text, callback_data="translation_management")]
        ])
    
    keyboard.append([InlineKeyboardButton(back_text, callback_data="back_to_menu")])
    
    return InlineKeyboardMarkup(keyboard)

def create_add_record_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    keyboard = [
        [InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’£÷Ä’°’º’∏÷Ç’¥", callback_data="add_record_select_sheet")],
        [InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ‘≤’°÷Å’©’∏’≤’∏÷Ç’¥", callback_data="add_skip_record_select_sheet")],
        [InlineKeyboardButton("‚¨ÖÔ∏è ’Ä’•’ø", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_add_record_sheet_selection(sheets_info, record_type):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    
    Args:
        sheets_info: —Å–ø–∏—Å–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Å—Ç–∞—Ö
        record_type: —Ç–∏–ø –∑–∞–ø–∏—Å–∏ ("record" –∏–ª–∏ "skip")
    """
    import logging
    logger = logging.getLogger(__name__)
    
    keyboard = []
    logger.info(f"Creating sheet selection keyboard with {len(sheets_info)} sheets for record_type: {record_type}")
    
    for sheet in sheets_info:
        callback_data = f"add_{record_type}_sheet_{sheet['title']}"
        logger.info(f"Creating button with callback_data: {callback_data}")
        keyboard.append([InlineKeyboardButton(
            f"üìã {sheet['title']}", 
            callback_data=callback_data
        )])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è ’Ä’•’ø", callback_data="back_to_menu")])
    logger.info(f"Created keyboard with {len(keyboard)} rows")
    return InlineKeyboardMarkup(keyboard)

def create_supplier_choice_keyboard(display_name=None):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    keyboard = []
    if display_name:
        keyboard.append([InlineKeyboardButton(f"üë§ ’ï’£’ø’°’£’∏÷Ä’Æ’•’¨ ’´’¥ ’°’∂’∏÷Ç’∂’® ({display_name})", callback_data="use_my_name")])
    keyboard.append([InlineKeyboardButton(f"üè¢ ’ï’£’ø’°’£’∏÷Ä’Æ’•’¨ ’ñ’´÷Ä’¥’°’µ’´ ’°’∂’∏÷Ç’∂’®", callback_data="use_firm_name")])
    # keyboard.append([InlineKeyboardButton("‚úèÔ∏è ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’±’•’º÷Ñ’∏’æ", callback_data="manual_input")])
    return InlineKeyboardMarkup(keyboard)

def create_edit_menu(record_id: str, is_admin: bool = False):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    keyboard = [
        [InlineKeyboardButton("üìÖ ‘±’¥’Ω’°’©’´’æ", callback_data=f"edit_date_{record_id}")],
        # [InlineKeyboardButton("üè™ ’Ñ’°’ø’°’Ø’°÷Ä’°÷Ä", callback_data=f"edit_supplier_{record_id}")],
        [InlineKeyboardButton("üß≠ ’à÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂", callback_data=f"edit_direction_{record_id}")],
        [InlineKeyboardButton("üìù ’Ü’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂", callback_data=f"edit_description_{record_id}")],
        [InlineKeyboardButton("üí∞ ‘≥’∏÷Ç’¥’°÷Ä", callback_data=f"edit_amount_{record_id}")],
        [InlineKeyboardButton("üóë ’ã’∂’ª’•’¨", callback_data=f"delete_{record_id}")],
        [InlineKeyboardButton("‚ùå ’â’•’≤’°÷Ä’Ø’•’¨", callback_data=f"cancel_edit_{record_id}")]
    ]
    return InlineKeyboardMarkup(keyboard)

# --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–µ–Ω—é —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ ---
def create_workers_menu():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    users = load_users()
    keyboard = []
    for uid, udata in users.items():
        display_name = udata.get('display_name')
        if display_name:
            keyboard.append([InlineKeyboardButton(display_name, callback_data=f"pay_user_{display_name}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è ’Ä’•’ø", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(keyboard)

def create_spreadsheet_selection_keyboard(spreadsheets):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã"""
    keyboard = []
    for spreadsheet in spreadsheets[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Ç–∞–±–ª–∏—Ü
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
        name = spreadsheet['name'][:30] + "..." if len(spreadsheet['name']) > 30 else spreadsheet['name']
        keyboard.append([InlineKeyboardButton(
            f"üìä {name}", 
            callback_data=f"spreadsheet_{spreadsheet['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è ’Ä’•’ø", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(keyboard)

def create_sheet_selection_keyboard(sheets_info):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞"""
    keyboard = []
    for info in sheets_info:
        keyboard.append([InlineKeyboardButton(
            f"üìã {info['title']}", 
            callback_data=f"sheet_{info['title']}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è ’Ä’•’ø", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(keyboard)

def create_final_sheet_selection_keyboard(sheets):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞"""
    keyboard = []
    for sheet in sheets:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫
        sheet_info = f"{sheet['title']} ({sheet['row_count']} —Å—Ç—Ä–æ–∫)"
        keyboard.append([InlineKeyboardButton(
            f"üìã {sheet_info}", 
            callback_data=f"final_sheet_{sheet['title']}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è ‘±’≤’µ’∏÷Ç’Ω’°’Ø’∂’•÷Ä’´ ÷Å’∏÷Ç÷Å’°’Ø", callback_data="select_spreadsheet")])
    return InlineKeyboardMarkup(keyboard)


# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: create_payment_menu –¥–ª—è button_handlers.py
def create_payment_menu(display_name):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞"""
    keyboard = [
        [InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’æ’≥’°÷Ä’∏÷Ç’¥", callback_data=f"add_payment_{display_name}")],
        [InlineKeyboardButton("üìä ’ç’ø’°’∂’°’¨ ’Ω’°’∞’¥’°’∂’´ ’∞’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂", callback_data=f"get_payment_report_{display_name}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è ’Ä’•’ø", callback_data="pay_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_payment_actions_keyboard(display_name):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏"""
    keyboard = [
        [InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’æ’≥’°÷Ä’∏÷Ç’¥", callback_data=f"add_payment_{display_name}")],
        [InlineKeyboardButton("üìä ’ç’ø’°’∂’°’¨ ’Ω’°’∞’¥’°’∂’´ ’∞’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂", callback_data=f"get_payment_report_{display_name}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è ’Ä’•’ø", callback_data="pay_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_back_button():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥"""
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è ’Ä’•’ø", callback_data="back_to_menu")]])

def create_back_to_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return InlineKeyboardMarkup([[InlineKeyboardButton("üè† ‘≥’¨’≠’°’æ’∏÷Ä ’Ñ’•’∂’µ’∏÷Ç", callback_data="main_menu")]])

def create_edit_record_keyboard(record_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚úèÔ∏è ‘Ω’¥’¢’°’£÷Ä’•’¨", callback_data=f"edit_record_{record_id}")]])

def create_reply_menu():
    """–°–æ–∑–¥–∞–µ—Ç Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –º–µ–Ω—é"""
    from telegram import ReplyKeyboardMarkup
    return ReplyKeyboardMarkup([["üìã ’Ñ’•’∂’µ’∏÷Ç"]], resize_keyboard=True)

def create_export_analytics_menu(user_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        from ...utils.localization import _
        general_export = _("analytics.export_general", user_id) if hasattr(_, "__call__") else "üìä –≠–∫—Å–ø–æ—Ä—Ç –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
        user_export = _("analytics.export_users", user_id) if hasattr(_, "__call__") else "üë• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        financial_export = _("analytics.export_financial", user_id) if hasattr(_, "__call__") else "üí∞ –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
        period_export = _("analytics.export_periods", user_id) if hasattr(_, "__call__") else "üìÖ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º"
        back_text = _("menu.back", user_id) if hasattr(_, "__call__") else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    except:
        # Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        general_export = "üìä –≠–∫—Å–ø–æ—Ä—Ç –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
        user_export = "üë• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
        financial_export = "üí∞ –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"
        period_export = "üìÖ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º"
        back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    
    keyboard = [
        [InlineKeyboardButton(general_export, callback_data="export_general_analytics")],
        [InlineKeyboardButton(user_export, callback_data="export_user_analytics")],
        [InlineKeyboardButton(financial_export, callback_data="export_financial_analytics")],
        [InlineKeyboardButton(period_export, callback_data="export_period_analytics")],
        [InlineKeyboardButton(back_text, callback_data="analytics_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_users_management_menu(user_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    try:
        from ...utils.localization import _
        list_users = _("users.list", user_id)
        add_user = _("users.add", user_id)
        permissions = _("users.permissions", user_id)
        stats = _("users.stats", user_id)
        add_admin = _("users.add_admin", user_id)
        remove_admin = _("users.remove_admin", user_id)
        back_text = _("menu.back", user_id)
    except:
        # Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        list_users = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        add_user = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        permissions = "üîß –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"
        stats = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        add_admin = "üëë –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞"
        remove_admin = "üë§ –£–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∞"
        back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    
    keyboard = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        [
            InlineKeyboardButton(list_users, callback_data="list_users"),
            InlineKeyboardButton(add_user, callback_data="add_user")
        ],
        [
            InlineKeyboardButton(permissions, callback_data="user_permissions"),
            InlineKeyboardButton(stats, callback_data="user_stats")
        ],
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        [
            InlineKeyboardButton(add_admin, callback_data="add_admin"),
            InlineKeyboardButton(remove_admin, callback_data="remove_admin")
        ],
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        [InlineKeyboardButton(back_text, callback_data="settings_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_translation_management_menu(user_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏"""
    try:
        from ...utils.localization import _
        add_translation = _("translation.add_translation", user_id)
        add_language = _("translation.add_language", user_id)
        list_translations = _("translation.list_translations", user_id)
        reload_translations = _("translation.reload_translations", user_id)
        back_text = _("menu.back", user_id)
    except:
        # Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        add_translation = "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥"
        add_language = "üåê –î–æ–±–∞–≤–∏—Ç—å —è–∑—ã–∫"
        list_translations = "üìã –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–æ–≤"
        reload_translations = "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥—ã"
        back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    
    keyboard = [
        [InlineKeyboardButton(add_translation, callback_data="add_translation")],
        [InlineKeyboardButton(add_language, callback_data="add_language")],
        [InlineKeyboardButton(list_translations, callback_data="list_translations")],
        [InlineKeyboardButton(reload_translations, callback_data="reload_translations")],
        [InlineKeyboardButton(back_text, callback_data="settings_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_backup_menu(user_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        from ...utils.localization import _
        create_text = _("backup.create", user_id)
        list_text = _("backup.list", user_id)
        restore_text = _("backup.restore", user_id)
        cleanup_text = _("backup.cleanup", user_id)
        back_text = _("menu.back", user_id)
    except:
        # Fallback –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã–π —Ç–µ–∫—Å—Ç
        create_text = "üíæ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"
        list_text = "üìÅ –°–ø–∏—Å–æ–∫ –∫–æ–ø–∏–π"
        restore_text = "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
        cleanup_text = "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ"
        back_text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    
    keyboard = [
        [InlineKeyboardButton(create_text, callback_data="create_backup")],
        [
            InlineKeyboardButton(list_text, callback_data="list_backups"),
            InlineKeyboardButton(restore_text, callback_data="restore_backup")
        ],
        [InlineKeyboardButton(cleanup_text, callback_data="cleanup_backups")],
        [InlineKeyboardButton(back_text, callback_data="settings_menu")]
    ]
    
    return InlineKeyboardMarkup(keyboard)
