"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
"""
import logging
import traceback
from telegram import Update
from telegram.ext import CallbackContext

from ...utils.config_utils import send_to_log_chat

logger = logging.getLogger(__name__)

async def error_handler(update: object, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏"""
    logger.error(f"‘≤’°÷Å’°’º’∏÷Ç’©’µ’∏÷Ç’∂ ’©’°÷Ä’¥’°÷Å’∏÷Ç’¥’® ’¥’∑’°’Ø’•’¨’´’Ω: {context.error}")
    logger.error(traceback.format_exc())
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –ª–æ–≥-—á–∞—Ç
    if context.error:
        error_message = f"üî¥ ’ç‘Ω‘±‘º: {str(context.error)}"
        await send_to_log_chat(context, error_message)
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å update, –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if update and hasattr(update, 'effective_user') and update.effective_user:
            try:
                if hasattr(update, 'message') and update.message:
                    await update.message.reply_text(
                        "‚ùå ’ç’≠’°’¨ ’ß ’ø’•’≤’´ ’∏÷Ç’∂’•÷Å’•’¨: ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ÷É’∏÷Ä’±’•’¨ ’∂’∏÷Ä’´÷Å:"
                    )
                elif hasattr(update, 'callback_query') and update.callback_query:
                    await update.callback_query.answer(
                        "‚ùå ’ç’≠’°’¨ ’ß ’ø’•’≤’´ ’∏÷Ç’∂’•÷Å’•’¨",
                        show_alert=True
                    )
            except Exception as e:
                logger.error(f"’â’∞’°’ª’∏’≤’æ’•÷Å ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’Ω’≠’°’¨’´ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’® ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏’≤’´’∂: {e}")
