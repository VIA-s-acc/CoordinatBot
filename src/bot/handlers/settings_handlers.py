"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏—Å—Ç–µ–º—ã
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler

from ...config.settings import ADMIN_IDS
from ...utils.localization import (
    _, get_user_language, set_user_language, 
    get_available_languages, add_custom_translation
)
from ...utils.config_utils import get_user_settings, update_user_settings
from ..states.conversation_states import ADD_TRANSLATION_KEY, ADD_TRANSLATION_TEXT

logger = logging.getLogger(__name__)

async def settings_menu(update: Update, context: CallbackContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_language = get_user_language(user_id)
    
    keyboard = [
        [InlineKeyboardButton(_("settings.language", user_id), callback_data="language_menu")],
        [InlineKeyboardButton(_("settings.notifications", user_id), callback_data="notification_settings")],
    ]
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
    if user_id in ADMIN_IDS:
        keyboard.extend([
            [InlineKeyboardButton(_("settings.users", user_id), callback_data="user_settings_menu")],
            [InlineKeyboardButton(_("settings.backup", user_id), callback_data="backup_menu")],
            [InlineKeyboardButton("üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Å—Ç –ø–æ –¥–∞—Ç–µ", callback_data="sort_sheet_by_date")],
            [InlineKeyboardButton(_("settings.translation_management", user_id), callback_data="translation_management")],
            [InlineKeyboardButton(_("settings.system_info", user_id), callback_data="system_info")]
        ])
    
    keyboard.append([InlineKeyboardButton(_("menu.back", user_id), callback_data="back_to_menu")])
    
    await query.edit_message_text(
        _("settings.main_menu", user_id),
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def language_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    await query.answer()
    
    current_language = get_user_language(user_id)
    available_languages = get_available_languages()
    
    keyboard = []
    for lang_code, lang_name in available_languages.items():
        emoji = "‚úÖ" if lang_code == current_language else ""
        keyboard.append([
            InlineKeyboardButton(
                f"{emoji} {lang_name}", 
                callback_data=f"set_language_{lang_code}"
            )
        ])
    
    keyboard.append([InlineKeyboardButton(_("menu.back", user_id), callback_data="settings_menu")])
    
    await query.edit_message_text(
        f"{_('settings.current_language', user_id)}\n\n{_('settings.select_language', user_id)}",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def set_language(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –∏–∑ callback_data
    language_code = query.data.replace("set_language_", "")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫
    set_user_language(user_id, language_code)
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞
    available_languages = get_available_languages()
    language_name = available_languages.get(language_code, language_code)
    
    await query.edit_message_text(
        _("settings.language_changed", user_id),
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton(_("menu.back", user_id), callback_data="settings_menu")]
        ])
    )

async def notification_settings(update: Update, context: CallbackContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings = get_user_settings(user_id)
    notifications_enabled = settings.get('notifications', True)
    debt_notifications = settings.get('debt_notifications', True)
    limit_notifications = settings.get('limit_notifications', True)
    
    keyboard = [
        [InlineKeyboardButton(
            f"üîî –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª' if notifications_enabled else '–í—ã–∫–ª'}",
            callback_data="toggle_notifications"
        )],
        [InlineKeyboardButton(
            f"üí∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ–ª–≥–∞—Ö: {'–í–∫–ª' if debt_notifications else '–í—ã–∫–ª'}",
            callback_data="toggle_debt_notifications"
        )],
        [InlineKeyboardButton(
            f"‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö: {'–í–∫–ª' if limit_notifications else '–í—ã–∫–ª'}",
            callback_data="toggle_limit_notifications"
        )],
        [InlineKeyboardButton(_("menu.back", user_id), callback_data="settings_menu")]
    ]
    
    await query.edit_message_text(
        f"üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def toggle_notifications(update: Update, context: CallbackContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    await query.answer()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    callback_data = query.data
    
    settings = get_user_settings(user_id)
    
    if callback_data == "toggle_notifications":
        current = settings.get('notifications', True)
        update_user_settings(user_id, {'notifications': not current})
    elif callback_data == "toggle_debt_notifications":
        current = settings.get('debt_notifications', True)
        update_user_settings(user_id, {'debt_notifications': not current})
    elif callback_data == "toggle_limit_notifications":
        current = settings.get('limit_notifications', True)
        update_user_settings(user_id, {'limit_notifications': not current})
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    await notification_settings(update, context)

async def system_info(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await query.answer()
    
    try:
        from ...utils.config_utils import load_users
        from ...database.database_manager import get_all_records
        from datetime import datetime
        import sys
        import os
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        users = load_users()
        records = get_all_records()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —è–∑—ã–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        language_stats = {}
        for uid, user_data in users.items():
            lang = user_data.get('language', 'hy')
            language_stats[lang] = language_stats.get(lang, 0) + 1
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        info_text = (
            f"üñ•Ô∏è <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n"
            f"üïê –í—Ä–µ–º—è: {current_time}\n\n"
            f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> {len(users)}\n"
            f"üìä <b>–ó–∞–ø–∏—Å–∏:</b> {len(records)}\n"
            f"üêç <b>Python:</b> {sys.version.split()[0]}\n"
            f"üíª <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {os.name}\n\n"
            f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —è–∑—ã–∫–æ–≤:</b>\n"
        )
        
        for lang_code, count in language_stats.items():
            lang_names = {'ru': '–†—É—Å—Å–∫–∏–π', 'hy': '’Ä’°’µ’•÷Ä’•’∂', 'en': 'English'}
            lang_name = lang_names.get(lang_code, lang_code)
            info_text += f"  {lang_name}: {count}\n"
        
        await query.edit_message_text(
            info_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system_info")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_menu")]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_menu")]
            ])
        )

async def sort_sheet_by_date_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ª–∏—Å—Ç–∞ –ø–æ –¥–∞—Ç–µ"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await query.answer()
    
    try:
        from ...utils.config_utils import get_user_settings
        from ...google_integration.sheets_manager import sort_sheet_by_date
        
        user_settings = get_user_settings(user_id)
        spreadsheet_id = user_settings.get('active_spreadsheet_id')
        sheet_name = user_settings.get('active_sheet_name')
        
        if not spreadsheet_id or not sheet_name:
            await query.edit_message_text(
                "‚ùå ’Ü’°’≠ ’∫’•’ø÷Ñ ’ß ’®’∂’ø÷Ä’•’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø’® ÷á ’©’•÷Ä’©’´’Ø’®:\n"
                "‘≥’∂’°÷Å’•÷Ñ ’∞’´’¥’∂’°’Ø’°’∂ ÷Å’°’∂’Ø ‚Üí ‘∏’∂’ø÷Ä’•’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_menu")]
                ])
            )
            return
        
        await query.edit_message_text(
            f"üîÑ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ª–∏—Å—Ç–∞ –ø–æ –¥–∞—Ç–µ...\n\n"
            f"üìä ‘±’≤’µ’∏÷Ç’Ω’°’Ø: <b>{spreadsheet_id}</b>\n"
            f"üìã ‘π’•÷Ä’©’´’Ø: <b>{sheet_name}</b>\n\n"
            f"‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            parse_mode="HTML"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        success = sort_sheet_by_date(spreadsheet_id, sheet_name)
        
        if success:
            await query.edit_message_text(
                f"‚úÖ <b>–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"üìä ‘±’≤’µ’∏÷Ç’Ω’°’Ø: <b>{spreadsheet_id}</b>\n"
                f"üìã ‘π’•÷Ä’©’´’Ø: <b>{sheet_name}</b>\n\n"
                f"üéØ –í—Å–µ –∑–∞–ø–∏—Å–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ\n"
                f"üìÖ –ë–æ–ª–µ–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–≤–µ—Ä—Ö—É",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É", callback_data="sort_sheet_by_date")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_menu")]
                ])
            )
        else:
            await query.edit_message_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏</b>\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Å—Ç. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—Å—Ç—É\n"
                f"‚Ä¢ –õ–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                f"‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="sort_sheet_by_date")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_menu")]
                ])
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ª–∏—Å—Ç–∞: {e}")
        await query.edit_message_text(
            f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞</b>\n\n"
            f"<code>{str(e)}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_menu")]
            ])
        )
