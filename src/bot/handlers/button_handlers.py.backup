"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ callback query
"""
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler

from ..keyboards.inline_keyboards import (
    create_main_menu, create_workers_menu, create_payment_menu, 
    create_back_to_menu_keyboard, create_add_record_menu,
    create_edit_menu, create_add_record_sheet_selection
)
from ..states.conversation_states import SUPPLIER_CHOICE, DIRECTION, SUPPLIER_MANUAL
from ...utils.config_utils import is_user_allowed, get_user_settings, update_user_settings
from ...utils.localization import _
from ...database.database_manager import get_db_stats, get_record_from_db
from ...google_integration.sheets_manager import get_all_spreadsheets, get_spreadsheet_info, get_worksheets_info
from ...utils.sheets_cache import get_cached_sheets_info, get_cached_spreadsheets
from ...config.settings import ADMIN_IDS

from .payment_handlers import pay_menu_handler, pay_user_handler, send_payment_report
from .settings_handlers import (
    settings_menu, language_menu, set_language, notification_settings,
    toggle_notifications, system_info
)
from .translation_handlers import (
    list_translations, reload_translations
)

logger = logging.getLogger(__name__)

def safe_parse_date(date_str: str, default_date: str = '2000-01-01') -> datetime:
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
    try:
        if not date_str or date_str.strip() == '':
            return datetime.fromisoformat(default_date)
        return datetime.fromisoformat(date_str)
    except (ValueError, TypeError):
        return datetime.fromisoformat(default_date)

async def button_handler(update: Update, context: CallbackContext):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not is_user_allowed(user_id):
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    await query.answer()
    
    data = query.data
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "back_to_menu" or data == "main_menu":
        await query.edit_message_text(
            "üìã ’Ä’´’¥’∂’°’Ø’°’∂ ’®’∂’ø÷Ä’°÷Å’°’∂’Ø:",
            reply_markup=create_main_menu(user_id)
        )
    
    # –ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    elif data == "add_record_menu":
        await query.edit_message_text(
            "‘∏’∂’ø÷Ä’•÷Ñ ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’®’ù",
            reply_markup=create_add_record_menu()
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    elif data == "add_record_select_sheet":
        await show_sheet_selection_for_add_record(update, context, "record")
    
    elif data == "add_skip_record_select_sheet":
        await show_sheet_selection_for_add_record(update, context, "skip")
    
    elif data.startswith("add_record_sheet_"):
        sheet_name = data.replace("add_record_sheet_", "")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ª–∏—Å—Ç–∞ –≤ context.user_data
        context.user_data['selected_sheet_name'] = sheet_name
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ record_handlers
        from .record_handlers import start_add_record
        return await start_add_record(update, context)
    
    elif data.startswith("add_skip_sheet_"):
        sheet_name = data.replace("add_skip_sheet_", "")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ª–∏—Å—Ç–∞ –≤ context.user_data
        context.user_data['selected_sheet_name'] = sheet_name
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ record_handlers
        from .record_handlers import start_add_skip_record
        return await start_add_skip_record(update, context)
    
    # –°—Ç–∞—Ç—É—Å
    elif data == "show_status" or data == "status":
        await show_status(update, context)
        return

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    elif data == "show_stats" or data == "stats":
        await show_stats(update, context)
        return
    
    # –ú–µ–Ω—é —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    elif data == "workers_menu" or data == "pay_menu":
        if user_id in ADMIN_IDS:
            await query.edit_message_text(
                "üë• ‘∏’∂’ø÷Ä’•÷Ñ ’°’∑’≠’°’ø’°’Ø÷Å’´’∂:",
                reply_markup=create_workers_menu()
            )
        else:
            await query.edit_message_text("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
    elif data.startswith("pay_user_"):
        display_name = data.replace("pay_user_", "")
        await query.edit_message_text(
            f"üë§ ‘±’∑’≠’°’ø’°’Ø’´÷Å: {display_name}",
            reply_markup=create_payment_menu(display_name)
        )
    
    # –í—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã
    elif data == "select_spreadsheet":
        await select_spreadsheet_menu(update, context)
    
    elif data.startswith("spreadsheet_"):
        await select_spreadsheet(update, context)
    
    elif data.startswith("final_sheet_"):
        await select_final_sheet(update, context)
    
    # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞
    elif data == "select_sheet_menu" or data == "select_sheet":
        await select_sheet_menu(update, context)
    
    elif data.startswith("sheet_"):
        await select_sheet(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    elif data == "use_my_name":
        return await use_my_name(update, context)
    
    elif data == "use_firm_name":
        return await use_firm_name(update, context)
    
    elif data == "manual_input":
        return await manual_input(update, context)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
    elif data.startswith("edit_"):
        from .edit_handlers import handle_edit_button
        return await handle_edit_button(update, context)
    
    elif data.startswith("delete_"):
        from .edit_handlers import handle_delete_button
        return await handle_delete_button(update, context)
    
    elif data.startswith("confirm_delete_"):
        from .edit_handlers import confirm_delete
        return await confirm_delete(update, context)
    
    elif data.startswith("cancel_edit_"):
        record_id = data.replace("cancel_edit_", "")
        keyboard = [[InlineKeyboardButton("‚úèÔ∏è ‘Ω’¥’¢’°’£÷Ä’•’¨", callback_data=f"edit_record_{record_id}")]]
        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
    elif data.startswith("generate_report_"):
        display_name = data.replace("generate_report_", "")
        await generate_user_report(update, context, display_name)
    
    # –ü–ª–∞—Ç–µ–∂–∏
    elif data == "pay_menu" and user_id in ADMIN_IDS:
        await pay_menu_handler(update, context)
        return
    
    elif data.startswith("pay_user_") and user_id in ADMIN_IDS:
        await pay_user_handler(update, context)
        return
        
    elif data.startswith("get_payment_report_") and user_id in ADMIN_IDS:
        display_name = data.replace("get_payment_report_", "")
        await send_payment_report(update, context, display_name)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    elif data == "my_payments":
        await show_my_payments(update, context)
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    elif data == "settings_menu":
        await settings_menu(update, context)
        return
    
    elif data == "language_menu":
        await language_menu(update, context)
        return
    
    elif data.startswith("set_language_"):
        await set_language(update, context)
        return
    
    elif data == "notification_settings":
        await notification_settings(update, context)
        return
    
    elif data in ["toggle_notifications", "toggle_debt_notifications", "toggle_limit_notifications"]:
        await toggle_notifications(update, context)
        return
    
    elif data == "translation_management":
        from .translation_handlers import translation_management
        await translation_management(update, context)
    
    elif data == "list_translations":
        from .translation_handlers import list_translations
        await list_translations(update, context)
    
    elif data == "reload_translations":
        from .translation_handlers import reload_translations
        await reload_translations(update, context)
    
    elif data == "system_info":
        await system_info(update, context)
        return
    
    elif data == "analytics_menu":
        await analytics_menu(update, context)
        return
    
    elif data == "user_settings_menu":
        await user_settings_menu(update, context)
        return
    
    elif data == "users_management_menu":
        await user_settings_menu(update, context)
        return
    
    elif data == "backup_menu":
        await backup_menu(update, context)
        return
    
    elif data == "add_language":
        await add_language_menu(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    elif data == "create_backup":
        await create_backup(update, context)
        return
    
    elif data == "backup_list":
        await backup_list(update, context)
        return
    
    elif data == "restore_backup":
        await restore_backup(update, context)
        return
    
    elif data == "cleanup_backups":
        await cleanup_backups(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
    elif data == "cleanup_30_days":
        await cleanup_backups_by_age(update, context, 30)
        return
    
    elif data == "cleanup_keep_3":
        await cleanup_backups_by_count(update, context, 3)
        return
    
    elif data == "cleanup_keep_5":
        await cleanup_backups_by_count(update, context, 5)
        return
    
    elif data == "cleanup_keep_10":
        await cleanup_backups_by_count(update, context, 10)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    elif data == "user_list":
        await user_list(update, context)
        return
    
    elif data == "add_user":
        await add_user(update, context)
        return
    
    elif data == "user_permissions":
        await user_permissions_menu(update, context)
        return
    
    elif data == "user_stats":
        await user_stats_menu(update, context)
        return
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–º–µ–Ω—é
    elif data == "add_admin":
        await add_admin_handler(update, context)
        return
    
    elif data == "remove_admin":
        await remove_admin_handler(update, context)
        return
    
    elif data == "show_analytics":
        await show_analytics_handler(update, context)
        return
    
    elif data.startswith("select_backup_"):
        await select_backup_handler(update, context)
        return
    
    elif data.startswith("confirm_restore_"):
        await confirm_restore_handler(update, context)
        return
    
    elif data == "confirm_cleanup":
        await confirm_cleanup_handler(update, context)
        return
    
    elif data == "export_analytics":
        await export_analytics_handler(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥–º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    elif data == "general_analytics":
        await general_analytics_handler(update, context)
        return
    
    elif data == "user_analytics":
        await user_analytics_handler(update, context)
        return
    
    elif data == "financial_analytics":
        await financial_analytics_handler(update, context)
        return
    
    elif data == "period_analytics":
        await period_analytics_handler(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    elif data == "export_user_analytics":
        await export_user_analytics_handler(update, context)
        return
    
    elif data == "export_financial_analytics":
        await export_financial_analytics_handler(update, context)
        return
    
    elif data == "export_period_analytics":
        await export_period_analytics_handler(update, context)
        return
    
    elif data == "export_general_analytics":
        await export_general_analytics_handler(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–µ—à–∞
    elif data == "cache_management":
        from .cache_handlers import cache_management_menu
        await cache_management_menu(update, context)
    
    elif data == "cache_stats":
        from .cache_handlers import show_cache_stats
        await show_cache_stats(update, context)
    
    elif data == "refresh_spreadsheets_cache":
        from .cache_handlers import refresh_spreadsheets_cache
        await refresh_spreadsheets_cache(update, context)
    
    elif data == "clear_all_cache":
        from .cache_handlers import clear_cache
        await clear_cache(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    elif data == "add_user_by_id":
        await add_user_by_id_handler(update, context)
    
    elif data == "show_unauthorized_users":
        await show_unauthorized_users_handler(update, context)
    
    elif data == "show_authorized_users":
        await show_authorized_users_handler(update, context)
    
    elif data == "add_permissions":
        await add_permissions_handler(update, context)
    
    elif data == "remove_permissions":
        await remove_permissions_handler(update, context)
    
    elif data.startswith("authorize_user_"):
        await authorize_user_handler(update, context)
    
    elif data.startswith("revoke_user_"):
        await revoke_user_handler(update, context)
    
    else:
        logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback: {data}")
        # Callback'–∏ add_payment_ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è ConversationHandler'–æ–º
        # –î–ª—è add_payment_ callback'–æ–≤ –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º, –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ ConversationHandler

async def show_status(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not is_user_allowed(user_id):
        return
    
    user_settings = get_user_settings(user_id)
    
    spreadsheet_id = user_settings.get('active_spreadsheet_id')
    sheet_name = user_settings.get('active_sheet_name')
    
    status_text = "üìä ‘∏’∂’©’°÷Å’´’Ø ’Ø’°÷Ä’£’°’æ’´’≥’°’Ø:\n\n"
    
    if spreadsheet_id:
        status_text += f"‚úÖ ’Ñ’´’°÷Å’æ’°’Æ ’°’≤’µ’∏÷Ç’Ω’°’Ø: <code>{spreadsheet_id}</code>\n"
        if sheet_name:
            status_text += f"üìã ‘±’Ø’ø’´’æ ’©’•÷Ä’©’´’Ø: <code>{sheet_name}</code>\n"
        else:
            status_text += "‚ö†Ô∏è ‘π’•÷Ä’©’´’Ø’® ’π’´ ’®’∂’ø÷Ä’æ’•’¨\n"
    else:
        status_text += "‚ùå ‘±’≤’µ’∏÷Ç’Ω’°’Ø’® ’π’´ ’¥’´’°÷Å’æ’°’Æ\n"
    
    display_name = user_settings.get('display_name')
    if display_name:
        status_text += f"üë§ ’Å’•÷Ä ’°’∂’∏÷Ç’∂’®: <b>{display_name}</b>\n"
    else:
        status_text += "üë§ ’Å’•÷Ä ’°’∂’∏÷Ç’∂’®: <b>’ç’°’∞’¥’°’∂’æ’°’Æ ’π’ß</b>\n"
    
    status_text += "\nü§ñ ‘≤’∏’ø’® ’°’∑’≠’°’ø’∏÷Ç’¥ ’ß\n"
    status_text += "üìä ’è’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’¶’°’µ’´ ’Ø’°’∫’®’ù ’°’Ø’ø’´’æ\n"
    status_text += "üîó Google Sheets ’Ø’°’∫’®’ù ’°’Ø’ø’´’æ\n"
    
    await query.edit_message_text(
        status_text, 
        parse_mode="HTML",
        reply_markup=create_back_to_menu_keyboard()
    )

async def show_stats(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    query = update.callback_query
    
    stats = get_db_stats()
    if stats:
        stats_text = (
            f"üìà ’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂:\n\n"
            f"üìù ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä: {stats['total_records']}\n"
            f"üí∞ ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’£’∏÷Ç’¥’°÷Ä: {stats['total_amount']:,.2f} ’§÷Ä’°’¥\n"
            f"üìÖ ’é’•÷Ä’ª’´’∂ 30 ÷Ö÷Ä’∏÷Ç’¥: {stats.get('recent_records', 0)} ’£÷Ä’°’º’∏÷Ç’¥"
        )
    else:
        stats_text = "‚ùå ’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ’Ω’ø’°’∂’°’¨’∏÷Ç ’Ω’≠’°’¨:"
    
    await query.edit_message_text(
        stats_text,
        reply_markup=create_back_to_menu_keyboard()
    )

async def select_spreadsheet_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    try:
        spreadsheets = get_cached_spreadsheets()
        
        if not spreadsheets:
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=create_back_to_menu_keyboard()
            )
            return
        
        keyboard = []
        for spreadsheet in spreadsheets[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            title = spreadsheet.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:30]
            keyboard.append([InlineKeyboardButton(
                f"üìä {title}", 
                callback_data=f"spreadsheet_{spreadsheet['id']}"
            )])
        
        keyboard.append([InlineKeyboardButton(_("menu.back" , user_id), callback_data="back_to_menu")])
        
        await query.edit_message_text(
            "üìä ‘∏’∂’ø÷Ä’•÷Ñ ’°’≤’µ’∏÷Ç’Ω’°’Ø’®:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå ’á’≠’°’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø’∂’•÷Ä’´ ÷Å’°’∂’Ø’® ’Ω’ø’°’∂’°’¨’´’Ω: {e}",
            reply_markup=create_back_to_menu_keyboard()
        )

async def select_spreadsheet(update: Update, context: CallbackContext):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    spreadsheet_id = query.data.replace("spreadsheet_", "")
    
    try:
        sheets_info, spreadsheet_title = get_cached_sheets_info(spreadsheet_id)
        
        if not sheets_info:
            await query.edit_message_text(
                "‚ùå ’Ä’∂’°÷Ä’°’æ’∏÷Ä ’π’ß ’¥’∏÷Ç’ø÷Ñ ’£’∏÷Ä’Æ’•’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø",
                reply_markup=create_back_to_menu_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        update_user_settings(user_id, {'active_spreadsheet_id': spreadsheet_id})
        
        keyboard = []
        for sheet in sheets_info:
            keyboard.append([InlineKeyboardButton(
                f"üìã {sheet['title']}", 
                callback_data=f"final_sheet_{sheet['title']}"
            )])
        
        keyboard.append([InlineKeyboardButton(_("menu.back" , user_id), callback_data="select_spreadsheet")])
        
        await query.edit_message_text(
            f"‚úÖ ‘∏’∂’ø÷Ä’æ’°’Æ ’°’≤’µ’∏÷Ç’Ω’°’Ø: <b>{spreadsheet_title}</b>\n\n"
            f"üìã ‘∏’∂’ø÷Ä’•÷Ñ ’©’•÷Ä’©’´’Ø’®:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå ’á’≠’°’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø’´’∂ ’¥’´’°’∂’°’¨’´’Ω: {e}",
            reply_markup=create_back_to_menu_keyboard()
        )

async def select_final_sheet(update: Update, context: CallbackContext):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –ª–∏—Å—Ç"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    sheet_name = query.data.replace("final_sheet_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª–∏—Å—Ç
    update_user_settings(user_id, {'active_sheet_name': sheet_name})
    
    await query.edit_message_text(
        f"‚úÖ ‘∏’∂’ø÷Ä’æ’°’Æ ’©’•÷Ä’©’´’Ø: <b>{sheet_name}</b>\n\n"
        f"‘±’µ’™’¥ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä ’°’æ’•’¨’°÷Å’∂’•’¨:",
        parse_mode="HTML",
        reply_markup=create_main_menu(user_id)
    )

async def select_sheet_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    user_settings = get_user_settings(user_id)
    spreadsheet_id = user_settings.get('active_spreadsheet_id')
    
    if not spreadsheet_id:
        await query.edit_message_text(
            "‚ùå ’Ü’°’≠ ’∫’•’ø÷Ñ ’ß ’®’∂’ø÷Ä’•’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø’®",
            reply_markup=create_back_to_menu_keyboard()
        )
        return
    
    try:
        sheets_info, spreadsheet_title = get_cached_sheets_info(spreadsheet_id)
        
        if not sheets_info:
            await query.edit_message_text(
                "‚ùå ‘±’≤’µ’∏÷Ç’Ω’°’Ø’∏÷Ç’¥ ’©’•÷Ä’©’´’Ø’∂’•÷Ä ’π’Ø’°’∂",
                reply_markup=create_back_to_menu_keyboard()
            )
            return
        
        keyboard = []
        for sheet in sheets_info:
            keyboard.append([InlineKeyboardButton(
                f"üìã {sheet['title']}", 
                callback_data=f"sheet_{sheet['title']}"
            )])
        
        keyboard.append([InlineKeyboardButton(_("menu.back" , user_id), callback_data="back_to_menu")])
        
        await query.edit_message_text(
            f"üìã ‘∏’∂’ø÷Ä’•÷Ñ ’©’•÷Ä’©’´’Ø <b>{spreadsheet_title}</b> ’°’≤’µ’∏÷Ç’Ω’°’Ø’´÷Å:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå ’á’≠’°’¨ ’©’•÷Ä’©’´’Ø’∂’•÷Ä’´ ÷Å’°’∂’Ø’® ’Ω’ø’°’∂’°’¨’∏÷Ç ’™’°’¥’°’∂’°’Ø: {e}",
            reply_markup=create_back_to_menu_keyboard()
        )

async def select_sheet(update: Update, context: CallbackContext):
    """–í—ã–±–∏—Ä–∞–µ—Ç –ª–∏—Å—Ç"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    sheet_name = query.data.replace("sheet_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª–∏—Å—Ç
    update_user_settings(user_id, {'active_sheet_name': sheet_name})
    
    await query.edit_message_text(
        f"‚úÖ ‘∏’∂’ø÷Ä’æ’°’Æ ’©’•÷Ä’©’´’Ø: <b>{sheet_name}</b>\n\n"
        f"‘±’µ’™’¥ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä ’°’æ’•’¨’°÷Å’∂’•’¨:",
        parse_mode="HTML",
        reply_markup=create_main_menu(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
async def use_my_name(update: Update, context: CallbackContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    user_settings = get_user_settings(user_id)
    display_name = user_settings.get('display_name')
    
    if not display_name:
        await query.edit_message_text("‚ùå ’Å’•÷Ä ’°’∂’∏÷Ç’∂’® ’π’´ ’Ω’°’∞’¥’°’∂’æ’°’Æ: ’ï’£’ø’°’£’∏÷Ä’Æ’æ’•’¨’∏÷Ç ’ß ’ñ’´÷Ä’¥’°’µ’´ ’°’∂’∏÷Ç’∂’®:")
        display_name = "’ñ"
    
    context.user_data['record']['supplier'] = display_name
    
    await query.edit_message_text(
        f"‚úÖ ’Ñ’°’ø’°’Ø’°÷Ä’°÷Ä: {display_name}\n\n"
        f"üß≠ ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂’®:"
    )
    
    return DIRECTION

async def use_firm_name(update: Update, context: CallbackContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è —Ñ–∏—Ä–º—ã –∫–∞–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    query = update.callback_query
    
    context.user_data['record']['supplier'] = "’ñ"
    
    await query.edit_message_text(
        f"‚úÖ ’Ñ’°’ø’°’Ø’°÷Ä’°÷Ä: ’ñ\n\n"
        f"üß≠ ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂’®:"
    )
    
    return DIRECTION

async def manual_input(update: Update, context: CallbackContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    query = update.callback_query
    
    await query.edit_message_text("üè™ ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’¥’°’ø’°’Ø’°÷Ä’°÷Ä’´’∂:")
    
    return SUPPLIER_MANUAL

async def generate_user_report(update: Update, context: CallbackContext, display_name: str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    
    try:
        from ...database.database_manager import get_all_records
        from openpyxl import Workbook
        from io import BytesIO
        from datetime import datetime
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_records = get_all_records()
        user_records = [record for record in all_records if record.get('supplier') == display_name]
        
        if not user_records:
            await query.edit_message_text(
                f"üìä {display_name}-’´ ’∞’°’¥’°÷Ä ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä ’π’•’∂ ’£’ø’∂’æ’•’¨:",
                reply_markup=create_back_to_menu_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        wb = Workbook()
        ws = wb.active
        ws.title = f"–û—Ç—á–µ—Ç {display_name}"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ['ID', '‘±’¥’Ω’°’©’´’æ', '’Ñ’°’ø’°’Ø’°÷Ä’°÷Ä', '’à÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂', '’Ü’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂', '‘≥’∏÷Ç’¥’°÷Ä', '‘π’•÷Ä’©’´’Ø']
        ws.append(headers)
        
        # –î–∞–Ω–Ω—ã–µ
        total_amount = 0
        for record in user_records:
            ws.append([
                record.get('id', ''),
                record.get('date', ''),
                record.get('supplier', ''),
                record.get('direction', ''),
                record.get('description', ''),
                record.get('amount', 0),
                record.get('sheet_name', '')
            ])
            total_amount += record.get('amount', 0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏—Ç–æ–≥–∞
        ws.append(['', '', '', '', '‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä:', total_amount, ''])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        file_buffer = BytesIO()
        wb.save(file_buffer)
        file_buffer.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        filename = f"report_{display_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        await query.message.reply_document(
            document=file_buffer,
            filename=filename,
            caption=f"üìä ’Ä’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂ {display_name}-’´ ’∞’°’¥’°÷Ä\n"
                   f"üìù ‘≥÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä: {len(user_records)}\n"
                   f"üí∞ ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’£’∏÷Ç’¥’°÷Ä: {total_amount:,.2f} ’§÷Ä’°’¥\n"
                   f"üìÖ ’ç’ø’•’≤’Æ’æ’•’¨ ’ß: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        )
        
        await query.edit_message_text(
            f"‚úÖ ’Ä’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂’® ’∏÷Ç’≤’°÷Ä’Ø’æ’°’Æ ’ß {display_name}-’´ ’∞’°’¥’°÷Ä",
            reply_markup=create_back_to_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è {display_name}: {e}")
        await query.edit_message_text(
            f"‚ùå ’Ä’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂ ’Ω’ø’•’≤’Æ’•’¨’∏÷Ç ’Ω’≠’°’¨: {e}",
            reply_markup=create_back_to_menu_keyboard()
        )

async def send_payment_report(update: Update, context: CallbackContext, display_name: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ –ø–ª–∞—Ç–µ–∂–∞—Ö"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ payment_handlers
    from .payment_handlers import send_payment_report as payment_report_func
    await payment_report_func(update, context, display_name)

async def show_my_payments(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from ...utils.config_utils import get_user_settings
        user_settings = get_user_settings(user_id)
        display_name = user_settings.get('display_name')
        
        if not display_name:
            await query.edit_message_text(
                "‚ùå ’Å’•÷Ä ’°’∂’∏÷Ç’∂’® ’π’´ ’Ω’°’∞’¥’°’∂’æ’°’Æ: ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’§’´’¥’•’¨ ’°’§’¥’´’∂’´’Ω’ø÷Ä’°’ø’∏÷Ä’´’∂:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(_("menu.back" , user_id), callback_data="back_to_menu")]
                ])
            )
            return
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ payment_handlers
        from .payment_handlers import send_payment_report
        await send_payment_report(update, context, display_name)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.edit_message_text(
            f"‚ùå ’é’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä’´ ’ø’•’≤’•’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’® ’Ω’ø’°’∂’°’¨’∏÷Ç ’Ω’≠’°’¨: ’ì’∏÷Ä’±’•÷Ñ ’∂’∏÷Ä’´÷Å:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(_("menu.back" , user_id), callback_data="back_to_menu")]
            ])
        )

async def analytics_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="general_analytics")],
        [InlineKeyboardButton("üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_analytics")],
        [InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="financial_analytics")],
        [InlineKeyboardButton("üìà –û—Ç—á–µ—Ç—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º", callback_data="period_analytics")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    
    await query.edit_message_text(
        "üìä <b>‘±’∂’°’¨’´’ø’´’Ø’°</b>\n\n"
        "‘∏’∂’ø÷Ä’•÷Ñ ’°’∂’°’¨’´’ø’´’Ø’°’µ’´ ’ø’•’Ω’°’Ø’®:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def user_settings_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üë• ’ç–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_list")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user")],
        [InlineKeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞", callback_data="user_permissions")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_stats")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_menu")]
    ]
    
    await query.edit_message_text(
        "üë• <b>’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤’∂’•÷Ä’´ ’Ø’°’º’°’æ’°÷Ä’∏÷Ç’¥</b>\n\n"
        "‘∏’∂’ø÷Ä’•÷Ñ ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’®:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def backup_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("notifications.access_denied", user_id))
        return
    
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton(_("backup.create", user_id), callback_data="create_backup")],
        [InlineKeyboardButton(_("backup.list", user_id), callback_data="backup_list")],
        [InlineKeyboardButton(_("backup.restore", user_id), callback_data="restore_backup")],
        [InlineKeyboardButton(_("backup.cleanup", user_id), callback_data="cleanup_backups")],
        [InlineKeyboardButton(_("menu.back", user_id), callback_data="settings_menu")]
    ]
    
    await query.edit_message_text(
        f"üíæ <b>{_('backup.main_menu', user_id)}</b>\n\n"
        f"{_('backup.choose_action', user_id)}",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def add_language_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("üá´üá∑ Fran√ßais", callback_data="add_lang_fr")],
        [InlineKeyboardButton("üá©üá™ Deutsch", callback_data="add_lang_de")],
        [InlineKeyboardButton("üá™üá∏ Espa√±ol", callback_data="add_lang_es")],
        [InlineKeyboardButton("üáÆüáπ Italiano", callback_data="add_lang_it")],
        [InlineKeyboardButton("‚úèÔ∏è –î—Ä—É–≥–æ–π —è–∑—ã–∫", callback_data="add_custom_lang")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="translation_management")]
    ]
    
    await query.edit_message_text(
        "üåç <b>’Ü’∏÷Ä ’¨’•’¶’∏÷Ç ’°’æ’•’¨’°÷Å’∂’•’¨</b>\n\n"
        "‘∏’∂’ø÷Ä’•÷Ñ ’¨’•’¶’∏÷Ç ’°’æ’•’¨’°÷Å’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ’Ø’°’¥ ’Ω’ø’•’≤’Æ’•÷Ñ ’±’•÷Ä’®:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ===== –§’à’í’Ü‘ø’ë‘ª‘± –†‘µ‘∂‘µ’ê’é’Ü’à’í ‘ø’à’ä‘ª’ê’à’é‘±‘º’à’í =====

async def create_backup(update: Update, context: CallbackContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("notifications.access_denied", user_id))
        return
    
    await query.answer()
    await query.edit_message_text(
        f"üíæ <b>{_('backup.create', user_id)}</b>\n\n"
        f"{_('backup.creating', user_id)}\n"
        f"{_('backup.please_wait', user_id)}",
        parse_mode="HTML"
    )
    
    try:
        from ...utils.backup_manager import backup_manager
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_info = backup_manager.create_backup("–†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ’¢’∏’ø’®")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        size_mb = backup_info["size"] / (1024 * 1024)
        
        keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="backup_menu")]]
        
        await query.edit_message_text(
            f"‚úÖ <b>{_('backup.created_successfully', user_id)}</b>\n\n"
            f"üìÅ <b>{_('backup.file_name', user_id)}</b> <code>{backup_info['name']}</code>\n"
            f"üìÖ <b>{_('backup.creation_date', user_id)}</b> {datetime.fromisoformat(backup_info['created_at']).strftime('%d.%m.%Y %H:%M')}\n"
            f"üíæ <b>{_('backup.size', user_id)}</b> {size_mb:.1f} {_('backup.mb', user_id)}\n"
            f"üìÑ <b>{_('backup.files_count', user_id)}</b> {backup_info['files_count']}\n\n"
            f"{_('backup.saved_safely', user_id)}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="backup_menu")]]
        await query.edit_message_text(
            f"‚ùå <b>{_('backup.error_creating', user_id)}</b>\n\n"
            f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {str(e)}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def backup_list(update: Update, context: CallbackContext):
    """–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("notifications.access_denied", user_id))
        return
    
    await query.answer()
    
    try:
        from ...utils.backup_manager import backup_manager
        
        backups = backup_manager.list_backups()
        
        if not backups:
            backup_info = f"üìÅ <b>{_('backup.list', user_id)}</b>\n\n‚ùå {_('backup.no_backups_found', user_id)}"
            keyboard = [
                [InlineKeyboardButton(_("backup.create", user_id), callback_data="create_backup")],
                [InlineKeyboardButton(_("menu.back", user_id), callback_data="backup_menu")]
            ]
        else:
            backup_info = f"üìÅ <b>{_('backup.list', user_id)}</b>\n\nüìã <b>{_('backup.available_backups', user_id)}</b>\n"
            
            total_size = 0
            for i, backup in enumerate(backups[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5
                created_at = datetime.fromisoformat(backup['created_at'])
                size_mb = backup['size'] / (1024 * 1024)
                total_size += backup['size']
                
                backup_info += f"‚Ä¢ <code>{backup['name']}</code>\n"
                backup_info += f"  üìÖ {created_at.strftime('%d.%m.%Y %H:%M')} ({size_mb:.1f} {_('backup.mb', user_id)})\n"
                if backup.get('description'):
                    backup_info += f"  üìù {backup['description']}\n"
                backup_info += "\n"
            
            if len(backups) > 5:
                backup_info += f"... {_('backup.and_more', user_id)} {len(backups) - 5} {_('backup.backups', user_id)}\n\n"
            
            total_size_mb = total_size / (1024 * 1024)
            backup_info += f"üíæ <b>{_('backup.total_size', user_id)}</b> {total_size_mb:.1f} {_('backup.mb', user_id)}\n"
            backup_info += f"üìä <b>{_('backup.count', user_id)}</b> {len(backups)} {_('backup.backups', user_id)}"
            
            keyboard = [
                [InlineKeyboardButton(_("backup.restore", user_id), callback_data="restore_backup")],
                [InlineKeyboardButton(_("backup.cleanup", user_id), callback_data="cleanup_backups")],
                [InlineKeyboardButton(_("backup.update_list", user_id), callback_data="backup_list")],
                [InlineKeyboardButton(_("menu.back", user_id), callback_data="backup_menu")]
            ]
        
        await query.edit_message_text(
            backup_info,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="backup_menu")]]
        await query.edit_message_text(
            f"‚ùå <b>{_('backup.error_loading_list', user_id)}</b>\n\n{str(e)}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def restore_backup(update: Update, context: CallbackContext):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("notifications.access_denied", user_id))
        return
    
    await query.answer()
    
    try:
        from ...utils.backup_manager import backup_manager
        
        backups = backup_manager.list_backups()
        
        if not backups:
            keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="backup_menu")]]
            await query.edit_message_text(
                f"üîÑ <b>{_('backup.restore', user_id)}</b>\n\n"
                f"‚ùå {_('backup.no_backups_found', user_id)}.\n"
                f"{_('backup.create_first', user_id)}",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        keyboard = []
        for backup in backups[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            created_at = datetime.fromisoformat(backup['created_at'])
            size_mb = backup['size'] / (1024 * 1024)
            
            button_text = f"üìÅ {backup['name']} ({size_mb:.1f}{_('backup.mb', user_id)})"
            callback_data = f"select_backup_{backup['name']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        keyboard.append([InlineKeyboardButton(_("menu.back", user_id), callback_data="backup_menu")])
        
        await query.edit_message_text(
            f"üîÑ <b>{_('backup.restore', user_id)}</b>\n\n"
            f"‚ö†Ô∏è <b>{_('backup.restore_warning', user_id)}</b>\n"
            f"{_('backup.restore_info', user_id)}\n\n"
            f"üìã {_('backup.select_backup', user_id)}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="backup_menu")]]
        await query.edit_message_text(
            f"‚ùå <b>{_('backup.error_loading_backups', user_id)}</b>\n\n{str(e)}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def cleanup_backups(update: Update, context: CallbackContext):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("notifications.access_denied", user_id))
        return
    
    await query.answer()
    
    try:
        from ...utils.backup_manager import backup_manager
        
        backups = backup_manager.list_backups()
        total_size = sum(backup['size'] for backup in backups)
        total_size_mb = total_size / (1024 * 1024)
        
        oldest_date = ""
        if backups:
            oldest_backup = min(backups, key=lambda x: x['created_at'])
            oldest_date = datetime.fromisoformat(oldest_backup['created_at']).strftime('%d.%m.%Y')
        
        keyboard = [
            [InlineKeyboardButton(_("backup.keep_last_10", user_id), callback_data="cleanup_keep_10")],
            [InlineKeyboardButton(_("backup.keep_last_5", user_id), callback_data="cleanup_keep_5")],
            [InlineKeyboardButton(_("backup.keep_last_3", user_id), callback_data="cleanup_keep_3")],
            [InlineKeyboardButton(_("backup.delete_older_30", user_id), callback_data="cleanup_30_days")],
            [InlineKeyboardButton(_("menu.back", user_id), callback_data="backup_menu")]
        ]
        
        await query.edit_message_text(
            f"üßπ <b>{_('backup.cleanup_title', user_id)}</b>\n\n"
            f"üìä <b>{_('backup.cleanup_status', user_id)}</b>\n"
            f"‚Ä¢ {_('backup.total_backups', user_id)} {len(backups)}\n"
            f"‚Ä¢ {_('backup.total_size', user_id)} {total_size_mb:.1f} {_('backup.mb', user_id)}\n"
            f"‚Ä¢ {_('backup.oldest_backup', user_id)} {oldest_date}\n\n"
            f"{_('backup.select_cleanup_rule', user_id)}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="backup_menu")]]
        await query.edit_message_text(
            f"‚ùå <b>{_('backup.error_loading_info', user_id)}</b>\n\n{str(e)}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def cleanup_backups_by_count(update: Update, context: CallbackContext, keep_count: int):
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("notifications.access_denied", user_id))
        return
    
    await query.answer()
    
    try:
        from ...utils.backup_manager import backup_manager
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ø–∏–π –¥–æ –æ—á–∏—Å—Ç–∫–∏
        backups_before = backup_manager.list_backups()
        total_before = len(backups_before)
        size_before = sum(backup['size'] for backup in backups_before) / (1024 * 1024)
        
        if total_before <= keep_count:
            keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="cleanup_backups")]]
            await query.edit_message_text(
                f"‚ÑπÔ∏è <b>{_('backup.no_cleanup_needed', user_id)}</b>\n\n"
                f"–£ –≤–∞—Å —Ç–æ–ª—å–∫–æ {total_before} —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π, —á—Ç–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ {keep_count}.\n\n"
                f"üíæ <b>{_('backup.total_size', user_id)}</b> {size_before:.1f} {_('backup.mb', user_id)}",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
        cleanup_result = backup_manager.cleanup_old_backups(keep_count=keep_count)
        
        freed_space_mb = cleanup_result['freed_space'] / (1024 * 1024)
        
        keyboard = [
            [InlineKeyboardButton(_("backup.repeat_cleanup", user_id), callback_data="cleanup_backups")],
            [InlineKeyboardButton(_("backup.back_to_backup", user_id), callback_data="backup_menu")]
        ]
        
        await query.edit_message_text(
            f"‚úÖ <b>{_('backup.cleanup_completed', user_id)}</b>\n\n"
            f"üóëÔ∏è <b>{_('backup.deleted_count', user_id)}</b> {cleanup_result['deleted_count']}\n"
            f"üíæ <b>{_('backup.kept_count', user_id)}</b> {cleanup_result['kept_count']}\n"
            f"üíø <b>{_('backup.freed_space', user_id)}</b> {freed_space_mb:.1f} {_('backup.mb', user_id)}\n\n"
            f"üìã <b>{_('backup.cleanup_rule', user_id)}</b> ’ç’°’∞’¥’°’∂’æ’°’Æ ’ß ’æ’•÷Ä’ª’´’∂ {keep_count} ’Ø’∏’∫’´’°’∂’•÷Ä’´ ’∫’°’∞’∫’°’∂’∏÷Ç’¥",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {e}")
        keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="cleanup_backups")]]
        await query.edit_message_text(
            f"‚ùå <b>{_('backup.error_cleanup', user_id)}</b>\n\n"
            f"<code>{str(e)}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def cleanup_backups_by_age(update: Update, context: CallbackContext, max_age_days: int):
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π —Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("notifications.access_denied", user_id))
        return
    
    await query.answer()
    
    try:
        from ...utils.backup_manager import backup_manager
        from datetime import datetime, timedelta
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–ø–∏–π
        all_backups = backup_manager.list_backups()
        cutoff_date = datetime.now() - timedelta(days=max_age_days)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –∫–æ–ø–∏–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
        old_backups = []
        total_size_to_delete = 0
        
        for backup in all_backups:
            backup_date = datetime.fromisoformat(backup['created_at'])
            if backup_date < cutoff_date:
                old_backups.append(backup)
                total_size_to_delete += backup['size']
        
        if not old_backups:
            keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="cleanup_backups")]]
            await query.edit_message_text(
                f"‚ÑπÔ∏è <b>{_('backup.no_cleanup_needed', user_id)}</b>\n\n"
                f"{_('backup.cleanup_no_old', user_id)} {max_age_days} {_('backup.days', user_id)}.\n\n"
                f"üìÅ <b>{_('backup.total_backups', user_id)}</b> {len(all_backups)}\n"
                f"üìÖ <b>{_('backup.oldest_backup', user_id)}</b> {datetime.fromisoformat(min(all_backups, key=lambda x: x['created_at'])['created_at']).strftime('%d.%m.%Y') if all_backups else '–ù–µ—Ç'}",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–ø–∏–∏
        deleted_count = 0
        freed_space = 0
        
        for backup in old_backups:
            if backup_manager.delete_backup(backup['name']):
                deleted_count += 1
                freed_space += backup['size']
        
        freed_space_mb = freed_space / (1024 * 1024)
        remaining_count = len(all_backups) - deleted_count
        
        keyboard = [
            [InlineKeyboardButton(_("backup.repeat_cleanup", user_id), callback_data="cleanup_backups")],
            [InlineKeyboardButton(_("backup.back_to_backup", user_id), callback_data="backup_menu")]
        ]
        
        await query.edit_message_text(
            f"‚úÖ <b>{_('backup.cleanup_completed', user_id)}</b>\n\n"
            f"üóëÔ∏è <b>{_('backup.deleted_count', user_id)}</b> {deleted_count}\n"
            f"üíæ <b>–û—Å—Ç–∞–ª–æ—Å—å –∫–æ–ø–∏–π:</b> {remaining_count}\n"
            f"üíø <b>{_('backup.freed_space', user_id)}</b> {freed_space_mb:.1f} {_('backup.mb', user_id)}\n\n"
            f"üìã <b>{_('backup.cleanup_rule', user_id)}</b> –£–¥–∞–ª–µ–Ω—ã –∫–æ–ø–∏–∏ —Å—Ç–∞—Ä—à–µ {max_age_days} {_('backup.days', user_id)}\n"
            f"üìÖ <b>{_('backup.boundary_date', user_id)}</b> {cutoff_date.strftime('%d.%m.%Y')}",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É: {e}")
        keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="cleanup_backups")]]
        await query.edit_message_text(
            f"‚ùå <b>{_('backup.error_cleanup', user_id)}</b>\n\n"
            f"<code>{str(e)}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# ===== –î–û’ä’à‘º’Ü‘ª’è‘µ‘º‘ª –û–ë–†–ê–ë–û–¢–ß–ò–ö’Ü‘µ’ê =====

async def general_analytics_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("notifications.access_denied", user_id))
        return
    
    await query.answer()
    
    try:
        from ...database.database_manager import get_db_stats, get_all_records
        from datetime import datetime, timedelta
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = get_db_stats()
        all_records = get_all_records()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–∏–æ–¥—ã
        now = datetime.now()
        today_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
        week_start = now - timedelta(days=7)
        month_start = now - timedelta(days=30)
        
        today_records = [r for r in all_records if safe_parse_date(r.get('date', '')) >= today_start]
        week_records = [r for r in all_records if safe_parse_date(r.get('date', '')) >= week_start]
        month_records = [r for r in all_records if safe_parse_date(r.get('date', '')) >= month_start]
        
        # –°—É–º–º—ã –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        today_amount = sum(r.get('amount', 0) for r in today_records)
        week_amount = sum(r.get('amount', 0) for r in week_records)
        month_amount = sum(r.get('amount', 0) for r in month_records)
        
        # –¢–æ–ø –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        supplier_stats = {}
        for record in all_records:
            supplier = record.get('supplier', _('users.unknown', user_id))
            supplier_stats[supplier] = supplier_stats.get(supplier, 0) + record.get('amount', 0)
        
        top_suppliers = sorted(supplier_stats.items(), key=lambda x: x[1], reverse=True)[:5]
        
        keyboard = [
            [InlineKeyboardButton(_("analytics.export", user_id), callback_data="export_general_analytics")],
            [InlineKeyboardButton(_("menu.back", user_id), callback_data="analytics_menu")]
        ]
        
        analytics_text = (
            f"üìä <b>{_('analytics.general', user_id)}</b>\n\n"
            f"üîÑ {_('analytics.activity', user_id)}\n"
            f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {len(today_records)} –∑–∞–ø–∏—Å–µ–π ({today_amount:,.2f} ’§÷Ä.)\n"
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {len(week_records)} –∑–∞–ø–∏—Å–µ–π ({week_amount:,.2f} ’§÷Ä.)\n"
            f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {len(month_records)} ’£÷Ä’°’º’∏÷Ç’¥ ({month_amount:,.2f} ’§÷Ä.)\n\n"
            f"üèÜ {_('analytics.top_users', user_id)}\n"
        )
        
        for i, (supplier, amount) in enumerate(top_suppliers, 1):
            analytics_text += f"{i}. {supplier}: {amount:,.2f} ’§÷Ä.\n"
        
        await query.edit_message_text(
            analytics_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ general_analytics_handler: {e}")
        keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="analytics_menu")]]
        await query.edit_message_text(
            f"‚ùå <b>{_('notifications.error', user_id)}</b>\n\n<code>{str(e)}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def user_analytics_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("notifications.access_denied", user_id))
        return
    
    await query.answer()
    
    try:
        from ...database.database_manager import get_all_records
        from ...utils.config_utils import load_users
        
        all_records = get_all_records()
        users = load_users()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        user_stats = {}
        for record in all_records:
            supplier = record.get('supplier', _('users.unknown', user_id))
            if supplier not in user_stats:
                user_stats[supplier] = {'count': 0, 'amount': 0}
            user_stats[supplier]['count'] += 1
            user_stats[supplier]['amount'] += record.get('amount', 0)
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø–∏—Å–µ–π
        top_by_count = sorted(user_stats.items(), key=lambda x: x[1]['count'], reverse=True)[:5]
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—É–º–º–µ
        top_by_amount = sorted(user_stats.items(), key=lambda x: x[1]['amount'], reverse=True)[:5]
        
        keyboard = [
            [InlineKeyboardButton(_("analytics.export", user_id), callback_data="export_user_analytics")],
            [InlineKeyboardButton(_("menu.back", user_id), callback_data="analytics_menu")]
        ]
        
        analytics_text = (
            f"üë• <b>{_('analytics.users', user_id)}</b>\n\n"
            f"üìä {_('users.total_users', user_id)} {len(users)}\n"
            f"üìù –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {len(user_stats)}\n\n"
            f"üèÜ {_('analytics.top_users', user_id)} (–ø–æ –∑–∞–ø–∏—Å—è–º):\n"
        )
        
        for i, (supplier, stats) in enumerate(top_by_count, 1):
            analytics_text += f"{i}. {supplier}: {stats['count']} –∑–∞–ø–∏—Å–µ–π\n"
        
        analytics_text += f"\nüí∞ {_('analytics.top_users', user_id)} (–ø–æ —Å—É–º–º–µ):\n"
        
        for i, (supplier, stats) in enumerate(top_by_amount, 1):
            analytics_text += f"{i}. {supplier}: {stats['amount']:,.2f} ’§÷Ä.\n"
        
        await query.edit_message_text(
            analytics_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ user_analytics_handler: {e}")
        keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="analytics_menu")]]
        await query.edit_message_text(
            f"‚ùå <b>{_('notifications.error', user_id)}</b>\n\n<code>{str(e)}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def financial_analytics_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("notifications.access_denied", user_id))
        return
    
    await query.answer()
    
    try:
        from ...database.database_manager import get_all_records
        from datetime import datetime, timedelta
        
        all_records = get_all_records()
        
        if not all_records:
            keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="analytics_menu")]]
            await query.edit_message_text(
                f"üí∞ <b>{_('analytics.financial', user_id)}</b>\n\n"
                f"üìä {_('users.no_users_found', user_id)}",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        # –û–±—â–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        total_amount = sum(r.get('amount', 0) for r in all_records)
        avg_amount = total_amount / len(all_records) if all_records else 0
        max_amount = max(r.get('amount', 0) for r in all_records)
        min_amount = min(r.get('amount', 0) for r in all_records)
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
        now = datetime.now()
        periods = {
            'today': now.replace(hour=0, minute=0, second=0, microsecond=0),
            'week': now - timedelta(days=7),
            'month': now - timedelta(days=30)
        }
        
        period_stats = {}
        for period_name, start_date in periods.items():
            period_records = [r for r in all_records 
                             if safe_parse_date(r.get('date', '')) >= start_date]
            period_stats[period_name] = {
                'count': len(period_records),
                'amount': sum(r.get('amount', 0) for r in period_records),
                'avg': sum(r.get('amount', 0) for r in period_records) / len(period_records) if period_records else 0
            }
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        direction_stats = {}
        for record in all_records:
            direction = record.get('direction', _('users.not_specified', user_id))
            if direction not in direction_stats:
                direction_stats[direction] = {'count': 0, 'amount': 0}
            direction_stats[direction]['count'] += 1
            direction_stats[direction]['amount'] += record.get('amount', 0)
        
        top_directions = sorted(direction_stats.items(), key=lambda x: x[1]['amount'], reverse=True)[:5]
        
        keyboard = [
            [InlineKeyboardButton(_("analytics.export", user_id), callback_data="export_financial_analytics")],
            [InlineKeyboardButton(_("menu.back", user_id), callback_data="analytics_menu")]
        ]
        
        analytics_text = (
            f"üí∞ <b>{_('analytics.financial', user_id)}</b>\n\n"
            f"üìä {_('analytics.general_stats', user_id)}\n"
            f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:,.2f} ’§÷Ä.\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞: {avg_amount:,.2f} ’§÷Ä.\n"
            f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: {max_amount:,.2f} ’§÷Ä.\n"
            f"‚Ä¢ –ú–∏–Ω–∏–º—É–º: {min_amount:,.2f} ’§÷Ä.\n\n"
            f"üìà {_('analytics.trends', user_id)}\n"
            f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {period_stats['today']['amount']:,.2f} ’§÷Ä. ({period_stats['today']['count']} –∑–∞–ø–∏—Å–µ–π)\n"
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {period_stats['week']['amount']:,.2f} ’§÷Ä. ({period_stats['week']['count']} –∑–∞–ø–∏—Å–µ–π)\n"
            f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {period_stats['month']['amount']:,.2f} ’§÷Ä. ({period_stats['month']['count']} –∑–∞–ø–∏—Å–µ–π)\n\n"
            f"üí≥ {_('analytics.categories', user_id)}\n"
        )
        
        for i, (direction, stats) in enumerate(top_directions, 1):
            analytics_text += f"{i}. {direction}: {stats['amount']:,.2f} ’§÷Ä. ({stats['count']} –∑–∞–ø–∏—Å–µ–π)\n"
        
        await query.edit_message_text(
            analytics_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ financial_analytics_handler: {e}")
        keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="analytics_menu")]]
        await query.edit_message_text(
            f"‚ùå <b>{_('notifications.error', user_id)}</b>\n\n<code>{str(e)}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def period_analytics_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("notifications.access_denied", user_id))
        return
    
    await query.answer()
    
    try:
        from ...database.database_manager import get_all_records
        from datetime import datetime, timedelta
        from collections import defaultdict
        
        all_records = get_all_records()
        
        if not all_records:
            keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="analytics_menu")]]
            await query.edit_message_text(
                f"üìÖ <b>{_('analytics.periods', user_id)}</b>\n\n"
                f"üìä {_('users.no_users_found', user_id)}",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        now = datetime.now()
        daily_stats = defaultdict(lambda: {'count': 0, 'amount': 0})
        
        for i in range(7):
            date = (now - timedelta(days=i)).strftime('%Y-%m-%d')
            daily_stats[date] = {'count': 0, 'amount': 0}
        
        # –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–µ–π –ø–æ –¥–Ω—è–º
        for record in all_records:
            record_date_str = record.get('date', '')
            if record_date_str and len(record_date_str) >= 10:
                record_date = record_date_str[:10]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
                if record_date in daily_stats:
                    daily_stats[record_date]['count'] += 1
                    daily_stats[record_date]['amount'] += record.get('amount', 0)
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
        monthly_stats = defaultdict(lambda: {'count': 0, 'amount': 0})
        
        for i in range(6):
            date = (now - timedelta(days=30*i))
            month_key = date.strftime('%Y-%m')
            monthly_stats[month_key] = {'count': 0, 'amount': 0}
        
        for record in all_records:
            record_date_str = record.get('date', '')
            if record_date_str and len(record_date_str) >= 7:
                record_date = record_date_str[:7]  # YYYY-MM
                if record_date in monthly_stats:
                    monthly_stats[record_date]['count'] += 1
                    monthly_stats[record_date]['amount'] += record.get('amount', 0)
        
        keyboard = [
            [InlineKeyboardButton(_("analytics.export", user_id), callback_data="export_period_analytics")],
            [InlineKeyboardButton(_("menu.back", user_id), callback_data="analytics_menu")]
        ]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        analytics_text = f"üìÖ <b>{_('analytics.periods', user_id)}</b>\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è–º
        analytics_text += "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π:\n"
        sorted_daily = sorted(daily_stats.items(), reverse=True)[:7]
        for date, stats in sorted_daily:
            try:
                formatted_date = datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m')
            except:
                formatted_date = date[-5:]  # MM-DD
            analytics_text += f"‚Ä¢ {formatted_date}: {stats['count']} –∑–∞–ø–∏—Å–µ–π, {stats['amount']:,.0f} ’§÷Ä.\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
        analytics_text += "\nüìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤:\n"
        sorted_monthly = sorted(monthly_stats.items(), reverse=True)[:6]
        for month, stats in sorted_monthly:
            try:
                formatted_month = datetime.strptime(f"{month}-01", '%Y-%m-%d').strftime('%m.%Y')
            except:
                formatted_month = month
            analytics_text += f"‚Ä¢ {formatted_month}: {stats['count']} –∑–∞–ø–∏—Å–µ–π, {stats['amount']:,.0f} ’§÷Ä.\n"
        
        await query.edit_message_text(
            analytics_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ period_analytics_handler: {e}")
        keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="analytics_menu")]]
        await query.edit_message_text(
            f"‚ùå <b>{_('notifications.error', user_id)}</b>\n\n<code>{str(e)}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def show_sheet_selection_for_add_record(update: Update, context: CallbackContext, record_type: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ª–∏—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings = get_user_settings(user_id)
    spreadsheet_id = user_settings.get('active_spreadsheet_id')
    
    if not spreadsheet_id:
        await query.edit_message_text(
            "‚ùå ’Ü’°’≠ ’∫’•’ø÷Ñ ’ß ’®’∂’ø÷Ä’•’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø’®",
            reply_markup=create_back_to_menu_keyboard()
        )
        return
    
    try:
        sheets_info, spreadsheet_title = get_cached_sheets_info(spreadsheet_id)
        
        if not sheets_info:
            await query.edit_message_text(
                "‚ùå ‘±’≤’µ’∏÷Ç’Ω’°’Ø’∏÷Ç’¥ ’©’•÷Ä’©’´’Ø’∂’•÷Ä ’π’Ø’°’∂",
                reply_markup=create_back_to_menu_keyboard()
            )
            return
        
        keyboard = create_add_record_sheet_selection(sheets_info, record_type)
        
        record_text = "’£÷Ä’°’º’∏÷Ç’¥" if record_type == "record" else "’¢’°÷Å’©’∏’≤’∏÷Ç’¥"
        await query.edit_message_text(
            f"üìã ‘∏’∂’ø÷Ä’•÷Ñ ’©’•÷Ä’©’´’Ø’® {record_text}-’´ ’∞’°’¥’°÷Ä:\n\n"
            f"üìä ‘±’≤’µ’∏÷Ç’Ω’°’Ø: <b>{spreadsheet_title}</b>",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå ’á’≠’°’¨ ’©’•÷Ä’©’´’Ø’∂’•÷Ä’´ ÷Å’°’∂’Ø’® ’Ω’ø’°’∂’°’¨’∏÷Ç ’™’°’¥’°’∂’°’Ø: {e}",
            reply_markup=create_back_to_menu_keyboard()
        )



# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
async def user_list(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("notifications.access_denied", user_id))
        return
    
    await query.answer()
    
    try:
        from ...utils.config_utils import load_users
        users = load_users()
        
        if not users:
            keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="users_management_menu")]]
            await query.edit_message_text(
                f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_list_text = f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        user_list_text += f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for i, (user_id_str, user_data) in enumerate(list(users.items())[:10], 1):
            display_name = user_data.get('display_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            language = user_data.get('language', 'hy')
            is_admin = int(user_id_str) in ADMIN_IDS
            
            admin_badge = "üëë" if is_admin else "üë§"
            user_list_text += f"{i}. {admin_badge} <b>{display_name}</b>\n"
            user_list_text += f"   ID: <code>{user_id_str}</code>\n"
            user_list_text += f"   üåê {language.upper()}\n"
            if user_data.get('active_spreadsheet_id'):
                user_list_text += f"   üìä –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–∞–±–ª–∏—Ü–µ\n"
            user_list_text += "\n"
        
        if len(users) > 10:
            user_list_text += f"... –∏ –µ—â–µ {len(users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="user_list")],
            [InlineKeyboardButton(_("menu.back", user_id), callback_data="users_management_menu")]
        ]
        
        await query.edit_message_text(
            user_list_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ user_list: {e}")
        keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="users_management_menu")]]
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n<code>{str(e)}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def add_user(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("notifications.access_denied", user_id))
        return
    
    await query.answer()
    
    try:
        from ...utils.config_utils import load_users, save_users
        import json
        import os
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        allowed_users_path = os.path.join("data", "allowed_users.json")
        try:
            with open(allowed_users_path, 'r', encoding='utf-8') as f:
                allowed_users = json.load(f)
        except FileNotFoundError:
            allowed_users = []
        
        users = load_users()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = [
            [InlineKeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –ø–æ ID", callback_data="add_user_by_id")],
            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö", callback_data="show_unauthorized_users")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="users_management_menu")]
        ]
        
        stats_text = f"‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        stats_text += f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
        stats_text += f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(allowed_users)}\n\n"
        stats_text += f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        
        await query.edit_message_text(
            stats_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_user: {e}")
        keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="users_management_menu")]]
        await query.edit_message_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n<code>{str(e)}</code>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def add_user_by_id_handler(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("notifications.access_denied", user_id))
        return
    
    await query.answer()
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="add_user")]]
    await query.edit_message_text(
        f"üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö.\n"
        f"ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)\n\n"
        f"üí° –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID
    context.user_data['waiting_for_user_id'] = True

async def show_unauthorized_users_handler(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer(_("notifications.access_denied", user_id))
        return
    
    await query.answer()
    
    try:
        from ...utils.config_utils import load_users
        import json
        import os
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        allowed_users_path = os.path.join("data", "allowed_users.json")
        try:
            with open(allowed_users_path, 'r', encoding='utf-8') as f:
                allowed_users = json.load(f)
        except FileNotFoundError:
            allowed_users = []
        
        users = load_users()
        unauthorized_users = []
        
        for uid, udata in users.items():
            if int(uid) not in allowed_users:
                unauthorized_users.append((uid, udata.get('display_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')))
        
        if not unauthorized_users:
            text = f"‚ùå <b>–ù–µ–∞–≤’ø’∏÷Ä’´’¶’æ’°’Æ ÷Ö’£’ø’æ’∏’≤’∂’•÷Ä</b>\n\n‚úÖ ‘≤’∏’¨’∏÷Ä ÷Ö’£’ø’æ’∏’≤’∂’•÷Ä’® ’∏÷Ç’∂’•’∂ ’¥’∏÷Ç’ø÷Ñ ’¢’∏’ø’®: "
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="user_permissions")]]
        else:
            text = f"‚ùå <b>–ù–µ–∞–≤’ø’∏÷Ä’´’¶’æ’°’Æ ÷Ö’£’ø’æ’∏’≤’∂’•÷Ä</b>\n\n"
            text += f"’Ü’°’µ’æ’°’Æ {len(unauthorized_users)} ÷Ö’£’ø’æ’∏’≤’∂’•÷Ä’´:\n\n"
            
            for i, (uid, name) in enumerate(unauthorized_users[:10], 1):
                text += f"{i}. <b>{name}</b>\n"
                text += f"   ID: <code>{uid}</code>\n"
                text += f"   üë§ ‘±’æ’•’¨’°÷Å’∂’•’¨: /authorize_{uid}\n\n"
            
            if len(unauthorized_users) > 10:
                text += f"... ÷á ÷á’Ω {len(unauthorized_users) - 10} ÷Ö’£’ø’æ’∏’≤’∂’•÷Ä’´"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="show_unauthorized_users")],
            [InlineKeyboardButton("
