"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∞–ª–µ—Ä—Ç–æ–≤
"""
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

from ...config.settings import ADMIN_IDS
from ...utils.config_utils import load_users, send_to_log_chat
from ...database.database_manager import get_all_records, get_payments

logger = logging.getLogger(__name__)

async def check_debt_alerts(context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ–ª–≥–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        users = load_users()
        
        for user_id, user_data in users.items():
            display_name = user_data.get('display_name')
            if not display_name:
                continue
                
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ª–≥
            debt = await calculate_user_debt(display_name)
            
            if debt > 100000:  # –ï—Å–ª–∏ –¥–æ–ª–≥ –±–æ–ª—å—à–µ 100–∫ –¥—Ä–∞–º
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                await notify_admins_about_debt(context, display_name, debt)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_id.isdigit():
                    await notify_user_about_debt(context, int(user_id), debt)
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–≥–æ–≤: {e}")

async def calculate_user_debt(display_name: str) -> float:
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ–ª–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db_records = get_all_records()
    total_expenses = 0
    
    for record in db_records:
        if record['supplier'] == display_name and record['amount'] > 0:
            total_expenses += record['amount']
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    payments = get_payments(display_name)
    total_paid = sum(payment[0] for payment in payments) if payments else 0
    
    return total_expenses - total_paid

async def notify_admins_about_debt(context: CallbackContext, display_name: str, debt: float):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –æ –±–æ–ª—å—à–æ–º –¥–æ–ª–≥–µ"""
    message = (
        f"‚ö†Ô∏è <b>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥–æ–ª–≥–µ!</b>\n\n"
        f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {display_name}\n"
        f"üí∏ –î–æ–ª–≥: {debt:,.2f} ’§÷Ä’°’¥\n\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã."
    )
    
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=message,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def notify_user_about_debt(context: CallbackContext, user_id: int, debt: float):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–æ–ª–≥–µ"""
    message = (
        f"üí∞ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏</b>\n\n"
        f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å: {debt:,.2f} ’§÷Ä’°’¥\n\n"
        f"–ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è."
    )
    
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=message,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def send_weekly_report(context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∞–º"""
    try:
        users = load_users()
        report_data = []
        
        for user_id, user_data in users.items():
            display_name = user_data.get('display_name')
            if not display_name:
                continue
                
            debt = await calculate_user_debt(display_name)
            report_data.append({
                'name': display_name,
                'debt': debt
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É –¥–æ–ª–≥–∞
        report_data.sort(key=lambda x: x['debt'], reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_text = "üìä <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è–º</b>\n\n"
        
        for i, user_data in enumerate(report_data[:10], 1):  # –¢–æ–ø 10
            report_text += f"{i}. {user_data['name']}: {user_data['debt']:,.2f} ’§÷Ä’°’¥\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=report_text,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
