"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
"""
import uuid
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler

from ..states.conversation_states import DATE, SUPPLIER_CHOICE, DIRECTION, DESCRIPTION, AMOUNT, SUPPLIER_MANUAL
from ..keyboards.inline_keyboards import create_main_menu, create_supplier_choice_keyboard
from ...utils.config_utils import is_user_allowed, get_user_settings, update_user_settings, load_users, save_users
from ...utils.date_utils import normalize_date
from ...utils.formatting import format_record_info
from ...database.database_manager import add_record_to_db
from ...google_integration.sheets_manager import add_record_to_sheet
from ...utils.report_manager import send_report
from ..handlers.translation_handlers import _

logger = logging.getLogger(__name__)

async def start_add_record(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    logger.info(f"start_add_record –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, callback_data: {query.data}")
    
    if not is_user_allowed(user_id):
        await query.edit_message_text("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω:")
        return ConversationHandler.END
    
    # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    context.user_data.pop('record', None)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ª–∏—Å—Ç–∞ –∏–∑ callback_data
    if query.data and query.data.startswith("add_record_sheet_"):
        sheet_name = query.data.replace("add_record_sheet_", "")
        logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–æ –∏–º—è –ª–∏—Å—Ç–∞: {sheet_name}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ª–∏—Å—Ç–∞ –≤ context.user_data
        context.user_data['selected_sheet_name'] = sheet_name
    else:
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ context.user_data
        sheet_name = context.user_data.get('selected_sheet_name')
        logger.warning(f"–ò–º—è –ª–∏—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ callback_data, –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ context: {sheet_name}")
    
    if not sheet_name:
        # –ï—Å–ª–∏ –ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="add_record_menu")]]
        await query.edit_message_text(
            "‚ùå ’ä’•’ø÷Ñ ’ß ’∂’°’≠ ’®’∂’ø÷Ä’•’¨ ’©’•÷Ä’©’´’Ø’®:\n"
            "‘ø’ø’ø’°÷Å’∂’•÷Ñ \"‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’£÷Ä’°’º’∏÷Ç’¥\" ÷á ’®’∂’ø÷Ä’•÷Ñ ’©’•÷Ä’©’´’Ø",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings = get_user_settings(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not user_settings.get('active_spreadsheet_id'):
        keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="back_to_menu")]]
        await query.edit_message_text(
            "‚ùå ’Ü’°’≠ ’∫’•’ø÷Ñ ’ß ’®’∂’ø÷Ä’•’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø’®:\n"
            "’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ üìä ‘∏’∂’ø÷Ä’•’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ConversationHandler.END
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª–∏—Å—Ç –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
    update_user_settings(user_id, {'active_sheet_name': sheet_name})
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    record_id = "cb-" + str(uuid.uuid4())[:8]
    current_date = datetime.now().strftime("%Y-%m-%d")
    context.user_data['record'] = {
        'id': record_id,
        'date': current_date,
        'user_id': user_id
    }
    
    # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    display_name = user_settings.get('display_name')
    
    keyboard = []
    if display_name:
        keyboard.append([InlineKeyboardButton(f"üë§ ’ï’£’ø’°’£’∏÷Ä’Æ’•’¨ ’´’¥ ’°’∂’∏÷Ç’∂’® ({display_name})", callback_data="use_my_name")])
    keyboard.append([InlineKeyboardButton(f"üè¢ ’ï’£’ø’°’£’∏÷Ä’Æ’•’¨ ’ñ’´÷Ä’¥’°’µ’´ ’°’∂’∏÷Ç’∂’®", callback_data="use_firm_name")])
    # keyboard.append([InlineKeyboardButton("‚úèÔ∏è ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’±’•’º÷Ñ’∏’æ", callback_data="manual_input")])
    
    await query.edit_message_text(
        f"‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’∂’∏÷Ä ’£÷Ä’°’º’∏÷Ç’¥\n"
        f"üÜî ID: <code>{record_id}</code>\n"
        f"üìÖ ‘±’¥’Ω’°’©’´’æ: <b>{current_date}</b>\n"
        f"üìã ‘π’•÷Ä’©’´’Ø: <b>{sheet_name}</b>\n\n"
        f"üè™ ‘∏’∂’ø÷Ä’•÷Ñ ’¥’°’ø’°’Ø’°÷Ä’°÷Ä’´ ’ø’•’Ω’°’Ø’®:",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return SUPPLIER_CHOICE

async def start_add_skip_record(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–ø—É—Å–∫–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏, —Å–æ—Ö—Ä–∞–Ω—è—è –¥—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    context.user_data.pop('record', None)
    
    if not is_user_allowed(user_id):
        await query.edit_message_text("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω:")
        return ConversationHandler.END

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ª–∏—Å—Ç–∞ –∏–∑ callback_data
    if query.data and query.data.startswith("add_skip_sheet_"):
        sheet_name = query.data.replace("add_skip_sheet_", "")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ª–∏—Å—Ç–∞ –≤ context.user_data
        context.user_data['selected_sheet_name'] = sheet_name
    else:
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ context.user_data
        sheet_name = context.user_data.get('selected_sheet_name')
    
    if not sheet_name:
        # –ï—Å–ª–∏ –ª–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
        keyboard = [[InlineKeyboardButton(_("menu.back", user_id), callback_data="add_record_menu")]]
        await query.edit_message_text(
            "‚ùå ’ä’•’ø÷Ñ ’ß ’∂’°’≠ ’®’∂’ø÷Ä’•’¨ ’©’•÷Ä’©’´’Ø’®:\n"
            "‘ø’ø’ø’°÷Å’∂’•÷Ñ \"‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’¢’°÷Å’©’∏’≤’∏÷Ç’¥\" ÷á ’®’∂’ø÷Ä’•÷Ñ ’©’•÷Ä’©’´’Ø",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_settings = get_user_settings(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not user_settings.get('active_spreadsheet_id'):
        keyboard = [[InlineKeyboardButton(_("menu.back" , user_id), callback_data="back_to_menu")]]
        await query.edit_message_text(
            "‚ùå ’Ü’°’≠ ’∫’•’ø÷Ñ ’ß ’®’∂’ø÷Ä’•’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø’®:\n"
            "’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ ÔøΩ ‘∏’∂’ø÷Ä’•’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø",
            reply_markup=InlineKeyboardMarkup(keyboard))
        return ConversationHandler.END

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª–∏—Å—Ç –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π
    update_user_settings(user_id, {'active_sheet_name': sheet_name})

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
    record_id = "cb-" + str(uuid.uuid4())[:8]
    current_date = datetime.now().strftime("%Y-%m-%d")
    context.user_data['record'] = {
        'id': record_id,
        'date': current_date,
        'user_id': user_id,
        'skip_mode': True  # —Ñ–ª–∞–≥ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤ –ª–æ–≥–∞—Ö
    }

    # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å "+" –¥–ª—è —Ç–µ–∫—É—â–µ–π
    await query.edit_message_text(
        f"‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ‘≤’°÷Å’©’∏’≤’∏÷Ç’¥\n"
        f"üÜî ID: <code>{record_id}</code>\n"
        f"üìã ‘π’•÷Ä’©’´’Ø: <b>{sheet_name}</b>\n\n"
        f"üìÖ ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’°’¥’Ω’°’©’´’æ’® (DD-MM-YYYY) ’Ø’°’¥ ’∏÷Ç’≤’°÷Ä’Ø’•÷Ñ <b>+</b>’ù ’®’∂’©’°÷Å’´’Ø ’°’¥’Ω’°’©’æ’´ ’∞’°’¥’°÷Ä:",
        parse_mode="HTML"
    )
    return DATE

async def get_date(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∞—Ç—ã"""
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return ConversationHandler.END
        
    date_input = update.message.text.strip()
    
    if date_input == '+':
        date_value = context.user_data['record']['date']
    else:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            datetime.strptime(date_input, "%d-%m-%Y")
            date_value = date_input
        except ValueError:
            await update.message.reply_text(
                "‚ùå ‘±’¥’Ω’°’©’æ’´ ’Ω’≠’°’¨ ’±÷á’°’π’°÷É: ’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ DD-MM-YYYY ’Ø’°’¥ ’∏÷Ç’≤’°÷Ä’Ø’•÷Ñ '+' ’®’∂’©’°÷Å’´’Ø ’°’¥’Ω’°’©’æ’´ ’∞’°’¥’°÷Ä:"
            )
            return DATE
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
    if date_input == '+':
        date_value = context.user_data['record']['date']
    else:
        try:
            date_obj = datetime.strptime(date_input, "%d-%m-%Y")
            date_value = date_obj.strftime("%Y-%m-%d")
        except ValueError:
            date_value = None
    if not date_value:
        await update.message.reply_text(
            "‚ùå ‘±’¥’Ω’°’©’æ’´ ’Ω’≠’°’¨ ’±÷á’°’π’°÷É: ’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ YYYY-MM-DD ’Ø’°’¥ ’∏÷Ç’≤’°÷Ä’Ø’•÷Ñ '+' ’®’∂’©’°÷Å’´’Ø ’°’¥’Ω’°’©’æ’´ ’∞’°’¥’°÷Ä:"
        )
        return DATE
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    context.user_data['record']['date'] = date_value
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    user_settings = get_user_settings(user_id)
    display_name = user_settings.get('display_name')
    
    keyboard = []
    if display_name:
        keyboard.append([InlineKeyboardButton(f"üë§ ’ï’£’ø’°’£’∏÷Ä’Æ’•’¨ ’´’¥ ’°’∂’∏÷Ç’∂’® ({display_name})", callback_data="use_my_name")])
    keyboard.append([InlineKeyboardButton(f"üè¢ ’ï’£’ø’°’£’∏÷Ä’Æ’•’¨ ’ñ’´÷Ä’¥’°’µ’´ ’°’∂’∏÷Ç’∂’®", callback_data="use_firm_name")])
    # keyboard.append([InlineKeyboardButton("‚úèÔ∏è ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’±’•’º÷Ñ’∏’æ", callback_data="manual_input")])
    
    await update.message.reply_text(
        "üè™ ‘∏’∂’ø÷Ä’•÷Ñ ’¥’°’ø’°’Ø’°÷Ä’°÷Ä’´ ’ø’•’Ω’°’Ø’®:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    
    return SUPPLIER_CHOICE

async def use_my_name(update: Update, context: CallbackContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    user_settings = get_user_settings(user_id)
    display_name = user_settings.get('display_name')
    
    if not display_name:
        await query.edit_message_text("‚ùå ’Å’•÷Ä ’°’∂’∏÷Ç’∂’® ’π’´ ’Ω’°’∞’¥’°’∂’æ’°’Æ: ’ï’£’ø’°’£’∏÷Ä’Æ’æ’•’¨’∏÷Ç ’ß ’ñ’´÷Ä’¥’°’µ’´ ’°’∂’∏÷Ç’∂’®:")
        display_name = "’ñ"
    
    context.user_data['record']['supplier'] = display_name
    
    await query.edit_message_text(
        f"‚úÖ ’Ñ’°’ø’°’Ø’°÷Ä’°÷Ä: {display_name}\n\n"
        f"üß≠ ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂’®:"
    )
    
    return DIRECTION

async def use_firm_name(update: Update, context: CallbackContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è —Ñ–∏—Ä–º—ã –∫–∞–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    context.user_data['record']['supplier'] = "’ñ"
    
    await query.edit_message_text(
        f"‚úÖ ’Ñ’°’ø’°’Ø’°÷Ä’°÷Ä: ’ñ\n\n"
        f"üß≠ ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂’®:"
    )
    
    return DIRECTION

async def manual_input(update: Update, context: CallbackContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    await query.edit_message_text("üè™ ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’¥’°’ø’°’Ø’°÷Ä’°÷Ä’´’∂:")
    
    return SUPPLIER_MANUAL

async def get_supplier_manual(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return ConversationHandler.END
    
    supplier = update.message.text.strip()
    context.user_data['record']['supplier'] = supplier
    
    await update.message.reply_text(
        f"‚úÖ ’Ñ’°’ø’°’Ø’°÷Ä’°÷Ä: {supplier}\n\n"
        f"üß≠ ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂’®:"
    )
    
    return DIRECTION

async def get_direction(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return ConversationHandler.END
    
    direction = update.message.text.strip()
    context.user_data['record']['direction'] = direction
    
    await update.message.reply_text(
        f"‚úÖ ’à÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂: {direction}\n\n"
        f"üìù ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’Æ’°’≠’Ω’´ ’∂’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’®:"
    )
    
    return DESCRIPTION

async def get_description(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return ConversationHandler.END
    
    description = update.message.text.strip()
    context.user_data['record']['description'] = description
    
    await update.message.reply_text(
        f"‚úÖ ’Ü’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂: {description}\n\n"
        f"üí∞ ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’£’∏÷Ç’¥’°÷Ä’®:"
    )
    
    return AMOUNT

async def get_amount(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—É–º–º—ã –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return ConversationHandler.END
    
    amount_input = update.message.text.strip()

    try:
        amount = float(amount_input)
        context.user_data['record']['amount'] = amount

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—É –∏ –ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_settings = get_user_settings(user_id)
        spreadsheet_id = user_settings.get('active_spreadsheet_id')
        sheet_name = user_settings.get('active_sheet_name')
        context.user_data['record']['spreadsheet_id'] = spreadsheet_id
        context.user_data['record']['sheet_name'] = sheet_name

        record = context.user_data['record']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏ Google Sheets
        db_success = add_record_to_db(record)
        sheet_success = add_record_to_sheet(spreadsheet_id, sheet_name, record)


        if record.get('skip_mode'):
            result_text = "üü° ‘≤’°÷Å’©’∏’≤’∏÷Ç’¥’® ’°’æ’•’¨’°÷Å’æ’°’Æ ’ß:\n\n"
        else:
            result_text = "‚úÖ ‘≥÷Ä’°’º’∏÷Ç’¥’∂ ’°’æ’•’¨’°÷Å’æ’°’Æ ’ß:\n\n"

        if db_success and sheet_success:
            logger.info(f"‚úÖ ’ä’°’∞’∫’°’∂’æ’°’Æ ’ß ’è‘≤-’∏÷Ç’¥ ÷á Google Sheets-’∏÷Ç’¥ ’ù ID: {record['id']}")
        elif db_success:
            logger.info(f"‚ö†Ô∏è ’ä’°’∞’∫’°’∂’æ’°’Æ ’ß ’è‘≤-’∏÷Ç’¥ ’ù ID: {record['id']}")
        elif sheet_success:
            logger.info(f"‚ö†Ô∏è ’ä’°’∞’∫’°’∂’æ’°’Æ ’ß Google Sheets-’∏÷Ç’¥ ’ù ID: {record['id']}")
        else:
            logger.error(f"‚ùå ‘≥÷Ä’°’º’∏÷Ç’¥’® ’π’´ ’∫’°’∞’∫’°’∂’æ’•’¨ ’è‘≤-’∏÷Ç’¥ ÷á Google Sheets-’∏÷Ç’¥ ’ù ID: {record['id']}")

        if db_success or sheet_success:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –æ—Ç—á–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            users_data = load_users()
            user_id_str = str(user_id)
            if user_id_str in users_data:
                if 'reports' not in users_data[user_id_str]:
                    users_data[user_id_str]['reports'] = []
                # –î–æ–±–∞–≤–ª—è–µ–º ID –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
                users_data[user_id_str]['reports'].append(record['id'])
                save_users(users_data)

        result_text += "\n" + format_record_info(record) + "\n\n"

        keyboard = [[InlineKeyboardButton("‚úèÔ∏è ‘Ω’¥’¢’°’£÷Ä’•’¨", callback_data=f"edit_record_{record['id']}")]]
        await update.message.reply_text(result_text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        user_info = {
            'id': user_id,
            'name': update.effective_user.full_name,
            'display_name': user_settings.get('display_name')
        }
        if record.get('skip_mode'):
            action = "‘≤’°÷Å’©’∏’≤’∏÷Ç’¥"
        else:
            action = "‘±’æ’•’¨’°÷Å’∏÷Ç’¥"
        await send_report(context, action, record, user_info)
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text("‚ùå ‘≥’∏÷Ç’¥’°÷Ä’´ ’Ω’≠’°’¨ ’±÷á’°’π’°÷É: ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’©’´’æ (÷Ö÷Ä’´’∂’°’Ø’ù 1000.50):")
        return AMOUNT

async def cancel_add_record(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return ConversationHandler.END
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–Ω–æ–ø–∫—É, —Ç–∞–∫ –∏ –∫–æ–º–∞–Ω–¥—É
    if update.callback_query:
        # –ï—Å–ª–∏ —ç—Ç–æ callback –æ—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if update.callback_query.data and update.callback_query.data.startswith("cancel_edit_"):
            record_id = update.callback_query.data.replace("cancel_edit_", "")
            keyboard = [[InlineKeyboardButton("‚úèÔ∏è ‘Ω’¥’¢’°’£÷Ä’•’¨", callback_data=f"edit_record_{record_id}")]]
            await update.callback_query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await update.callback_query.edit_message_text(
                "‚ùå ‘≥÷Ä’°’º’¥’°’∂ ’°’æ’•’¨’°÷Å’¥’°’∂ ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’® ’π’•’≤’°÷Ä’Ø’æ’°’Æ ’ß:",
                reply_markup=create_main_menu(user_id)
            )
    else:
        await update.message.reply_text(
            "‚ùå ‘≥÷Ä’°’º’¥’°’∂ ’°’æ’•’¨’°÷Å’¥’°’∂ ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’® ’π’•’≤’°÷Ä’Ø’æ’°’Æ ’ß:",
            reply_markup=create_main_menu(user_id)
        )
    
    context.user_data.clear()
    return ConversationHandler.END

async def cancel(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return ConversationHandler.END
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–Ω–æ–ø–∫—É, —Ç–∞–∫ –∏ –∫–æ–º–∞–Ω–¥—É
    if update.callback_query:
        # –ï—Å–ª–∏ —ç—Ç–æ callback –æ—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if update.callback_query.data and update.callback_query.data.startswith("cancel_edit_"):
            record_id = update.callback_query.data.replace("cancel_edit_", "")
            keyboard = [[InlineKeyboardButton("‚úèÔ∏è ‘Ω’¥’¢’°’£÷Ä’•’¨", callback_data=f"edit_record_{record_id}")]]
            await update.callback_query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await update.callback_query.edit_message_text(
                "‚ùå ‘≥’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’® ’π’•’≤’°÷Ä’Ø’æ’°’Æ ’ß:",
                reply_markup=create_main_menu(user_id)
            )
    else:
        await update.message.reply_text(
            "‚ùå ‘≥’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’® ’π’•’≤’°÷Ä’Ø’æ’°’Æ ’ß:",
            reply_markup=create_main_menu(user_id)
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if context.user_data:
        context.user_data.clear()
    
    return ConversationHandler.END

async def start_record_conversation(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    logger.info(f"start_record_conversation –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if not is_user_allowed(user_id):
        await query.edit_message_text("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω:")
        return ConversationHandler.END
    
    await query.answer()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from .button_handlers import show_sheet_selection_for_add_record
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ª–∏—Å—Ç–∞
    await show_sheet_selection_for_add_record(update, context, "record")
    
    # –û—Å—Ç–∞–µ–º—Å—è –≤ –∫–æ–Ωversation, –æ–∂–∏–¥–∞—è –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞
    return ConversationHandler.END  # –ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, –º—ã –¥–æ–ª–∂–Ω—ã –∂–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ callback'–∞

async def start_record_selection(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –≤—ã–±–æ—Ä –ª–∏—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ ConversationHandler"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    logger.info(f"start_record_selection –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if not is_user_allowed(user_id):
        await query.edit_message_text("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω:")
        return ConversationHandler.END
    
    await query.answer()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from .button_handlers import show_sheet_selection_for_add_record
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ª–∏—Å—Ç–∞
    await show_sheet_selection_for_add_record(update, context, "record")
    
    # –û—Å—Ç–∞–µ–º—Å—è –≤ ConversationHandler, –æ–∂–∏–¥–∞—è –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ entry points
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞
    from ..states.conversation_states import SHEET_SELECTION
    return SHEET_SELECTION

async def start_skip_record_selection(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –≤—ã–±–æ—Ä –ª–∏—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É–ø—É—â–µ–Ω–∏—è –≤ ConversationHandler"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    logger.info(f"start_skip_record_selection –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    if not is_user_allowed(user_id):
        await query.edit_message_text("‚ùå –í–∞—à –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω:")
        return ConversationHandler.END
    
    await query.answer()
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    from .button_handlers import show_sheet_selection_for_add_record
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ª–∏—Å—Ç–∞ –¥–ª—è —É–ø—É—â–µ–Ω–∏–π
    await show_sheet_selection_for_add_record(update, context, "skip")
    
    # –û—Å—Ç–∞–µ–º—Å—è –≤ ConversationHandler, –æ–∂–∏–¥–∞—è –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞ —á–µ—Ä–µ–∑ entry points
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞
    from ..states.conversation_states import SHEET_SELECTION
    return SHEET_SELECTION
