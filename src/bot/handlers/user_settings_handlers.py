"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler

from ...config.settings import ADMIN_IDS
from ...utils.config_utils import load_users, save_users, get_user_settings, update_user_settings
from ..states.conversation_states import SET_USER_LIMIT, SET_USER_CATEGORY

logger = logging.getLogger(__name__)

async def user_settings_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    users = load_users()
    keyboard = []
    
    for uid, udata in users.items():
        if udata.get('display_name'):
            keyboard.append([InlineKeyboardButton(
                f"‚öôÔ∏è {udata['display_name']}", 
                callback_data=f"user_settings_{uid}"
            )])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    
    await query.edit_message_text(
        "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_user_settings(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    target_user_id = query.data.replace("user_settings_", "")
    users = load_users()
    user_data = users.get(target_user_id, {})
    
    display_name = user_data.get('display_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    daily_limit = user_data.get('daily_limit', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    category = user_data.get('category', '–û–±—ã—á–Ω—ã–π')
    notifications = user_data.get('notifications', True)
    
    settings_text = (
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"üë§ –ò–º—è: {display_name}\n"
        f"üí∞ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {daily_limit}\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
        f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {'–í–∫–ª' if notifications else '–í—ã–∫–ª'}\n"
    )
    
    keyboard = [
        [InlineKeyboardButton("üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç", callback_data=f"set_limit_{target_user_id}")],
        [InlineKeyboardButton("üìÇ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data=f"set_category_{target_user_id}")],
        [InlineKeyboardButton("üîî –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f"toggle_notifications_{target_user_id}")],
        [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_user_{target_user_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="user_settings_menu")]
    ]
    
    await query.edit_message_text(
        settings_text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def set_daily_limit(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    target_user_id = query.data.replace("set_limit_", "")
    context.user_data['target_user_id'] = target_user_id
    
    await query.edit_message_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ (–≤ –¥—Ä–∞–º–∞—Ö):",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="user_settings_menu")]
        ])
    )
    
    return SET_USER_LIMIT

async def process_daily_limit(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç"""
    try:
        limit = float(update.message.text.strip())
        target_user_id = context.user_data.get('target_user_id')
        
        if limit <= 0:
            await update.message.reply_text("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return SET_USER_LIMIT
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users = load_users()
        if target_user_id in users:
            users[target_user_id]['daily_limit'] = limit
            save_users(users)
            
            await update.message.reply_text(
                f"‚úÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {limit:,.2f} ’§÷Ä’°’¥",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="user_settings_menu")]
                ])
            )
        else:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")
        return SET_USER_LIMIT

async def toggle_notifications(update: Update, context: CallbackContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    target_user_id = query.data.replace("toggle_notifications_", "")
    users = load_users()
    
    if target_user_id in users:
        current_status = users[target_user_id].get('notifications', True)
        users[target_user_id]['notifications'] = not current_status
        save_users(users)
        
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if not current_status else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        await query.answer(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status_text}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await show_user_settings(update, context)
    else:
        await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

async def create_user_backup(update: Update, context: CallbackContext):
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    try:
        users = load_users()
        
        # –°–æ–∑–¥–∞–µ–º JSON —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        import json
        from datetime import datetime
        
        backup_data = {
            'timestamp': datetime.now().isoformat(),
            'users': users
        }
        
        backup_json = json.dumps(backup_data, indent=2, ensure_ascii=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
        from io import BytesIO
        buffer = BytesIO(backup_json.encode('utf-8'))
        buffer.name = f"users_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        await query.message.reply_document(
            document=buffer,
            caption="üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞")
