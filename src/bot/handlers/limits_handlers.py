"""
–°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
"""
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext

from ...config.settings import ADMIN_IDS
from ...utils.config_utils import load_users, get_user_settings
from ...database.database_manager import get_all_records

logger = logging.getLogger(__name__)

async def check_daily_limit(user_id: int, amount: float) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    try:
        users = load_users()
        user_data = users.get(str(user_id), {})
        daily_limit = user_data.get('daily_limit')
        
        if not daily_limit:
            return True, ""
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.now().date()
        display_name = user_data.get('display_name')
        
        if not display_name:
            return True, ""
        
        records = get_all_records()
        today_expenses = 0
        
        for record in records:
            if record['supplier'] == display_name and record['amount'] > 0:
                try:
                    record_date = datetime.strptime(record['date'], '%d.%m.%y').date()
                    if record_date == today:
                        today_expenses += record['amount']
                except ValueError:
                    continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if today_expenses + amount > daily_limit:
            remaining = daily_limit - today_expenses
            message = (
                f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç!\n"
                f"üí∞ –õ–∏–º–∏—Ç: {daily_limit:,.2f} ’§÷Ä’°’¥\n"
                f"üìä –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {today_expenses:,.2f} ’§÷Ä’°’¥\n"
                f"üí∏ –û—Å—Ç–∞—Ç–æ–∫: {remaining:,.2f} ’§÷Ä’°’¥\n"
                f"‚ùå –ü—ã—Ç–∞–µ—Ç–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å: {amount:,.2f} ’§÷Ä’°’¥"
            )
            return False, message
        
        return True, ""
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞: {e}")
        return True, ""

async def get_spending_summary(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        users = load_users()
        user_data = users.get(str(user_id), {})
        display_name = user_data.get('display_name')
        daily_limit = user_data.get('daily_limit')
        
        if not display_name:
            return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        
        records = get_all_records()
        today = datetime.now().date()
        week_ago = today - timedelta(days=7)
        month_ago = today - timedelta(days=30)
        
        today_expenses = 0
        week_expenses = 0
        month_expenses = 0
        
        for record in records:
            if record['supplier'] == display_name and record['amount'] > 0:
                try:
                    record_date = datetime.strptime(record['date'], '%d.%m.%y').date()
                    
                    if record_date == today:
                        today_expenses += record['amount']
                    
                    if record_date >= week_ago:
                        week_expenses += record['amount']
                    
                    if record_date >= month_ago:
                        month_expenses += record['amount']
                        
                except ValueError:
                    continue
        
        summary = f"üìä <b>–°–≤–æ–¥–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤</b>\n\n"
        summary += f"üìÖ –°–µ–≥–æ–¥–Ω—è: {today_expenses:,.2f} ’§÷Ä’°’¥\n"
        
        if daily_limit:
            remaining = daily_limit - today_expenses
            summary += f"üí∞ –õ–∏–º–∏—Ç: {daily_limit:,.2f} ’§÷Ä’°’¥\n"
            summary += f"üí∏ –û—Å—Ç–∞—Ç–æ–∫: {remaining:,.2f} ’§÷Ä’°’¥\n"
            
            if remaining < 0:
                summary += f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {abs(remaining):,.2f} ’§÷Ä’°’¥\n"
        
        summary += f"\nüìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: {week_expenses:,.2f} ’§÷Ä’°’¥\n"
        summary += f"üìÖ –ó–∞ –º–µ—Å—è—Ü: {month_expenses:,.2f} ’§÷Ä’°’¥\n"
        
        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        avg_daily = month_expenses / 30
        avg_weekly = week_expenses / 7
        
        summary += f"\nüìä –°—Ä–µ–¥–Ω–µ–µ –≤ –¥–µ–Ω—å: {avg_daily:,.2f} ’§÷Ä’°’¥\n"
        summary += f"üìä –°—Ä–µ–¥–Ω–µ–µ –≤ –Ω–µ–¥–µ–ª—é: {avg_weekly:,.2f} ’§÷Ä’°’¥"
        
        return summary
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–∫–∏"

async def show_spending_summary(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    summary = await get_spending_summary(user_id)
    
    await query.edit_message_text(
        summary,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="spending_summary")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
    )

async def check_weekly_limits(context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        users = load_users()
        
        for user_id, user_data in users.items():
            display_name = user_data.get('display_name')
            weekly_limit = user_data.get('weekly_limit')
            
            if not display_name or not weekly_limit:
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é
            week_ago = datetime.now().date() - timedelta(days=7)
            records = get_all_records()
            week_expenses = 0
            
            for record in records:
                if record['supplier'] == display_name and record['amount'] > 0:
                    try:
                        record_date = datetime.strptime(record['date'], '%d.%m.%y').date()
                        if record_date >= week_ago:
                            week_expenses += record['amount']
                    except ValueError:
                        continue
            
            # –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç - —É–≤–µ–¥–æ–º–ª—è–µ–º
            if week_expenses > weekly_limit:
                await notify_limit_exceeded(context, user_id, display_name, week_expenses, weekly_limit, "–Ω–µ–¥–µ–ª—å–Ω—ã–π")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–¥–µ–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤: {e}")

async def notify_limit_exceeded(context: CallbackContext, user_id: str, display_name: str, 
                               spent: float, limit: float, period: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞"""
    try:
        excess = spent - limit
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id.isdigit():
            user_message = (
                f"‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω {period} –ª–∏–º–∏—Ç!</b>\n\n"
                f"üí∞ –õ–∏–º–∏—Ç: {limit:,.2f} ’§÷Ä’°’¥\n"
                f"üìä –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent:,.2f} ’§÷Ä’°’¥\n"
                f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {excess:,.2f} ’§÷Ä’°’¥\n\n"
                f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã."
            )
            
            await context.bot.send_message(
                chat_id=int(user_id),
                text=user_message,
                parse_mode="HTML"
            )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        admin_message = (
            f"‚ö†Ô∏è <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {display_name}\n"
            f"üìÖ –ü–µ—Ä–∏–æ–¥: {period}\n"
            f"üí∞ –õ–∏–º–∏—Ç: {limit:,.2f} ’§÷Ä’°’¥\n"
            f"üìä –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {spent:,.2f} ’§÷Ä’°’¥\n"
            f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ: {excess:,.2f} ’§÷Ä’°’¥"
        )
        
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=admin_message,
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞: {e}")

async def create_budget_report(update: Update, context: CallbackContext):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –±—é–¥–∂–µ—Ç—É"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    try:
        users = load_users()
        budget_data = []
        
        for uid, user_data in users.items():
            display_name = user_data.get('display_name')
            daily_limit = user_data.get('daily_limit')
            weekly_limit = user_data.get('weekly_limit')
            
            if not display_name:
                continue
            
            # –†–∞—Å—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤
            today = datetime.now().date()
            week_ago = today - timedelta(days=7)
            
            records = get_all_records()
            today_expenses = 0
            week_expenses = 0
            
            for record in records:
                if record['supplier'] == display_name and record['amount'] > 0:
                    try:
                        record_date = datetime.strptime(record['date'], '%d.%m.%y').date()
                        
                        if record_date == today:
                            today_expenses += record['amount']
                        
                        if record_date >= week_ago:
                            week_expenses += record['amount']
                            
                    except ValueError:
                        continue
            
            budget_data.append({
                'name': display_name,
                'daily_limit': daily_limit,
                'weekly_limit': weekly_limit,
                'today_expenses': today_expenses,
                'week_expenses': week_expenses,
                'daily_remaining': (daily_limit - today_expenses) if daily_limit else None,
                'weekly_remaining': (weekly_limit - week_expenses) if weekly_limit else None
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_text = "üí∞ <b>–û—Ç—á–µ—Ç –ø–æ –±—é–¥–∂–µ—Ç—É</b>\n\n"
        
        for data in budget_data:
            report_text += f"üë§ <b>{data['name']}</b>\n"
            
            if data['daily_limit']:
                remaining = data['daily_remaining']
                emoji = "‚úÖ" if remaining >= 0 else "‚ùå"
                report_text += f"üìÖ –î–Ω–µ–≤–Ω–æ–π: {data['today_expenses']:,.0f} / {data['daily_limit']:,.0f} {emoji}\n"
            
            if data['weekly_limit']:
                remaining = data['weekly_remaining']
                emoji = "‚úÖ" if remaining >= 0 else "‚ùå"
                report_text += f"üìÖ –ù–µ–¥–µ–ª—å–Ω—ã–π: {data['week_expenses']:,.0f} / {data['weekly_limit']:,.0f} {emoji}\n"
            
            report_text += "\n"
        
        await query.edit_message_text(
            report_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="budget_report")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –±—é–¥–∂–µ—Ç—É: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )
