"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
import json
import os
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import CallbackContext

from ...config.settings import ADMIN_IDS
from telegram.constants import ChatAction
from ...utils.date_utils import safe_parse_date_or_none
from ...utils.config_utils import (
    is_user_allowed, load_users, save_users, 
    load_allowed_users, add_allowed_user, remove_allowed_user,
    set_log_chat, set_report_settings, send_to_log_chat
)
from ...database.database_manager import backup_db_to_dict, get_record_from_db, add_record_to_db
from ...google_integration.sheets_manager import get_all_spreadsheets, get_worksheets_info, open_sheet_by_id
from ..keyboards.inline_keyboards import create_main_menu
from .edit_handlers import get_user_id_by_name

logger = logging.getLogger(__name__)

async def send_data_files_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ data –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return

    data_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..', 'data'))
    if not os.path.exists(data_dir):
        await update.message.reply_text("‚ùå –ü–∞–ø–∫–∞ data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return

    files = [f for f in os.listdir(data_dir) if os.path.isfile(os.path.join(data_dir, f))]
    if not files:
        await update.message.reply_text("‚ÑπÔ∏è –í –ø–∞–ø–∫–µ data –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        return

    await update.message.reply_text(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é {len(files)} —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ data...")
    for fname in files:
        fpath = os.path.join(data_dir, fname)
        try:
            await context.bot.send_chat_action(chat_id=user_id, action=ChatAction.UPLOAD_DOCUMENT)
            with open(fpath, 'rb') as f:
                await context.bot.send_document(chat_id=user_id, document=f, filename=fname)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {fname}: {e}")
    await update.message.reply_text("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

async def set_log_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ª–æ–≥-—á–∞—Ç–∞"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    chat_id = update.effective_chat.id
    set_log_chat(chat_id)
    
    await update.message.reply_text(
        f"‚úÖ ‘≥÷Ä’°’∂÷Å’°’¥’°’ø’µ’°’∂’´ ’¶÷Ä’∏÷Ç’µ÷Å’® ’Ω’°’∞’¥’°’∂’æ’°’Æ ’ß:\n"
        f"Chat ID: <code>{chat_id}</code>\n"
        f"‘≤’∏’¨’∏÷Ä ’£÷Ä’°’∂÷Å’∏÷Ç’¥’∂’•÷Ä’® ’Ø’∏÷Ç’≤’°÷Ä’Ø’æ’•’∂ ’°’µ’Ω ’¶÷Ä’∏÷Ç’µ÷Å:",
        parse_mode="HTML"
    )
    await send_to_log_chat(context, f"‘≥÷Ä’°’∂÷Å’°’¥’°’ø’µ’°’∂’´ ’¶÷Ä’∏÷Ç’µ÷Å’® ’°’Ø’ø’´’æ’°÷Å’æ’°’Æ ’ß: Chat ID: {chat_id}")

async def set_report_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –≤ —á–∞—Ç–µ"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    chat_id = update.effective_chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            "üìä ’â’°’ø’∏÷Ç’¥ ’∞’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä ’Ω’°’∞’¥’°’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ÷Ö’£’ø’°’£’∏÷Ä’Æ’•÷Ñ:\n"
            "<code>/set_report SPREADSHEET_ID SHEET_NAME</code>\n\n"
            "’ï÷Ä’´’∂’°’Ø’ù /set_report abc12345 ’â’°’ø’´ ’∞’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂",
            parse_mode="HTML"
        )
        return
    
    spreadsheet_id = args[0].strip()
    sheet_name = ' '.join(args[1:]).strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã
    try:
        sheets_info, spreadsheet_title = get_worksheets_info(spreadsheet_id)
        if not sheets_info:
            await update.message.reply_text("‚ùå ’Ä’∂’°÷Ä’°’æ’∏÷Ä ’π’ß ’¥’∏÷Ç’ø÷Ñ ’£’∏÷Ä’Æ’•’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø: ’ç’ø’∏÷Ç’£’•÷Ñ ID-’∂ ÷á ’¥’∏÷Ç’ø÷Ñ’´ ’´÷Ä’°’æ’∏÷Ç’∂÷Ñ’∂’•÷Ä’®:")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ª–∏—Å—Ç
        sheet_exists = any(sheet['title'] == sheet_name for sheet in sheets_info)
        if not sheet_exists:
            await update.message.reply_text(
                f"‚ùå ‘π’•÷Ä’©’´’Ø '{sheet_name}' ’π’´ ’£’ø’∂’æ’•’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø’∏÷Ç’¥:",
                parse_mode="HTML"
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        set_report_settings(chat_id, {
            'spreadsheet_id': spreadsheet_id,
            'sheet_name': sheet_name,
            'spreadsheet_title': spreadsheet_title
        })
        
        await update.message.reply_text(
            f"‚úÖ ’â’°’ø’´ ’∞’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’® ’¥’´’°÷Å’æ’°’Æ ’•’∂:\n"
            f"üìä ‘±’≤’µ’∏÷Ç’Ω’°’Ø: <b>{spreadsheet_title}</b>\n"
            f"üìã ‘π’•÷Ä’©’´’Ø: <b>{sheet_name}</b>\n\n"
            f"‘±’µ’™’¥ ’¢’∏’¨’∏÷Ä ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’® ’Ø’£÷Ä’°’∂÷Å’æ’•’∂ ’°’µ’Ω ’©’•÷Ä’©’´’Ø’∏÷Ç’¥:",
            parse_mode="HTML"
        )
        
        await send_to_log_chat(context, f"’Ñ’´’°÷Å’æ’°’Æ ’ß ’∞’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä ’π’°’ø’´ ’∞’°’¥’°÷Ä: {spreadsheet_title} > {sheet_name}")
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå ’ç’≠’°’¨ ’∞’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä ’¥’´’°÷Å’∂’•’¨’´’Ω:\n<code>{str(e)}</code>",
            parse_mode="HTML"
        )

async def allow_user_command(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    args = context.args
    if not args:
        await update.message.reply_text(
            "üë• ’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤’´’∂ ’©’∏÷Ç’µ’¨’°’ø÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ÷Ö’£’ø’°’£’∏÷Ä’Æ’•÷Ñ:\n"
            "<code>/allow_user [user_id]</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        new_user_id = int(args[0])
        add_allowed_user(new_user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ users.json –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        users = load_users()
        user_id_str = str(new_user_id)
        if user_id_str not in users:
            users[user_id_str] = {
                'active_spreadsheet_id': None,
                'active_sheet_name': None,
                'name': f'User {new_user_id}',
                'display_name': None
            }
            save_users(users)
        
        await update.message.reply_text(
            f"‚úÖ ’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤ {new_user_id} ’°’æ’•’¨’°÷Å’æ’°’Æ ’ß ’©’∏÷Ç’µ’¨’°’ø÷Ä’æ’°’Æ ÷Å’°’∂’Ø’∏÷Ç’¥:",
            parse_mode="HTML"
        )
        
        await send_to_log_chat(context, f"‘±’æ’•’¨’°÷Å’æ’°’Æ ’ß ’∂’∏÷Ä ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏’≤: {new_user_id}")
        
    except ValueError:
        await update.message.reply_text("‚ùå ’ç’≠’°’¨ ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏’≤’´ ID ’±÷á’°’π’°÷É:")

async def disallow_user_command(update: Update, context: CallbackContext):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    args = context.args
    if not args:
        await update.message.reply_text(
            "üë• ’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤’´’∂ ’°÷Ä’£’•’¨’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ÷Ö’£’ø’°’£’∏÷Ä’Æ’•÷Ñ:\n"
            "<code>/disallow_user [user_id]</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        target_user_id = int(args[0])
        
        # –ù–µ –¥–∞–µ–º —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤
        if target_user_id in ADMIN_IDS:
            await update.message.reply_text("‚ùå ’Ä’∂’°÷Ä’°’æ’∏÷Ä ’π’ß ’°÷Ä’£’•’¨’•’¨ ’°’§’¥’´’∂’´’Ω’ø÷Ä’°’ø’∏÷Ä’´’∂:")
            return
        
        if remove_allowed_user(target_user_id):
            await update.message.reply_text(
                f"‚úÖ ’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤ {target_user_id} ’∞’•’º’°÷Å’æ’°’Æ ’ß ’©’∏÷Ç’µ’¨’°’ø÷Ä’æ’°’Æ ÷Å’°’∂’Ø’´÷Å:",
                parse_mode="HTML"
            )
            await send_to_log_chat(context, f"’Ä’•’º’°÷Å’æ’°’Æ ’ß ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏’≤: {target_user_id}")
        else:
            await update.message.reply_text(
                f"‚ö†Ô∏è ’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤ {target_user_id} ’π’´ ’£’ø’∂’æ’•’¨ ’©’∏÷Ç’µ’¨’°’ø÷Ä’æ’°’Æ ÷Å’°’∂’Ø’∏÷Ç’¥:",
                parse_mode="HTML"
            )
        
    except ValueError:
        await update.message.reply_text("‚ùå ’ç’≠’°’¨ ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏’≤’´ ID ’±÷á’°’π’°÷É:")

async def allowed_users_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    try:
        allowed_users = load_allowed_users()
        users = load_users()
        
        if not allowed_users:
            await update.message.reply_text("üìù ‘π’∏÷Ç’µ’¨’°’ø÷Ä’æ’°’Æ ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏’≤’∂’•÷Ä ’π’Ø’°’∂:")
            return
        
        result_text = f"üë• ‘π’∏÷Ç’µ’¨’°’ø÷Ä’æ’°’Æ ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏’≤’∂’•÷Ä ({len(allowed_users)}):\n\n"
        
        for i, uid in enumerate(allowed_users, 1):
            user_info = users.get(str(uid), {})
            name = user_info.get('name', f'User {uid}')
            display_name = user_info.get('display_name')
            
            result_text += f"{i}. <code>{uid}</code> - {name}"
            if display_name:
                result_text += f" ({display_name})"
            if uid in ADMIN_IDS:
                result_text += " üë®‚Äçüíº"
            result_text += "\n"
        
        await update.message.reply_text(result_text, parse_mode="HTML")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå ’ë’°’∂’Ø’® ’Ω’ø’°’∂’°’¨’∏÷Ç ’Ω’≠’°’¨: {e}")

async def set_user_name_command(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            "üë§ ’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤’´ ’°’∂’∏÷Ç’∂ ’Ω’°’∞’¥’°’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ÷Ö’£’ø’°’£’∏÷Ä’Æ’•÷Ñ:\n"
            "<code>/set_user_name [user_id] [display_name]</code>\n\n"
            "’ï÷Ä’´’∂’°’Ø: <code>/set_user_name 123456789 ‘±÷Ä’°’¥</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        target_user_id = int(args[0])
        display_name = ' '.join(args[1:]).strip()
        
        users = load_users()
        user_id_str = str(target_user_id)
        
        if user_id_str not in users:
            users[user_id_str] = {
                'active_spreadsheet_id': None,
                'active_sheet_name': None,
                'name': f'User {target_user_id}',
                'display_name': display_name
            }
        else:
            users[user_id_str]['display_name'] = display_name
        
        save_users(users)
        
        await update.message.reply_text(
            f"‚úÖ ’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤ {target_user_id}-’´ ’°’∂’∏÷Ç’∂’® ’Ω’°’∞’¥’°’∂’æ’°’Æ ’ß:\n"
            f"<b>{display_name}</b>",
            parse_mode="HTML"
        )
        
        await send_to_log_chat(context, f"’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤’´ ’°’∂’∏÷Ç’∂ ’Ω’°’∞’¥’°’∂’æ’°’Æ ’ß: {target_user_id} -> {display_name}")
        
    except ValueError:
        await update.message.reply_text("‚ùå ’ç’≠’°’¨ ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏’≤’´ ID ’±÷á’°’π’°÷É:")

async def export_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    try:
        backup_data = backup_db_to_dict()
        
        if not backup_data:
            await update.message.reply_text("‚ùå ’ä’°’∞’∏÷Ç’Ω’ø’°’µ’´’∂ ’∫’°’ø’≥’•’∂’´ ’Ω’ø’•’≤’Æ’¥’°’∂ ’Ω’≠’°’¨:")
            return
        
        # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
        filename = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(backup_data, f, indent=2, ensure_ascii=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(filename, 'rb') as f:
            await update.message.reply_document(
                document=f,
                filename=filename,
                caption=f"üì§ ’è’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’¶’°’µ’´ ’∫’°’∞’∏÷Ç’Ω’ø’°’µ’´’∂ ’∫’°’ø’≥’•’∂\n"
                       f"üìä ‘≥÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä: {backup_data['stats']['total_records']}\n"
                       f"üí∞ ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’£’∏÷Ç’¥’°÷Ä: {backup_data['stats']['total_amount']:,.2f}\n"
                       f"üìÖ ’ç’ø’•’≤’Æ’¥’°’∂ ’°’¥’Ω’°’©’´’æ: {backup_data['backup_date']}"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filename)
        
        await send_to_log_chat(context, f"’ç’ø’•’≤’Æ’æ’•’¨ ’ß ’∫’°’∞’∏÷Ç’Ω’ø’°’µ’´’∂ ’∫’°’ø’≥’•’∂: {backup_data['stats']['total_records']} ’£÷Ä’°’º’∏÷Ç’¥")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå ‘±÷Ä’ø’°’∞’°’∂’¥’°’∂ ’Ω’≠’°’¨: {e}")

async def sync_sheets_command(update: Update, context: CallbackContext):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –≤ –ë–î"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return

    from ...utils.config_utils import get_user_settings
    from ...google_integration.sheets_manager import get_worksheet_by_name
    from ...database.database_manager import add_record_to_db, get_record_from_db
    
    user_settings = get_user_settings(user_id)
    spreadsheet_id = user_settings.get('active_spreadsheet_id')
    sheet_name = user_settings.get('active_sheet_name')
    
    if not spreadsheet_id or not sheet_name:
        await update.message.reply_text("‚ùå ’Ü’°’≠ ’∫’•’ø÷Ñ ’ß ’®’∂’ø÷Ä’•’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø ÷á ’©’•÷Ä’©’´’Ø:")
        return

    try:
        worksheet = get_worksheet_by_name(spreadsheet_id, sheet_name)
        if not worksheet:
            await update.message.reply_text("‚ùå ’â’∞’°’ª’∏’≤’æ’•÷Å ’¢’°÷Å’•’¨ ’©’•÷Ä’©’´’Ø’®:")
            return

        rows = worksheet.get_all_records()
        added, updated = 0, 0
        
        for row in rows:
            # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Ñ–æ—Ä–º–∞—Ç—É –±–æ—Ç–∞
            record_id = str(row.get('ID', '')).strip()
            if not record_id:
                continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ ID

            # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –¥–∞—Ç—ã –∫ YYYY-MM-DD
            raw_date = str(row.get('’°’¥’Ω’°’©’´’æ', '')).replace("‚Ä§", ".").strip()
            try:
                parsed_date = safe_parse_date_or_none(raw_date)
                if parsed_date:
                    date_fmt = parsed_date.strftime("%Y-%m-%d")
                else:
                    date_fmt = raw_date
            except Exception:
                date_fmt = raw_date

            # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Å—É–º–º—ã –∫ float
            try:
                amount = float(str(row.get('‘±÷Ä’™’•÷Ñ', '0')).replace(',', '.').replace(' ', ''))
            except Exception:
                amount = 0.0

            record = {
                'id': record_id,
                'date': date_fmt,
                'supplier': str(row.get('’¥’°’ø’°’Ø’°÷Ä’°÷Ä', '')).strip(),
                'direction': str(row.get('’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂', '')).strip(),
                'description': str(row.get('’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä', '')).strip(),
                'amount': amount,
                'spreadsheet_id': spreadsheet_id,
                'sheet_name': sheet_name
            }

            db_record = get_record_from_db(record_id)
            if not db_record:
                if add_record_to_db(record):
                    added += 1
            else:
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ
                updated += 1
        
        await update.message.reply_text(
            f"‚úÖ ’ç’´’∂’≠÷Ä’∏’∂’´’¶’°÷Å’´’° ’°’æ’°÷Ä’ø’æ’°’Æ ’ß:\n"
            f"‘±’æ’•’¨’°÷Å’æ’°’Æ ’ß {added} ’∂’∏÷Ä ’£÷Ä’°’º’∏÷Ç’¥, {updated} ’°÷Ä’§’•’∂ ’Ø’°÷Ä:",
            parse_mode="HTML"
        )
        
        await send_to_log_chat(context, f"Google Sheets ’∞’°’¥’°’™’°’¥’•÷Å’∏÷Ç’¥: +{added} ’∂’∏÷Ä, {updated} ’°’µ’¨")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå ’ç’´’∂’≠÷Ä’∏’∂’´’¶’°÷Å’´’°’µ’´ ’Ω’≠’°’¨: {e}")


def initialize_and_sync_sheets():
    import uuid
    import logging

    logger = logging.getLogger(__name__)
    headers = ['ID', '’°’¥’Ω’°’©’´’æ', '’¥’°’ø’°’Ø’°÷Ä’°÷Ä', '’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂', '’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä', '‘±÷Ä’™’•÷Ñ']
    spreadsheets = get_all_spreadsheets()

    for spreadsheet in spreadsheets:
        spreadsheet_id = spreadsheet['id']
        spreadsheet_name = spreadsheet['name']
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: {spreadsheet_name} ({spreadsheet_id})")

        sheet = open_sheet_by_id(spreadsheet_id)
        if not sheet:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É: {spreadsheet_name}")
            continue

        for worksheet in sheet.worksheets():
            sheet_name = worksheet.title
            logger.info(f"  üìã –õ–∏—Å—Ç: {sheet_name}")

            try:
                rows = worksheet.get_all_records()
                new_rows = []
                last_valid_date = None
                for row in rows:
                    if all(not str(value).strip() for value in row.values()):
                        continue

                    row_id = str(row.get('ID', '')).strip()
                    if not row_id:
                        row_id = "cb-" + str(uuid.uuid4())[:8]

                    # üóì –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
                    raw_date = str(row.get('’°’¥’Ω’°’©’´’æ', '')).strip()
                    if raw_date:
                        normalized_date = raw_date.replace("‚Ä§", ".").strip()
                        last_valid_date = normalized_date
                    elif last_valid_date:
                        normalized_date = last_valid_date
                    else:
                        normalized_date = ""

                    # üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã
                    raw_amount = str(row.get('‘±÷Ä’™’•÷Ñ', '0'))
                    cleaned_amount = (
                        raw_amount.replace('\xa0', '')
                                  .replace('\u202f', '')
                                  .replace(' ', '')
                                  .replace(',', '.')
                                  .strip()
                    )

                    # –ï—Å–ª–∏ cleaned_amount –ø—É—Å—Ç, —Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º 0.0
                    if not cleaned_amount:
                        amount = 0.0
                        logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ —Å—É–º–º—ã –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row}")
                    else:
                        try:
                            amount = float(cleaned_amount)
                        except ValueError:
                            amount = 0.0
                            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—É–º–º—É '{raw_amount}' ‚Üí 0.0")

                    # üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
                    user_id = get_user_id_by_name(row.get('’¥’°’ø’°’Ø’°÷Ä’°÷Ä', ''))
                    record = {
                        'id': row_id,
                        'date': normalized_date,
                        'supplier': str(row.get('’¥’°’ø’°’Ø’°÷Ä’°÷Ä', '')).strip(),
                        'direction': str(row.get('’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂', '')).strip(),
                        'description': str(row.get('’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä', '')).strip(),
                        'amount': amount,
                        'spreadsheet_id': spreadsheet_id,
                        'sheet_name': sheet_name,
                        'user_id': user_id if user_id != 0 else None
                    }

                    if not get_record_from_db(row_id):
                        success = add_record_to_db(record)
                        if success:
                            logger.info(f"    ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ë–î: {row_id}")
                        else:
                            logger.warning(f"    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ë–î: {row_id}")
                    new_rows.append([
                        row_id,
                        normalized_date,
                        record['supplier'],
                        record['direction'],
                        record['description'],
                        amount
                    ])

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
                all_data = [headers] + new_rows
                worksheet.clear()
                worksheet.update(f"A1:F{len(all_data)}", all_data)

                logger.info(f"    ‚úÖ –õ–∏—Å—Ç {sheet_name} –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω ({len(new_rows)} —Å—Ç—Ä–æ–∫)")

            except Exception as e:
                logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏—Å—Ç–∞ {sheet_name}: {e}")



async def initialize_sheets_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö Google Sheets ‚Äî ’¥’´’°’µ’∂ ’°’§’¥’´’∂’∂’•÷Ä’´ ’∞’°’¥’°÷Ä"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return

    try:
        initialize_and_sync_sheets()
        await update.message.reply_text("‚úÖ ‘≤’∏’¨’∏÷Ä ’°’≤’µ’∏÷Ç’Ω’°’Ø’∂’•÷Ä’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’¥’∑’°’Ø’æ’°’Æ ’•’∂, ID-’∂’•÷Ä’® ’°’æ’•’¨’°÷Å’æ’°’Æ ’•’∂ ÷á ’¢’°’¶’°’∂ ’∞’°’¥’°’™’°’¥’°÷Å’æ’°’Æ ’ß:")
        await send_to_log_chat(context, "‚úÖ ‘ø’°’ø’°÷Ä’æ’•’¨ ’ß /initialize_sheets ’∞÷Ä’°’¥’°’∂’® - ’¢’∏’¨’∏÷Ä ’°’≤’µ’∏÷Ç’Ω’°’Ø’∂’•÷Ä’® ’©’°÷Ä’¥’°÷Å’æ’°’Æ ’•’∂:")
    except Exception as e:
        await update.message.reply_text(f"‚ùå ’ç’≠’°’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø’∂’•÷Ä’® ’∂’°’≠’°’∫’°’ø÷Ä’°’Ω’ø’•’¨’´’Ω: {e}")

async def set_sheet_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ID Google Spreadsheet"""
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = context.args
    if not args:
        await update.message.reply_text(
            "üìä Google Spreadsheet ’Ω’°’∞’¥’°’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ÷Ö’£’ø’°’£’∏÷Ä’Æ’•÷Ñ:\n"
            "<code>/set_sheet YOUR_SPREADSHEET_ID</code>\n\n"
            "ID-’∂ ’Ø’°÷Ä’•’¨’´ ’ß ’£’ø’∂’•’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø’´ ’∞’≤’∏÷Ç’¥’∏’æ:\n"
            "https://docs.google.com/spreadsheets/d/<b>SPREADSHEET_ID</b>/edit",
            parse_mode="HTML"
        )
        return
    
    spreadsheet_id = args[0].strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã
    try:
        sheets_info, spreadsheet_title = get_worksheets_info(spreadsheet_id)
        if not sheets_info:
            await update.message.reply_text("‚ùå ’Ä’∂’°÷Ä’°’æ’∏÷Ä ’π’ß ’¥’∏÷Ç’ø÷Ñ ’£’∏÷Ä’Æ’•’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø: ’ç’ø’∏÷Ç’£’•÷Ñ ID-’∂ ÷á ’¥’∏÷Ç’ø÷Ñ’´ ’´÷Ä’°’æ’∏÷Ç’∂÷Ñ’∂’•÷Ä’®:")
            return
        
        from ...utils.config_utils import update_user_settings
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user_settings(user_id, {'active_spreadsheet_id': spreadsheet_id})
        
        await update.message.reply_text(
            f"‚úÖ Google Spreadsheet ’¥’´’°÷Å’æ’°’Æ ’ß:\n"
            f"üìä ‘±’∂’æ’°’∂’∏÷Ç’¥: <b>{spreadsheet_title}</b>\n"
            f"üÜî ID: <code>{spreadsheet_id}</code>\n"
            f"üìã ‘≥’ø’∂’æ’°’Æ ’©’•÷Ä’©’´’Ø’∂’•÷Ä: {len(sheets_info)}\n\n"
            f"‘±’µ’™’¥ ’®’∂’ø÷Ä’•÷Ñ ’©’•÷Ä’©’´’Ø ’°’∑’≠’°’ø’•’¨’∏÷Ç ’∞’°’¥’°÷Ä /menu ‚Üí üìã ‘∏’∂’ø÷Ä’•’¨ ’©’•÷Ä’©’´’Ø",
            parse_mode="HTML"
        )
        
        await send_to_log_chat(context, f"’Ñ’´’°÷Å’æ’°’Æ ’ß Google Spreadsheet: {spreadsheet_title} (ID: {spreadsheet_id})")
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå ’ç’≠’°’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø’´’∂ ’¥’´’°’∂’°’¨’´’Ω:\n<code>{str(e)}</code>\n\n"
            f"’Ä’°’¥’∏’¶’æ’•÷Ñ, ’∏÷Ä:\n"
            f"‚Ä¢ ‘±’≤’µ’∏÷Ç’Ω’°’Ø’´ ID-’∂ ’≥’´’∑’ø ’ß\n"
            f"‚Ä¢ ‘æ’°’º’°’µ’∏÷Ç’©’µ’°’∂ ’∞’°’∑’´’æ’® ’¥’∏÷Ç’ø÷Ñ’´ ’´÷Ä’°’æ’∏÷Ç’∂÷Ñ ’∏÷Ç’∂’´\n"
            f"‚Ä¢ Credentials ÷Ü’°’µ’¨’® ’≥’´’∑’ø ’ß",
            parse_mode="HTML"
        )

async def set_report_sheet_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—Å—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    if update.message:
        text = update.message.text.strip()
        parts = text.split()
        
        if len(parts) < 3:
            await update.message.reply_text(
                "üìä ’Ä’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’°’∂ ’Ø’°÷Ä’£’°’æ’∏÷Ä’¥’°’∂ ’∞’°’¥’°÷Ä ÷Ö’£’ø’°’£’∏÷Ä’Æ’•÷Ñ:\n"
                "<spreadsheet_id> <sheet_name>\n\n"
                "’ï÷Ä’´’∂’°’Ø: abc12345 ’Ä’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä",
                parse_mode="HTML"
            )
            return
            
        spreadsheet_id = parts[1]
        sheet_name = ' '.join(parts[2:])
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã
            sheets_info, spreadsheet_title = get_worksheets_info(spreadsheet_id)
            if not sheets_info:
                await update.message.reply_text("‚ùå ’Ä’∂’°÷Ä’°’æ’∏÷Ä ’π’ß ’¥’∏÷Ç’ø÷Ñ ’£’∏÷Ä’Æ’•’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
            sheet_exists = any(sheet['title'] == sheet_name for sheet in sheets_info)
            if not sheet_exists:
                await update.message.reply_text(f"‚ùå ‘π’•÷Ä’©’´’Ø '{sheet_name}' ’π’´ ’£’ø’∂’æ’•’¨")
                return
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
            chat_id = update.effective_chat.id
            set_report_settings(chat_id, {
                'spreadsheet_id': spreadsheet_id,
                'sheet_name': sheet_name,
                'spreadsheet_title': spreadsheet_title
            })
            
            await update.message.reply_text(
                f"‚úÖ ’Ä’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’® ’Ø’°÷Ä’£’°’æ’∏÷Ä’æ’°’Æ ’•’∂:\n"
                f"üìä ‘±’≤’µ’∏÷Ç’Ω’°’Ø: <b>{spreadsheet_title}</b>\n"
                f"üìã ‘π’•÷Ä’©’´’Ø: <b>{sheet_name}</b>\n\n"
                f"‘≤’∏’¨’∏÷Ä ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’® ’Ø’£÷Ä’°’∂÷Å’æ’•’∂ ’°’µ’Ω ’©’•÷Ä’©’´’Ø’∏÷Ç’¥:",
                parse_mode="HTML",
                reply_markup=create_main_menu(user_id)
            )
            
            await send_to_log_chat(context, f"‘ø’°÷Ä’£’°’æ’∏÷Ä’æ’°’Æ ’•’∂ ’∞’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä: {spreadsheet_title} > {sheet_name}")
            
        except Exception as e:
            await update.message.reply_text(
                f"‚ùå ’Ä’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’Ø’°÷Ä’£’°’æ’∏÷Ä’¥’°’∂ ’Ω’≠’°’¨: {e}",
                reply_markup=create_main_menu(user_id)
            )
    else:
        await update.message.reply_text(
            "üìä ’Ä’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’Ø’°÷Ä’£’°’æ’∏÷Ä’¥’°’∂ ’∞’°’¥’°÷Ä ÷Ö’£’ø’°’£’∏÷Ä’Æ’•÷Ñ:\n"
            "/set_report <spreadsheet_id> <sheet_name>",
            parse_mode="HTML",
            reply_markup=create_main_menu(user_id)
        )
