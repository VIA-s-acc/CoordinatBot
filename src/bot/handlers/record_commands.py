"""
–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø–∏—Å—è–º–∏
"""
import logging
from telegram import Update
from telegram.ext import CallbackContext
from ...utils.config_utils import is_user_allowed
from ...database.database_manager import search_records, get_all_records, get_record_from_db
from ...utils.formatting import format_record_info

logger = logging.getLogger(__name__)

async def search_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π"""
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return
    
    args = context.args
    if not args:
        await update.message.reply_text(
            "üîç ‘≥÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä’´ ’∏÷Ä’∏’∂’∏÷Ç’¥:\n"
            "’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ: <code>/search [’ø’•÷Ñ’Ω’ø’´ ’∏÷Ä’∏’∂’∏÷Ç’¥]</code>\n\n"
            "’à÷Ä’∏’∂’∏÷Ç’¥’∂ ’´÷Ä’°’Ø’°’∂’°÷Å’æ’∏÷Ç’¥ ’ß ’∞’•’ø÷á’µ’°’¨ ’§’°’∑’ø’•÷Ä’∏’æ’ù ’¥’°’ø’°’Ø’°÷Ä’°÷Ä, ’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂, ’∂’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂",
            parse_mode="HTML"
        )
        return
    
    query = " ".join(args)
    
    try:
        records = search_records(query)
        
        if not records:
            await update.message.reply_text(
                f"üîç '{query}' ’∞’°÷Ä÷Å’¥’°’∂ ’∞’°’¥’°÷Ä ’∏’π’´’∂’π ’π’´ ’£’ø’∂’æ’•’¨:",
                parse_mode="HTML"
            )
            return
        
        result_text = f"üîç ‘≥’ø’∂’æ’•’¨ ’ß {len(records)} ’£÷Ä’°’º’∏÷Ç’¥ '{query}' ’∞’°÷Ä÷Å’¥’°’∂ ’∞’°’¥’°÷Ä:\n\n"
        
        for i, record in enumerate(records, 1):
            if i > 25:
                result_text += f"\n... ÷á {len(records) - 25} ’°’æ’•’¨’´’∂"
                break
            result_text += f"{i}. ID: <code>{record['id']}</code>\n"
            result_text += f"   üìÖ {record['date']} | üí∞ {record['amount']:,.2f}\n"
            result_text += f"   üè™ {record['supplier']}\n"
            result_text += f"   üìù {record['description'][:50]}{'...' if len(record['description']) > 50 else ''}\n"
            result_text += f"   üìã {record['sheet_name']}\n\n"
        
        if len(records) == 25:
            result_text += "‚ÑπÔ∏è ’ë’∏÷Ç÷Å’°’§÷Ä’æ’°’Æ ’•’∂ ’°’º’°’ª’´’∂ 25 ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ’∂’•÷Ä’®: ’Ä’Ω’ø’°’Ø’•÷Å÷Ä’•÷Ñ ’∞’°÷Ä÷Å’∏÷Ç’¥’® ’°’æ’•’¨’´ ’≥’∑’£÷Ä’´’ø ’∏÷Ä’∏’∂’¥’°’∂ ’∞’°’¥’°÷Ä:"
        
        await update.message.reply_text(result_text, parse_mode="HTML")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå ’à÷Ä’∏’∂’¥’°’∂ ’Ω’≠’°’¨: {e}")

async def recent_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5
        args = context.args
        limit = 5
        if args:
            try:
                limit = min(int(args[0]), 1000)  # –ú–∞–∫—Å–∏–º—É–º 1000 –∑–∞–ø–∏—Å–µ–π
            except ValueError:
                pass
        
        records = get_all_records(limit=limit)
        
        if not records:
            await update.message.reply_text("üìù ’è’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’¶’°’µ’∏÷Ç’¥ ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä ’π’Ø’°’∂:")
            return
        
        result_text = f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(records)} –∑–∞–ø–∏—Å–µ–π:\n\n"
        
        for i, record in enumerate(records, 1):
            result_text += f"{i}. ID: <code>{record['id']}</code>\n"
            result_text += f"   üìÖ {record['date']} | üí∞ {record['amount']:,.2f}\n"
            result_text += f"   üè™ {record['supplier']}\n"
            result_text += f"   üß≠ {record['direction']}\n"
            result_text += f"   üìù {record['description']}\n"
            result_text += f"   üìä <code>{record['spreadsheet_id']}</code>\n"
            result_text += f"   üìã  <code>{record['sheet_name']}</code>\n\n"
            
        
        await update.message.reply_text(result_text, parse_mode="HTML")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå ‘≥÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä ’Ω’ø’°’∂’°’¨’∏÷Ç ’Ω’≠’°’¨: {e}")

async def info_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –ø–æ ID"""
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return
    
    args = context.args
    if not args:
        await update.message.reply_text(
            "‚ÑπÔ∏è ‘≥÷Ä’°’º’¥’°’∂ ’¥’°’Ω’´’∂ ’ø’•’≤’•’Ø’°’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:\n"
            "’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ: <code>/info [ID –∑–∞–ø–∏—Å–∏]</code>",
            parse_mode="HTML"
        )
        return
    
    record_id = args[0].strip()
    
    try:
        record = get_record_from_db(record_id)
        
        if not record:
            await update.message.reply_text(
                f"‚ùå <code>{record_id}</code> ID-’∏’æ ’£÷Ä’°’º’∏÷Ç’¥ ’π’´ ’£’ø’∂’æ’•’¨:",
                parse_mode="HTML"
            )
            return
        
        result_text = "‚ÑπÔ∏è ‘≥÷Ä’°’º’¥’°’∂ ’¥’°’∂÷Ä’°’¥’°’Ω’∂ ’ø’•’≤’•’Ø’°’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:\n\n"
        result_text += format_record_info(record)
        result_text += f"\n\nüìÖ ’ç’ø’•’≤’Æ’æ’°’Æ ’ß: {record.get('created_at', 'N/A')}"
        result_text += f"\nüîÑ ‘π’°÷Ä’¥’°÷Å’æ’°’Æ ’ß: {record.get('updated_at', 'N/A')}"
        
        await update.message.reply_text(result_text, parse_mode="HTML")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå ’è’•’≤’•’Ø’°’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂ ’Ω’ø’°’∂’°’¨’∏÷Ç ’Ω’≠’°’¨: {e}")
