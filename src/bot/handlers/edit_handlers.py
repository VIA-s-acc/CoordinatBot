"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
"""
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler

from ..states.conversation_states import EDIT_VALUE, CONFIRM_DELETE
from ..keyboards.inline_keyboards import create_main_menu, create_edit_menu
from ...utils.config_utils import is_user_allowed, get_user_settings, load_users, save_users
from ...config.settings import ADMIN_IDS
from ...utils.formatting import format_record_info
from ...database.database_manager import get_record_from_db, update_record_in_db, delete_record_from_db
from ...google_integration.sheets_manager import update_record_in_sheet, delete_record_from_sheet
from ...utils.report_manager import send_report

logger = logging.getLogger(__name__)

def get_user_id_by_record_id(record_id: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∑–∞–ø–∏—Å–∏"""
    users = load_users()
    for user_id_str, user_data in users.items():
        if 'reports' in user_data and str(record_id) in user_data['reports']:
            return int(user_id_str)
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏ –≤ –ë–î
    rec = get_record_from_db(record_id)
    if rec:
        supplier = rec.get('supplier')
        # –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º display_name
        for user_id_str, user_data in users.items():
            if user_data.get('display_name') == supplier:
                return int(user_id_str)
    return 0

def get_user_id_by_name(name: str) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏"""
    users = load_users()
    for user_id_str, user_data in users.items():
        if user_data.get('display_name') == name:
            return int(user_id_str)
    return 0

async def handle_edit_button(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return
    
    data = query.data
    
    if data.startswith("edit_record_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        record_id = data.replace("edit_record_", "")
        return await show_edit_menu(update, context, record_id, user_id)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
    parts = data.split("_")
    if len(parts) >= 3:
        field = parts[1]
        record_id = "_".join(parts[2:])
        
        context.user_data['edit_record_id'] = record_id
        context.user_data['edit_field'] = field
        
        field_names = {
            'date': '’°’¥’Ω’°’©’´’æ (YYYY-MM-DD)',
            'supplier': '’¥’°’ø’°’Ø’°÷Ä’°÷Ä',
            'direction': '’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂',
            'description': '’∂’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂',
            'amount': '’£’∏÷Ç’¥’°÷Ä'
        }
        record = get_record_from_db(record_id)
        if not record:
            await query.edit_message_text("‚ùå ‘≥÷Ä’°’º’∏÷Ç’¥’® ’π’´ ’£’ø’∂’æ’•’¨:")
            return ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        user_id_rec = get_user_id_by_record_id(record_id)
        
        if user_id not in ADMIN_IDS and user_id_rec != user_id:
            await query.edit_message_text("‚ùå ‘¥’∏÷Ç÷Ñ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’≠’¥’¢’°’£÷Ä’•’¨ ’¥’´’°’µ’∂ ’±’•÷Ä ’Ω’•÷É’°’Ø’°’∂ ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä’®:")
            return ConversationHandler.END
        
        keyboard = create_edit_menu(record_id, user_id in ADMIN_IDS)
        await query.edit_message_text(
            f"‚úèÔ∏è ‘≥÷Ä’°’º’¥’°’∂ ’≠’¥’¢’°’£÷Ä’∏÷Ç’¥ ID: <code>{record_id}</code>\n\n"
            f"’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’∂’∏÷Ä ’°÷Ä’™’•÷Ñ '{field_names.get(field, field)}' ’§’°’∑’ø’´ ’∞’°’¥’°÷Ä \n’Ä’´’∂÷â {record[field]}",
            parse_mode="HTML",
            reply_markup=keyboard
        )

        return EDIT_VALUE

async def show_edit_menu(update: Update, context: CallbackContext, record_id: str, user_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    query = update.callback_query
    if not is_user_allowed(user_id):
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    record = get_record_from_db(record_id)
    if not record:
        await query.edit_message_text("‚ùå ‘≥÷Ä’°’º’∏÷Ç’¥’® ’π’´ ’£’ø’∂’æ’•’¨:")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    user_id_rec = get_user_id_by_record_id(record_id)
    
    if user_id not in ADMIN_IDS and user_id_rec != user_id:
        await query.edit_message_text("‚ùå ‘¥’∏÷Ç÷Ñ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’≠’¥’¢’°’£÷Ä’•’¨ ’¥’´’°’µ’∂ ’±’•÷Ä ’Ω’•÷É’°’Ø’°’∂ ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä’®:")
        return ConversationHandler.END
    
    text = "‚úèÔ∏è ‘≥÷Ä’°’º’¥’°’∂ ’≠’¥’¢’°’£÷Ä’∏÷Ç’¥:\n\n"
    text += format_record_info(record)
    text += "\n\n‘∏’∂’ø÷Ä’•÷Ñ ’§’°’∑’ø’® ’≠’¥’¢’°’£÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä:"
    
    await query.edit_message_text(
        text,
        parse_mode="HTML",
        reply_markup=create_edit_menu(record_id, user_id in ADMIN_IDS))

async def get_edit_value(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –ø–æ–ª—è"""
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return ConversationHandler.END
    
    new_value = update.message.text.strip()
    record_id = context.user_data.get('edit_record_id')
    field = context.user_data.get('edit_field')
    
    if not record_id or not field:
        await update.message.reply_text("‚ùå ‘Ω’¥’¢’°’£÷Ä’¥’°’∂ ’Ω’≠’°’¨:")
        return ConversationHandler.END
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    record = get_record_from_db(record_id)
    if not record:
        await update.message.reply_text("‚ùå ‘≥÷Ä’°’º’∏÷Ç’¥’® ’π’´ ’£’ø’∂’æ’•’¨:")
        return ConversationHandler.END

    user_id_rec = get_user_id_by_record_id(record_id)
    

    if user_id not in ADMIN_IDS and user_id_rec != user_id:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’≠’¥’¢’°’£÷Ä’•’¨ ’¥’´’°’µ’∂ ’±’•÷Ä ’Ω’•÷É’°’Ø’°’∂ ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä’®:")
        return ConversationHandler.END
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if field == 'date':
        try:
            datetime.strptime(new_value, "%Y-%m-%d")
        except ValueError:
            await update.message.reply_text(
                "‚ùå ‘±’¥’Ω’°’©’æ’´ ’Ω’≠’°’¨ ’±÷á’°’π’°÷É: ’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ YYYY-MM-DD:"
            )
            return EDIT_VALUE
    elif field == 'amount':
        try:
            new_value = float(new_value)
        except ValueError:
            await update.message.reply_text(
                "‚ùå ‘≥’∏÷Ç’¥’°÷Ä’´ ’Ω’≠’°’¨ ’±÷á’°’π’°÷É: ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’©’´’æ:"
            )
            return EDIT_VALUE
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ Google Sheets
    spreadsheet_id = record.get('spreadsheet_id')
    sheet_name = record.get('sheet_name')
    sheet_success = update_record_in_sheet(spreadsheet_id, sheet_name, record_id, field, new_value)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_success = update_record_in_db(record_id, field, new_value)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    if db_success and sheet_success:
        result_text = f"‚úÖ '{field}' ’§’°’∑’ø’® ’©’°÷Ä’¥’°÷Å’æ’°’Æ ’ß '{new_value}' ’°÷Ä’™’•÷Ñ’∏’æ"
        record = get_record_from_db(record_id)
        result_text += "\n\n" + format_record_info(record)
    elif db_success:
        result_text = f"‚úÖ '{field}' ’§’°’∑’ø’® ’©’°÷Ä’¥’°÷Å’æ’°’Æ ’ß ’è‘≤-’∏÷Ç’¥\n‚ö†Ô∏è ’ç’≠’°’¨ Google Sheets-’∏÷Ç’¥ ’©’°÷Ä’¥’°÷Å’∂’•’¨’´’Ω"
    elif sheet_success:
        result_text = f"‚ö†Ô∏è ’ç’≠’°’¨ ’è‘≤-’∏÷Ç’¥ ’©’°÷Ä’¥’°÷Å’∂’•’¨’´’Ω\n‚úÖ '{field}' ’§’°’∑’ø’® ’©’°÷Ä’¥’°÷Å’æ’°’Æ ’ß Google Sheets-’∏÷Ç’¥"
    else:
        result_text = f"‚ùå '{field}' ’§’°’∑’ø’® ’©’°÷Ä’¥’°÷Å’∂’•’¨’∏÷Ç ’Ω’≠’°’¨"
    
    keyboard = [[InlineKeyboardButton("‚úèÔ∏è ‘Ω’¥’¢’°’£÷Ä’•’¨", callback_data=f"edit_record_{record['id']}")]]
    await update.message.reply_text(result_text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    user_settings = get_user_settings(user_id)
    user_info = {
        'id': user_id,
        'name': update.effective_user.full_name,
        'display_name': user_settings.get('display_name')
    }
    await send_report(context, "‘Ω’¥’¢’°’£÷Ä’∏÷Ç’¥", record, user_info)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    return ConversationHandler.END

async def handle_delete_button(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return
    
    record_id = query.data.replace("delete_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
    record = get_record_from_db(record_id)
    if not record:
        await query.edit_message_text("‚ùå ‘≥÷Ä’°’º’∏÷Ç’¥’® ’π’´ ’£’ø’∂’æ’•’¨:")
        return ConversationHandler.END
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    user_id_rec = get_user_id_by_record_id(record_id)
    

    if user_id not in ADMIN_IDS and user_id_rec != user_id:
        await query.edit_message_text("‚ùå ‘¥’∏÷Ç÷Ñ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’ª’∂’ª’•’¨ ’¥’´’°’µ’∂ ’±’•÷Ä ’Ω’•÷É’°’Ø’°’∂ ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä’®:")
        return ConversationHandler.END
    
    text = "üóë ’ã’∂’ª’•’¨’∏÷Ç ’∞’°’Ω’ø’°’ø’∏÷Ç’¥:\n\n"
    text += format_record_info(record)
    text += "\n\n‚ö†Ô∏è ‘±’µ’Ω ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’® ’π’´ ’Ø’°÷Ä’∏’≤ ’π’•’≤’°÷Ä’Ø’æ’•’¨:"
    
    keyboard = [
        [InlineKeyboardButton("üóë ‘±’µ’∏, ’ª’∂’ª’•’¨", callback_data=f"confirm_delete_{record_id}")],
        [InlineKeyboardButton("‚ùå ’â’•’≤’°÷Ä’Ø’•’¨", callback_data=f"cancel_edit_{record_id}")]
    ]
    
    await query.edit_message_text(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard))

async def confirm_delete(update: Update, context: CallbackContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    logger.info(f"confirm_delete –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, callback_data: {query.data}")
    
    if not is_user_allowed(user_id):
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–¥–∞–ª–µ–Ω–∏—é")
        return
    
    record_id = query.data.replace("confirm_delete_", "")
    logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω record_id: {record_id}")
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ Google Sheets
    record = get_record_from_db(record_id)
    if not record:
        logger.error(f"–ó–∞–ø–∏—Å—å {record_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
        await query.edit_message_text("‚ùå ‘≥÷Ä’°’º’∏÷Ç’¥’® ’π’´ ’£’ø’∂’æ’•’¨:")
        return
    
    spreadsheet_id = record.get('spreadsheet_id')
    sheet_name = record.get('sheet_name')
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_success = delete_record_from_db(record_id)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ Google Sheets
    sheet_success = delete_record_from_sheet(spreadsheet_id, sheet_name, record_id)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    if db_success and sheet_success:
        result_text = f"‚úÖ ‘≥÷Ä’°’º’∏÷Ç’¥ ID: <code>{record_id}</code> ’ª’∂’ª’æ’°’Æ ’ß"
    elif db_success:
        result_text = f"‚úÖ ‘≥÷Ä’°’º’∏÷Ç’¥’® ’ª’∂’ª’æ’°’Æ ’ß ’è‘≤-’´÷Å\n‚ö†Ô∏è ’ç’≠’°’¨ Google Sheets-’´÷Å ’ª’∂’ª’•’¨’´’Ω"
    elif sheet_success:
        result_text = f"‚ö†Ô∏è ’ç’≠’°’¨ ’è‘≤-’´÷Å ’ª’∂’ª’•’¨’´’Ω\n‚úÖ ‘≥÷Ä’°’º’∏÷Ç’¥’® ’ª’∂’ª’æ’°’Æ ’ß Google Sheets-’´÷Å"
    else:
        result_text = f"‚ùå ‘≥÷Ä’°’º’∏÷Ç’¥’® ’ª’∂’ª’•’¨’∏÷Ç ’Ω’≠’°’¨ ID: <code>{record_id}</code>"
    
    if db_success or sheet_success:
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users_data = load_users()
        creator_id = record.get('user_id')
        if creator_id:
            creator_id_str = str(creator_id)
            if creator_id_str in users_data and 'reports' in users_data[creator_id_str]:
                if record_id in users_data[creator_id_str]['reports']:
                    users_data[creator_id_str]['reports'].remove(record_id)
                    save_users(users_data)
                    
    await query.edit_message_text(
        result_text,
        parse_mode="HTML",
        reply_markup=create_main_menu(user_id)
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    user_settings = get_user_settings(user_id)
    user_info = {
        'id': user_id,
        'name': update.effective_user.full_name,
        'display_name': user_settings.get('display_name')
    }
    await send_report(context, "’ã’∂’ª’∏÷Ç’¥", record, user_info)
    
    return ConversationHandler.END

async def cancel_edit(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return ConversationHandler.END
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–Ω–æ–ø–∫—É, —Ç–∞–∫ –∏ –∫–æ–º–∞–Ω–¥—É
    if update.callback_query:
        record_id = update.callback_query.data.replace("cancel_edit_", "")
        record = get_record_from_db(record_id)
        if record:
            text = format_record_info(record)
            keyboard = [[InlineKeyboardButton("‚úèÔ∏è ‘Ω’¥’¢’°’£÷Ä’•’¨", callback_data=f"edit_record_{record_id}")]]
            await update.callback_query.edit_message_text(
                text,
                parse_mode="HTML",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.callback_query.edit_message_text("‚ùå ‘≥÷Ä’°’º’∏÷Ç’¥’® ’π’´ ’£’ø’∂’æ’•’¨:")
    else:
        await update.message.reply_text(
            "‚ùå ‘Ω’¥’¢’°’£÷Ä’¥’°’∂ ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’® ’π’•’≤’°÷Ä’Ø’æ’°’Æ ’ß:",
            reply_markup=create_main_menu(user_id)
        )
    context.user_data.clear()
    return ConversationHandler.END
