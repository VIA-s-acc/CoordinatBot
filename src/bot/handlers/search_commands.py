"""
–ö–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
"""
import logging
from telegram import Update
from telegram.ext import CallbackContext

from ..keyboards.inline_keyboards import create_edit_record_keyboard
from ...utils.config_utils import is_user_allowed, get_user_settings
from ...database.database_manager import search_records, get_all_records, get_record_from_db

logger = logging.getLogger(__name__)

async def search_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π"""
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return
    
    args = context.args
    if not args:
        await update.message.reply_text(
            "üîç ‘≥÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä’´ ’∏÷Ä’∏’∂’∏÷Ç’¥:\n"
            "’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ: <code>/search [’ø’•÷Ñ’Ω’ø’´ ’∏÷Ä’∏’∂’∏÷Ç’¥]</code>\n\n"
            "’à÷Ä’∏’∂’∏÷Ç’¥’∂ ’´÷Ä’°’Ø’°’∂’°÷Å’æ’∏÷Ç’¥ ’ß ’∞’•’ø÷á’µ’°’¨ ’§’°’∑’ø’•÷Ä’∏’æ’ù ’¥’°’ø’°’Ø’°÷Ä’°÷Ä, ’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂, ’∂’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂",
            parse_mode="HTML"
        )
        return
    
    query = " ".join(args)
    
    try:
        records = search_records(query)
        
        if not records:
            await update.message.reply_text(
                f"üîç '{query}' ’∞’°÷Ä÷Å’¥’°’∂ ’∞’°’¥’°÷Ä ’∏’π’´’∂’π ’π’´ ’£’ø’∂’æ’•’¨:",
                parse_mode="HTML"
            )
            return
        
        result_text = f"üîç ‘≥’ø’∂’æ’•’¨ ’ß {len(records)} ’£÷Ä’°’º’∏÷Ç’¥ '{query}' ’∞’°÷Ä÷Å’¥’°’∂ ’∞’°’¥’°÷Ä:\n\n"
        
        for i, record in enumerate(records, 1):
            if i > 25:
                break
            result_text += f"{i}. ID: <code>{record['id']}</code>\n"
            result_text += f"   üìÖ {record['date']} | üí∞ {record['amount']:,.2f}\n"
            result_text += f"   üè™ {record['supplier']}\n"
            result_text += f"   üìù {record['description'][:50]}{'...' if len(record['description']) > 50 else ''}\n"
            result_text += f"   üìã {record.get('sheet_name', 'N/A')}\n\n"
        
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –º–Ω–æ–≥–æ, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        if len(records) > 25:
            result_text += "‚ÑπÔ∏è ’ë’∏÷Ç÷Å’°’§÷Ä’æ’°’Æ ’•’∂ ’°’º’°’ª’´’∂ 25 ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ’∂’•÷Ä’®: ’Ä’Ω’ø’°’Ø’•÷Å÷Ä’•÷Ñ ’∞’°÷Ä÷Å’∏÷Ç’¥’® ’°’æ’•’¨’´ ’≥’∑’£÷Ä’´’ø ’∏÷Ä’∏’∂’¥’°’∂ ’∞’°’¥’°÷Ä:"
        
        await update.message.reply_text(result_text, parse_mode="HTML")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå ’à÷Ä’∏’∂’¥’°’∂ ’Ω’≠’°’¨: {e}")

async def recent_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5
        args = context.args
        limit = 5
        if args:
            try:
                limit = min(int(args[0]), 50)  # –ú–∞–∫—Å–∏–º—É–º 50 –∑–∞–ø–∏—Å–µ–π
            except ValueError:
                pass
        
        records = get_all_records(limit=limit)
        
        if not records:
            await update.message.reply_text("üìù ’è’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’¶’°’µ’∏÷Ç’¥ ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä ’π’Ø’°’∂:")
            return
        
        result_text = f"üìù ’é’•÷Ä’ª’´’∂ {len(records)} ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä’®:\n\n"
        
        for i, record in enumerate(records, 1):
            result_text += f"{i}. ID: <code>{record['id']}</code>\n"
            result_text += f"   üìÖ {record['date']} | üí∞ {record['amount']:,.2f}\n"
            result_text += f"   üè™ {record['supplier']}\n"
            result_text += f"   üß≠ {record['direction']}\n"
            result_text += f"   üìù {record['description']}\n"
            result_text += f"   üìä <code>{record.get('spreadsheet_id', 'N/A')}</code>\n"
            result_text += f"   üìã <code>{record.get('sheet_name', 'N/A')}</code>\n\n"
        
        await update.message.reply_text(result_text, parse_mode="HTML")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå ‘≥÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä ’Ω’ø’°’∂’°’¨’∏÷Ç ’Ω’≠’°’¨: {e}")

async def info_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –ø–æ ID"""
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return
    
    args = context.args
    if not args:
        await update.message.reply_text(
            "‚ÑπÔ∏è ‘≥÷Ä’°’º’¥’°’∂ ’¥’°’∂÷Ä’°’¥’°’Ω’∂ ’ø’•’≤’•’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’∞’°’¥’°÷Ä ÷Ö’£’ø’°’£’∏÷Ä’Æ’•÷Ñ:\n"
            "<code>/info [ID]</code>\n\n"
            "’ï÷Ä’´’∂’°’Ø: <code>/info cb-12345678</code>",
            parse_mode="HTML"
        )
        return
    
    record_id = args[0].strip()
    
    try:
        record = get_record_from_db(record_id)
        
        if not record:
            await update.message.reply_text(
                f"‚ùå ‘≥÷Ä’°’º’∏÷Ç’¥ ID: <code>{record_id}</code> ’π’´ ’£’ø’∂’æ’•’¨:",
                parse_mode="HTML"
            )
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        info_text = (
            f"‚ÑπÔ∏è <b>‘≥÷Ä’°’º’¥’°’∂ ’¥’°’∂÷Ä’°’¥’°’Ω’∂ ’ø’•’≤’•’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä:</b>\n\n"
            f"üÜî ID: <code>{record['id']}</code>\n"
            f"üìÖ ‘±’¥’Ω’°’©’´’æ: <b>{record['date']}</b>\n"
            f"üè™ ’Ñ’°’ø’°’Ø’°÷Ä’°÷Ä: <b>{record['supplier']}</b>\n"
            f"üß≠ ’à÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂: <b>{record['direction']}</b>\n"
            f"üìù ’Ü’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂: <b>{record['description']}</b>\n"
            f"üí∞ ‘≥’∏÷Ç’¥’°÷Ä: <b>{record['amount']:,.2f} ’§÷Ä’°’¥</b>\n"
            f"üìä ‘±’≤’µ’∏÷Ç’Ω’°’Ø: <code>{record.get('spreadsheet_id', 'N/A')}</code>\n"
            f"üìã ‘π’•÷Ä’©’´’Ø: <b>{record.get('sheet_name', 'N/A')}</b>\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'created_at' in record:
            info_text += f"üïí ’ç’ø’•’≤’Æ’æ’•’¨ ’ß: <b>{record['created_at']}</b>\n"

        await update.message.reply_text(
            info_text,
            parse_mode="HTML",
            reply_markup=create_edit_record_keyboard(record_id)
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå ’è’•’≤’•’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä ’Ω’ø’°’∂’°’¨’∏÷Ç ’Ω’≠’°’¨: {e}")

async def my_report_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    user_id = update.effective_user.id
    if not is_user_allowed(user_id):
        return

    user_settings = get_user_settings(user_id)
    display_name = user_settings.get('display_name')
    if not display_name:
        await update.message.reply_text("‚ùå ’Å’•÷Ä ’°’∂’∏÷Ç’∂’® ’π’´ ’Ω’°’∞’¥’°’∂’æ’°’Æ÷â")
        return

    args = context.args
    date_from = args[0] if len(args) > 0 else None
    date_to = args[1] if len(args) > 1 else None

    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        records = get_all_records()
        filtered = []
        for rec in records:
            if str(rec.get('supplier', '')).strip() != display_name:
                continue
            rec_date = rec.get('date', '')
            if date_from and rec_date < date_from:
                continue
            if date_to and rec_date > date_to:
                continue
            filtered.append(rec)

        if not filtered:
            await update.message.reply_text("’Å’•÷Ä ’°’∂’∏÷Ç’∂’∏’æ ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä ’π’•’∂ ’£’ø’∂’æ’•’¨ ’∂’∑’æ’°’Æ ’™’°’¥’°’∂’°’Ø’°’∞’°’ø’æ’°’Æ’∏÷Ç’¥÷â")
            return

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ª–∏—Å—Ç–∞–º
        sheets = {}
        total = 0
        for rec in filtered:
            sheet = rec.get('sheet_name', '‚Äî')
            sheets.setdefault(sheet, []).append(rec)
            total += rec.get('amount', 0)

        text = f"üßæ <b>’Å’•÷Ä ’Æ’°’≠’Ω’•÷Ä’´ ’∞’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂’®</b>\n"
        if date_from or date_to:
            text += f"üóì {date_from or '’Ω’Ø’¶’¢’´÷Å'} ‚Äî {date_to or '’¥’´’∂’π ’°’µ’™’¥'}\n"
        
        for sheet, recs in sheets.items():
            s = sum(r.get('amount', 0) for r in recs)
            text += f"\n<b>‘π’•÷Ä’©’´’Ø’ù {sheet}</b>: {s:,.2f} ’§÷Ä’°’¥ ({len(recs)} ’£÷Ä’°’º’∏÷Ç’¥)"
        
        text += f"\n\n<b>‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä’ù {total:,.2f} ’§÷Ä’°’¥</b>"

        await update.message.reply_text(text, parse_mode="HTML")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå ’Ä’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂ ’Ω’ø’•’≤’Æ’•’¨’∏÷Ç ’Ω’≠’°’¨: {e}")
