"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
"""
import logging
import pandas as pd
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import CallbackContext, ConversationHandler

from ...config.settings import ADMIN_IDS
import os
from ...utils.config_utils import load_users, get_user_settings, send_to_log_chat
from ...database.database_manager import add_payment, get_payments, get_all_records
from ...utils.payment_utils import (
    normalize_date, merge_payment_intervals, format_date_for_interval,
    get_user_id_by_display_name, send_message_to_user
)
from ..keyboards.inline_keyboards import create_main_menu
from ..handlers.translation_handlers import _

logger = logging.getLogger(__name__)

# --- –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ data ---
from telegram.constants import ChatAction

async def send_data_files_to_admin(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ data –∞–¥–º–∏–Ω—É"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return

    data_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 'data')
    if not os.path.exists(data_dir):
        await update.message.reply_text("‚ùå data ’∫’°’∂’°’Ø’® ’π’´ ’£’ø’∂’æ’•’¨:")
        return

    files = [f for f in os.listdir(data_dir) if os.path.isfile(os.path.join(data_dir, f))]
    if not files:
        await update.message.reply_text("‚ùå data ’∫’°’∂’°’Ø’∏÷Ç’¥ ÷Ü’°’µ’¨’•÷Ä ’π’Ø’°’∂:")
        return

    await update.message.reply_text(f"üìÇ ’à÷Ç’≤’°÷Ä’Ø’∏÷Ç’¥ ’•’¥ {len(files)} ÷Ü’°’µ’¨(’•÷Ä) data ’∫’°’∂’°’Ø’´÷Å:")
    for fname in files:
        fpath = os.path.join(data_dir, fname)
        try:
            await context.bot.send_chat_action(chat_id=user_id, action=ChatAction.UPLOAD_DOCUMENT)
            with open(fpath, 'rb') as f:
                await context.bot.send_document(chat_id=user_id, document=f, filename=fname)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {fname}: {e}")
            await update.message.reply_text(f"‚ùå ’ç’≠’°’¨ {fname} ÷Ü’°’µ’¨’´ ’∏÷Ç’≤’°÷Ä’Ø’¥’°’∂ ’™’°’¥’°’∂’°’Ø: {e}")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler –ø–ª–∞—Ç–µ–∂–µ–π
from ..states.conversation_states import (
    PAYMENT_AMOUNT, PAYMENT_PERIOD, PAYMENT_COMMENT
)


async def pay_menu_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø–ª–∞—Ç–µ–∂–µ–π"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    # –ú–µ–Ω—é —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
    users = load_users()
    keyboard = []
    for uid, udata in users.items():
        if udata.get('display_name'):
            keyboard.append([InlineKeyboardButton(
                udata['display_name'], 
                callback_data=f"pay_user_{udata['display_name']}"
            )])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è ’Ä’•’ø", callback_data="back_to_menu")])
    
    await query.edit_message_text(
        "üë• ‘∏’∂’ø÷Ä’•÷Ñ ’°’∑’≠’°’ø’°’Ø÷Å’´’∂:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def pay_user_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    display_name = query.data.replace("pay_user_", "")
    keyboard = [
        [InlineKeyboardButton("‚ûï ‘±’æ’•’¨’°÷Å’∂’•’¨ ’æ’≥’°÷Ä’∏÷Ç’¥", callback_data=f"add_payment_{display_name}")],
        [InlineKeyboardButton("üìä ’ç’ø’°’∂’°’¨ ’Ω’°’∞’¥’°’∂’´ ’∞’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂", callback_data=f"get_payment_report_{display_name}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è ’Ä’•’ø", callback_data="pay_menu")]
    ]
    
    await query.edit_message_text(
        f"üí∞ ‘∏’∂’ø÷Ä’•÷Ñ ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’® {display_name}-’´ ’∞’°’¥’°÷Ä:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def start_add_payment(update: Update, context: CallbackContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return ConversationHandler.END
    
    display_name = query.data.replace("add_payment_", "")
    context.user_data['pay_user'] = display_name
    
    await query.edit_message_text(
        f"üí∞ ‘±’æ’•’¨’°÷Å’∂’•’¨ ’æ’≥’°÷Ä’∏÷Ç’¥ {display_name}-’´ ’∞’°’¥’°÷Ä\n\n"
        f"üíµ ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’æ’≥’°÷Ä’¥’°’∂ ’£’∏÷Ç’¥’°÷Ä’®:"
    )
    
    return PAYMENT_AMOUNT

async def get_payment_amount(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        amount = float(update.message.text.strip())
        context.user_data['pay_amount'] = amount
        
        curr_date = datetime.now().strftime('%Y-%m-%d')
        context.user_data['pay_date_from'] = curr_date
        context.user_data['pay_date_to'] = curr_date
        
        await update.message.reply_text(
            "üìù ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’¥’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂ (’Ø’°’¥ ’∏÷Ç’≤’°÷Ä’Ø’•÷Ñ + ’¢’°÷Å’°’Ø’°’µ’∏’≤ ’¥’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’°’∂ ’∞’°’¥’°÷Ä):"
        )
        
        return PAYMENT_COMMENT
        
    except ValueError:
        await update.message.reply_text("‚ùå ’ç’≠’°’¨ ’£’∏÷Ç’¥’°÷Ä: ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’©’´’æ:")
        return PAYMENT_AMOUNT
    
    try:
        amount = float(amount_text.replace(',', '.'))
        if amount <= 0:
            await update.message.reply_text(
                "‚ùå ‘≥’∏÷Ç’¥’°÷Ä’® ’∫’•’ø÷Ñ ’ß ’¨’´’∂’´ ’§÷Ä’°’Ø’°’∂ ’©’´’æ: ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∂’∏÷Ä’´÷Å ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨:",
                reply_markup=create_back_to_menu_keyboard()
            )
            return PAYMENT_AMOUNT
        
        context.user_data['payment_amount'] = amount
        
        await update.message.reply_text(
            f"üí∞ ‘≥’∏÷Ç’¥’°÷Ä: {amount:,.2f} ’§÷Ä’°’¥\n\n"
            f"’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’∂’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’® (’Ø’°’¥ /skip ’¢’°÷Å ’©’∏’≤’∂’•’¨’∏÷Ç ’∞’°’¥’°÷Ä):",
            reply_markup=create_back_to_menu_keyboard()
        )
        
        return PAYMENT_DESCRIPTION
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå ’ç’≠’°’¨ ’£’∏÷Ç’¥’°÷Ä’´ ’±÷á’°’π’°÷É: ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’¥’∏÷Ç’ø÷Ñ’°’£÷Ä’•’¨ ’æ’°’æ’•÷Ä ’©’´’æ:",
            reply_markup=create_back_to_menu_keyboard()
        )
        return PAYMENT_AMOUNT

async def get_payment_description(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    user_id = update.effective_user.id
    
    if update.message.text == "/skip":
        description = ""
    else:
        description = update.message.text.strip()
    
    context.user_data['payment_description'] = description
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
    recipient_name = context.user_data.get('payment_recipient')
    amount = context.user_data.get('payment_amount')
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
    current_date = datetime.now().strftime("%d.%m.%Y")
    payer_name = get_user_display_name(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    payment_desc = f"’é’≥’°÷Ä’∏÷Ç’¥ {recipient_name}-’´’∂"
    if description:
        payment_desc += f" - {description}"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    record_id = add_record_to_db(
        date=current_date,
        supplier=payer_name,
        direction="’é’≥’°÷Ä’∏÷Ç’¥",
        description=payment_desc,
        amount=amount,
        user_id=user_id
    )
    
    if record_id:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Google Sheets
        success = add_record_to_sheet(
            user_id, current_date, payer_name, "’é’≥’°÷Ä’∏÷Ç’¥", payment_desc, amount
        )
        
        success_text = "‚úÖ ‘≥÷Ä’°’∂÷Å’æ’°’Æ ’ß ’£÷Ä÷Ñ’°’∫’°’∂’°’Ø’∏÷Ç’¥" if success else "‚ö†Ô∏è ‘≥÷Ä’°’∂÷Å’æ’°’Æ ’ß ’¥’´’°’µ’∂ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’¶’°’µ’∏÷Ç’¥"
        
        await update.message.reply_text(
            f"‚úÖ ’é’≥’°÷Ä’∏÷Ç’¥’® ’£÷Ä’°’∂÷Å’æ’°’Æ ’ß!\n\n"
            f"üìÖ ‘±’¥’Ω’°’©’´’æ: {current_date}\n"
            f"üë§ ’é’≥’°÷Ä’∏’≤: {payer_name}\n"
            f"üë§ ’ç’ø’°÷Å’∏’≤: {recipient_name}\n"
            f"üí∞ ‘≥’∏÷Ç’¥’°÷Ä: {amount:,.2f} ’§÷Ä’°’¥\n"
            f"üìù ’Ü’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂: {payment_desc}\n\n"
            f"{success_text}",
            reply_markup=create_back_to_menu_keyboard()
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        context.user_data.clear()
        
    else:
        await update.message.reply_text(
            "‚ùå ’ç’≠’°’¨ ’æ’≥’°÷Ä’¥’°’∂ ’£÷Ä’°’∂÷Å’¥’°’∂ ’™’°’¥’°’∂’°’Ø:",
            reply_markup=create_back_to_menu_keyboard()
        )
    
    return ConversationHandler.END

async def get_payment_period(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –ø–ª–∞—Ç–µ–∂–∞"""
    curr_date = datetime.now().strftime('%Y-%m-%d')
    period = update.message.text.strip()
    
    if period == "+":
        date_from, date_to = None, None
    else:
        parts = period.split()
        date_from = parts[0] if len(parts) > 0 else None
        date_to = parts[1] if len(parts) > 1 else None
        
    if date_from == "+":
        date_from = curr_date
    if date_to == "+":
        date_to = curr_date
        
    def check_is_date(date_str):
        try:
            pd.to_datetime(date_str, format='%Y-%m-%d', errors='raise')
            return True
        except ValueError:
            return False
    
    if date_from and not check_is_date(date_from):
        await update.message.reply_text("‚ùå ’ç’≠’°’¨ ’°’¥’Ω’°’©’´’æ: ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’°’¥’Ω’°’©’´’æ’® ’±÷á’°’π’°÷É’∏’æ 2024-01-01:")
        return PAYMENT_PERIOD
        
    elif date_to and not check_is_date(date_to):
        await update.message.reply_text("‚ùå ’ç’≠’°’¨ ’°’¥’Ω’°’©’´’æ: ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’°’¥’Ω’°’©’´’æ’® ’±÷á’°’π’°÷É’∏’æ 2024-01-01:")
        return PAYMENT_PERIOD
        
    if date_from and date_to and pd.to_datetime(date_from) > pd.to_datetime(date_to):
        date_from, date_to = date_to, date_from
        
    context.user_data['pay_date_from'] = date_from
    context.user_data['pay_date_to'] = date_to
    
    await update.message.reply_text("üìù ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’¥’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂ (’Ø’°’¥ ’∏÷Ç’≤’°÷Ä’Ø’•÷Ñ +):")
    return PAYMENT_COMMENT

async def get_payment_comment(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ"""
    user_id = update.effective_user.id
    comment = update.message.text.strip()
    
    if comment == "+":
        comment = ""
        
    display_name = context.user_data['pay_user']
    amount = context.user_data['pay_amount']
    date_from = context.user_data['pay_date_from']
    date_to = context.user_data['pay_date_to']
    
    user_settings = get_user_settings(user_id)
    spreadsheet_id = user_settings.get('active_spreadsheet_id')
    sheet_name = user_settings.get('active_sheet_name')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = add_payment(display_name, spreadsheet_id, sheet_name, amount, date_from, date_to, comment)
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        recipient_id = await get_user_id_by_display_name(display_name)
        sender_id = update.effective_user.id
        users = load_users()
        sender_name = users.get(str(sender_id), {}).get('display_name', '–ê–¥–º–∏–Ω')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_text = (
            f"üí∞ <b>’é’≥’°÷Ä’¥’°’∂ ’ø’•’≤’•’Ø’∏÷Ç’©’µ’∏÷Ç’∂</b>\n\n"
            f"üìä ’ì’∏’≠’°’∂÷Å’∏’≤: {sender_name}\n"
            f"üë§ ’ç’ø’°÷Å’∏’≤: {display_name}\n"
            f"üóì ‘±’¥’Ω’°’©’´’æ: {date_from}\n"
            f"üíµ ‘≥’∏÷Ç’¥’°÷Ä: {amount:,.2f} ’§÷Ä’°’¥\n"
            f"üìù ’Ü’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂: {comment or '‘±’º’°’∂÷Å ’¥’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’°’∂'}\n"
        )
        
        keyboard = [[InlineKeyboardButton("‚úÖ ’é’•÷Ä’°’§’°’º’∂’°’¨ ’°’∑’≠’°’ø’°’Ø÷Å’´’∂", callback_data=f"pay_user_{display_name}")]]
        
        await update.message.reply_text(
            "‚úÖ ’é’≥’°÷Ä’∏÷Ç’¥’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’°’æ’•’¨’°÷Å’æ’°’Æ ’ß:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        if recipient_id:
            await send_message_to_user(context, recipient_id, payment_text)
            await send_message_to_user(context, sender_id, payment_text)
            
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –ª–æ–≥-—á–∞—Ç
        await send_to_log_chat(context, f"‘±’æ’•’¨’°÷Å’æ’°’Æ ’ß ’æ’≥’°÷Ä’∏÷Ç’¥: {display_name} - {amount:,.2f} ’§÷Ä’°’¥")
        
    else:
        await update.message.reply_text("‚ùå ’ç’≠’°’¨ ’æ’≥’°÷Ä’∏÷Ç’¥’∂ ’°’æ’•’¨’°÷Å’∂’•’¨’´’Ω:")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    return ConversationHandler.END

async def send_payment_report(update: Update, context: CallbackContext, display_name: str):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Excel-–æ—Ç—á–µ—Ç —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –ø–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞–º –≤—ã–ø–ª–∞—Ç –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        db_records = get_all_records()
        filtered_records = []

        for record in db_records:
            if record['amount'] == 0:
                continue

            # –û—á–∏—Å—Ç–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É (–≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
            supplier = record['supplier'].strip() if 'supplier' in record else ""
            if supplier.lower() != display_name.lower():
                continue

            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞—Ç—É
            try:
                record['date'] = normalize_date(record['date'])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ {record}: {e}")
                continue

            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–∞–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            record_date = datetime.strptime(record['date'], '%d.%m.%y').date()
            record['date'] = record_date
            if record['supplier'] == "’Ü’°÷Ä’•’Ø":
                start_date = datetime.strptime("2025-05-10", '%Y-%m-%d').date()
            else:
                start_date = datetime.strptime("2024-12-05", '%Y-%m-%d').date()

            if record_date >= start_date:
                filtered_records.append(record)
            else:
                logger.info(f"–ó–∞–ø–∏—Å—å –æ—Ç {supplier} (–¥–∞—Ç–∞: {record_date}) –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–µ")

        if not filtered_records:
            user_id = update.effective_user.id
            back_button = InlineKeyboardButton("‚¨ÖÔ∏è ’Ä’•’ø", callback_data=f"pay_user_{display_name}" if user_id in ADMIN_IDS else "back_to_menu")
            await update.callback_query.edit_message_text(
                f"üìä {display_name}-’´ ’∞’°’¥’°÷Ä ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä ’π’•’∂ ’£’ø’∂’æ’•’¨:",
                reply_markup=InlineKeyboardMarkup([[back_button]])
            )
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ª–∏—Å—Ç–∞–º
        sheets = {}
        for rec in filtered_records:
            spreadsheet_id = rec.get('spreadsheet_id', '‚Äî')
            sheet_name = rec.get('sheet_name', '‚Äî')
            key = (spreadsheet_id, sheet_name)
            sheets.setdefault(key, []).append(rec)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É –ª–∏—Å—Ç—É –æ—Ç–¥–µ–ª—å–Ω–æ
        from openpyxl import Workbook
        from io import BytesIO
        import pandas as pd

        all_summaries = []
        for (spreadsheet_id, sheet_name), records in sheets.items():
            df = pd.DataFrame(records)
            if not df.empty:
                df['date'] = pd.to_datetime(df['date'], format='%d.%m.%Y', errors='coerce')
            else:
                df['date'] = pd.to_datetime([])

            df_amount_total = df['amount'].sum() if not df.empty else 0
            total_row = ['‚Äî'] * len(df.columns)

            if 'amount' in df.columns:
                amount_idx = df.columns.get_loc('amount')
                total_row[amount_idx] = df_amount_total
            df.loc["‘ª’ø’∏’£"] = total_row

            payments = get_payments(display_name, spreadsheet_id, sheet_name)
            total_paid_sheet = 0
            df_pay_sheet = pd.DataFrame()

            if payments:
                df_pay_raw_sheet = pd.DataFrame(payments, columns=['amount', 'date_from', 'date_to', 'comment', 'created_at'])
                df_pay_raw_sheet['amount'] = pd.to_numeric(df_pay_raw_sheet['amount'], errors='coerce').fillna(0)
                df_pay_raw_sheet['date_from'] = pd.to_datetime(df_pay_raw_sheet['date_from'], format='%d.%m.%Y', errors='coerce')
                df_pay_raw_sheet['date_to'] = pd.to_datetime(df_pay_raw_sheet['date_to'], format='%d.%m.%Y', errors='coerce')
                df_pay_sheet = merge_payment_intervals(df_pay_raw_sheet[['amount', 'date_from', 'date_to']])
                total_paid_sheet = df_pay_raw_sheet['amount'].sum()

            total_left_sheet = df_amount_total - total_paid_sheet
            all_summaries.append({
                '‘±’≤’µ’∏÷Ç’Ω’°’Ø': spreadsheet_id,
                '‘π’•’©÷Ä': sheet_name,
                '‘æ’°’≠’Ω': df_amount_total,
                "’é’≥’°÷Ä": total_paid_sheet,  
                '’Ñ’∂’°÷Å’∏÷Ä’§': total_left_sheet
            })

            summary = pd.DataFrame([{
                '‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’Æ’°’≠’Ω': df_amount_total,
                '‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’æ’≥’°÷Ä': total_paid_sheet,
                '’Ñ’∂’°÷Å’∏÷Ä’§': total_left_sheet
            }])

            output = BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='‘æ’°’≠’Ω’•÷Ä', index=False)
                summary.to_excel(writer, sheet_name='‘±’¥÷É’∏÷É', index=False)
                if not df_pay_sheet.empty:
                    df_pay_sheet.to_excel(writer, sheet_name='’é’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä', index=False)
                else:
                    empty_payments = pd.DataFrame(columns=['amount', 'date_from', 'date_to'])
                    empty_payments.to_excel(writer, sheet_name='’é’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä', index=False)
            output.seek(0)

            await update.callback_query.message.reply_document(
                document=output,
                filename=f"{display_name}_{sheet_name}_report.xlsx",
                caption=(
                    f"üìã ‘π’•÷Ä’©: {sheet_name}\n"
                    f"üí∞ ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’Æ’°’≠’Ω: {df_amount_total:,.2f} ’§÷Ä’°’¥\n"
                    f"üíµ ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’æ’≥’°÷Ä: {total_paid_sheet:,.2f} ’§÷Ä’°’¥\n"
                    f"üí∏ ’Ñ’∂’°÷Å’∏÷Ä’§: {total_left_sheet:,.2f} ’§÷Ä’°’¥"
                )
            )

        # –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º
        if all_summaries:
            df_total = pd.DataFrame(all_summaries)
            total_expenses_all = df_total['‘æ’°’≠’Ω'].sum()
            total_paid_all = df_total['’é’≥’°÷Ä'].sum()
            total_left_all = total_expenses_all - total_paid_all
            total_row = ['‚Äî'] * len(df_total.columns)

            if '‘æ’°’≠’Ω' in df_total.columns:
                total_row[df_total.columns.get_loc('‘æ’°’≠’Ω')] = total_expenses_all
            if '’é’≥’°÷Ä' in df_total.columns:
                total_row[df_total.columns.get_loc('’é’≥’°÷Ä')] = total_paid_all
            if '’Ñ’∂’°÷Å’∏÷Ä’§' in df_total.columns:
                total_row[df_total.columns.get_loc('’Ñ’∂’°÷Å’∏÷Ä’§')] = total_left_all
            df_total.loc['‘ª’ø’∏’£'] = total_row

            all_payments = []
            for (spreadsheet_id, sheet_name), records in sheets.items():
                payments = get_payments(display_name, spreadsheet_id, sheet_name)
                if payments:
                    for payment in payments:
                        payment_data = list(payment) + [spreadsheet_id, sheet_name]
                        all_payments.append(payment_data)

            output_total = BytesIO()
            with pd.ExcelWriter(output_total, engine='openpyxl') as writer:
                df_total.to_excel(writer, sheet_name='‘±’¥÷É’∏÷É', index=False)
                if all_payments:
                    df_all_payments = pd.DataFrame(all_payments, columns=['amount', 'date_from', 'date_to', 'comment', 'created_at', 'spreadsheet_id', 'sheet_name'])
                    df_all_payments.to_excel(writer, sheet_name='‘≤’∏’¨’∏÷Ä ’æ’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä’®', index=False)
                else:
                    empty_all_payments = pd.DataFrame(columns=['amount', 'date_from', 'date_to', 'comment', 'created_at', 'spreadsheet_id', 'sheet_name'])
                    empty_all_payments.to_excel(writer, sheet_name='‘≤’∏’¨’∏÷Ä ’æ’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä’®', index=False)

            output_total.seek(0)

            await update.callback_query.message.reply_document(
                document=output_total,
                filename=f"{display_name}_‘∏’Ü‘¥’Ä‘±’Ü’à’í’ê_’∞’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂.xlsx",
                caption=(
                    f"üìä <b>‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’∞’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂ {display_name}-’´ ’∞’°’¥’°÷Ä</b>\n\n"
                    f"üí∞ ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’Æ’°’≠’Ω: {total_expenses_all:,.2f} ’§÷Ä’°’¥\n"
                    f"üíµ ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’æ’≥’°÷Ä: {total_paid_all:,.2f} ’§÷Ä’°’¥\n"
                    f"üí∏ ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’¥’∂’°÷Å’∏÷Ä’§: {total_left_all:,.2f} ’§÷Ä’°’¥\n\n"
                    f"üìã ‘π’•÷Ä’©’´’Ø’∂’•÷Ä’´ ÷Ñ’°’∂’°’Ø: {len(sheets)}"
                ),
                parse_mode="HTML"
            )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        user_id = update.effective_user.id
        back_button = InlineKeyboardButton("‚¨ÖÔ∏è ’Ä’•’ø", callback_data=f"pay_user_{display_name}" if user_id in ADMIN_IDS else "back_to_menu")
        keyboard = [[back_button]]
        await update.callback_query.edit_message_text(
            f"‚úÖ ’Ä’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’® ’∏÷Ç’≤’°÷Ä’Ø’æ’°’Æ ’•’∂ {display_name}-’´ ’∞’°’¥’°÷Ä",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        await send_to_log_chat(context, f"’ç’ø’•’≤’Æ’æ’•’¨ ’•’∂ ’æ’≥’°÷Ä’°’µ’´’∂ ’∞’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä {display_name}-’´ ’∞’°’¥’°÷Ä")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è {display_name}: {e}")
        user_id = update.effective_user.id
        back_button = InlineKeyboardButton("‚¨ÖÔ∏è ’Ä’•’ø", callback_data=f"pay_user_{display_name}" if user_id in ADMIN_IDS else "back_to_menu")
        keyboard = [[back_button]]
        await update.callback_query.edit_message_text(
            f"‚ùå ’Ä’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂ ’Ω’ø’•’≤’Æ’•’¨’∏÷Ç ’Ω’≠’°’¨: {e}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def cancel_payment(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    user_id = update.effective_user.id
    context.user_data.clear()
    
    await update.message.reply_text(
        "‚ùå ’é’≥’°÷Ä’¥’°’∂ ’°’æ’•’¨’°÷Å’∏÷Ç’¥’® ’π’•’≤’°÷Ä’Ø’æ’°’Æ ’ß:",
        reply_markup=create_main_menu(user_id)
    )
    
    return ConversationHandler.END
