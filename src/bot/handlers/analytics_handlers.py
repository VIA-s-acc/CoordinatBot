"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO
import pandas as pd

from ...config.settings import ADMIN_IDS
from ...database.database_manager import get_all_records, get_payments
from ...utils.config_utils import load_users

logger = logging.getLogger(__name__)

async def generate_analytics_report(update: Update, context: CallbackContext):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        records = get_all_records()
        users = load_users()
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(records)
        df['date'] = pd.to_datetime(df['date'], errors='coerce', dayfirst=True)
        df = df.dropna(subset=['date'])
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
        df_monthly = df.groupby([df['date'].dt.to_period('M'), 'supplier'])['amount'].sum().reset_index()
        df_monthly['date'] = df_monthly['date'].astype(str)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        fig, axes = plt.subplots(2, 2, figsize=(15, 12))
        
        # 1. –†–∞—Å—Ö–æ–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_expenses = df.groupby(df['date'].dt.to_period('M'))['amount'].sum()
        axes[0, 0].bar(range(len(monthly_expenses)), monthly_expenses.values)
        axes[0, 0].set_title('–†–∞—Å—Ö–æ–¥—ã –ø–æ –º–µ—Å—è—Ü–∞–º')
        axes[0, 0].set_xlabel('–ú–µ—Å—è—Ü')
        axes[0, 0].set_ylabel('–°—É–º–º–∞ (–¥—Ä–∞–º)')
        
        # 2. –¢–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º
        top_employees = df.groupby('supplier')['amount'].sum().sort_values(ascending=False).head(10)
        axes[0, 1].barh(range(len(top_employees)), top_employees.values)
        axes[0, 1].set_title('–¢–æ–ø 10 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º')
        axes[0, 1].set_xlabel('–°—É–º–º–∞ (–¥—Ä–∞–º)')
        axes[0, 1].set_yticks(range(len(top_employees)))
        axes[0, 1].set_yticklabels(top_employees.index)
        
        # 3. –î–∏–Ω–∞–º–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –¥–Ω—è–º
        daily_expenses = df.groupby(df['date'].dt.date)['amount'].sum()
        axes[1, 0].plot(daily_expenses.index, daily_expenses.values)
        axes[1, 0].set_title('–î–∏–Ω–∞–º–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤')
        axes[1, 0].set_xlabel('–î–∞—Ç–∞')
        axes[1, 0].set_ylabel('–°—É–º–º–∞ (–¥—Ä–∞–º)')
        
        # 4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º
        direction_expenses = df.groupby('direction')['amount'].sum()
        axes[1, 1].pie(direction_expenses.values, labels=direction_expenses.index, autopct='%1.1f%%')
        axes[1, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        buffer = BytesIO()
        plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
        buffer.seek(0)
        plt.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        await query.message.reply_photo(
            photo=buffer,
            caption="üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )

async def generate_payment_analytics(update: Update, context: CallbackContext):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    try:
        users = load_users()
        analytics_data = []
        
        for user_id, user_data in users.items():
            display_name = user_data.get('display_name')
            if not display_name:
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã
            records = get_all_records()
            total_expenses = sum(r['amount'] for r in records if r['supplier'] == display_name)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏
            payments = get_payments(display_name)
            total_paid = sum(p[0] for p in payments) if payments else 0
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            debt = total_expenses - total_paid
            payment_rate = (total_paid / total_expenses * 100) if total_expenses > 0 else 0
            
            analytics_data.append({
                'name': display_name,
                'expenses': total_expenses,
                'paid': total_paid,
                'debt': debt,
                'payment_rate': payment_rate
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–æ–ª–≥—É
        analytics_data.sort(key=lambda x: x['debt'], reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report_text = "üí∞ <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º</b>\n\n"
        
        for i, data in enumerate(analytics_data[:15], 1):
            report_text += (
                f"{i}. <b>{data['name']}</b>\n"
                f"   üí∏ –†–∞—Å—Ö–æ–¥—ã: {data['expenses']:,.2f} ’§÷Ä’°’¥\n"
                f"   üíµ –í—ã–ø–ª–∞—á–µ–Ω–æ: {data['paid']:,.2f} ’§÷Ä’°’¥\n"
                f"   üí∞ –î–æ–ª–≥: {data['debt']:,.2f} ’§÷Ä’°’¥\n"
                f"   üìä –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–ª–∞—Ç: {data['payment_rate']:.1f}%\n\n"
            )
        
        await query.edit_message_text(
            report_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="analytics_charts")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )

async def generate_trends_report(update: Update, context: CallbackContext):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ç—Ä–µ–Ω–¥–∞–º"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    try:
        records = get_all_records()
        df = pd.DataFrame(records)
        df['date'] = pd.to_datetime(df['date'], errors='coerce', dayfirst=True)
        df = df.dropna(subset=['date'])
        
        # –ê–Ω–∞–ª–∏–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        today = datetime.now()
        last_30_days = today - timedelta(days=30)
        df_recent = df[df['date'] >= last_30_days]
        
        # –ê–Ω–∞–ª–∏–∑ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 30 –¥–Ω–µ–π
        prev_30_days = today - timedelta(days=60)
        df_prev = df[(df['date'] >= prev_30_days) & (df['date'] < last_30_days)]
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        recent_total = df_recent['amount'].sum()
        prev_total = df_prev['amount'].sum()
        
        change = ((recent_total - prev_total) / prev_total * 100) if prev_total > 0 else 0
        change_emoji = "üìà" if change > 0 else "üìâ" if change < 0 else "‚û°Ô∏è"
        
        # –¢–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        top_recent = df_recent.groupby('supplier')['amount'].sum().sort_values(ascending=False).head(5)
        
        # –°–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        top_directions = df_recent.groupby('direction')['amount'].sum().sort_values(ascending=False).head(5)
        
        report_text = (
            f"üìä <b>–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)</b>\n\n"
            f"üí∞ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {recent_total:,.2f} ’§÷Ä’°’¥\n"
            f"{change_emoji} –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {change:+.1f}%\n\n"
            f"üèÜ <b>–¢–æ–ø —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</b>\n"
        )
        
        for i, (name, amount) in enumerate(top_recent.items(), 1):
            report_text += f"{i}. {name}: {amount:,.2f} ’§÷Ä’°’¥\n"
        
        report_text += "\nüéØ <b>–¢–æ–ø –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π:</b>\n"
        for i, (direction, amount) in enumerate(top_directions.items(), 1):
            report_text += f"{i}. {direction}: {amount:,.2f} ’§÷Ä’°’¥\n"
        
        await query.edit_message_text(
            report_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )
