"""
–°–∏—Å—Ç–µ–º–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
"""
import logging
import json
from datetime import datetime
from io import BytesIO
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
import pandas as pd

from ...config.settings import ADMIN_IDS
from ...utils.config_utils import load_users
from ...database.database_manager import get_all_records, get_payments

logger = logging.getLogger(__name__)

async def export_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    keyboard = [
        [InlineKeyboardButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π", callback_data="export_all_records")],
        [InlineKeyboardButton("üí∞ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="export_all_payments")],
        [InlineKeyboardButton("üë• –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="export_users")],
        [InlineKeyboardButton("üìã –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç", callback_data="export_full")],
        [InlineKeyboardButton("üìÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥", callback_data="export_period")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    
    await query.edit_message_text(
        "üì§ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def export_all_records(update: Update, context: CallbackContext):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    try:
        records = get_all_records()
        
        if not records:
            await query.answer("‚ùå –ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(records)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–í—Å–µ –∑–∞–ø–∏—Å–∏', index=False)
        output.seek(0)
        
        filename = f"all_records_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        await query.message.reply_document(
            document=output,
            filename=filename,
            caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π ({len(records)} –∑–∞–ø–∏—Å–µ–π)",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="export_menu")]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–ø–∏—Å–µ–π: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")

async def export_all_payments(update: Update, context: CallbackContext):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    try:
        users = load_users()
        all_payments = []
        
        for uid, user_data in users.items():
            display_name = user_data.get('display_name')
            if not display_name:
                continue
            
            payments = get_payments(display_name)
            if payments:
                for payment in payments:
                    payment_data = {
                        'display_name': display_name,
                        'amount': payment[0],
                        'date_from': payment[1],
                        'date_to': payment[2],
                        'comment': payment[3],
                        'created_at': payment[4],
                        'spreadsheet_id': payment[5] if len(payment) > 5 else '',
                        'sheet_name': payment[6] if len(payment) > 6 else ''
                    }
                    all_payments.append(payment_data)
        
        if not all_payments:
            await query.answer("‚ùå –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(all_payments)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏', index=False)
        output.seek(0)
        
        filename = f"all_payments_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        await query.message.reply_document(
            document=output,
            filename=filename,
            caption=f"üí∞ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π ({len(all_payments)} –ø–ª–∞—Ç–µ–∂–µ–π)",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="export_menu")]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")

async def export_users_data(update: Update, context: CallbackContext):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    try:
        users = load_users()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = []
        for uid, user_data in users.items():
            export_data.append({
                'user_id': uid,
                'display_name': user_data.get('display_name', ''),
                'daily_limit': user_data.get('daily_limit', ''),
                'weekly_limit': user_data.get('weekly_limit', ''),
                'category': user_data.get('category', ''),
                'notifications': user_data.get('notifications', True),
                'is_allowed': user_data.get('is_allowed', False),
                'created_at': user_data.get('created_at', ''),
                'last_activity': user_data.get('last_activity', '')
            })
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
        backup_data = {
            'timestamp': datetime.now().isoformat(),
            'users_count': len(users),
            'users': export_data
        }
        
        backup_json = json.dumps(backup_data, indent=2, ensure_ascii=False)
        
        buffer = BytesIO(backup_json.encode('utf-8'))
        filename = f"users_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        await query.message.reply_document(
            document=buffer,
            filename=filename,
            caption=f"üë• –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ({len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="export_menu")]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞")

async def export_full_backup(update: Update, context: CallbackContext):
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        records = get_all_records()
        users = load_users()
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
        all_payments = []
        for uid, user_data in users.items():
            display_name = user_data.get('display_name')
            if display_name:
                payments = get_payments(display_name)
                if payments:
                    for payment in payments:
                        all_payments.append({
                            'display_name': display_name,
                            'amount': payment[0],
                            'date_from': payment[1],
                            'date_to': payment[2],
                            'comment': payment[3],
                            'created_at': payment[4],
                            'spreadsheet_id': payment[5] if len(payment) > 5 else '',
                            'sheet_name': payment[6] if len(payment) > 6 else ''
                        })
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø
        backup_data = {
            'timestamp': datetime.now().isoformat(),
            'version': '1.0',
            'statistics': {
                'records_count': len(records),
                'users_count': len(users),
                'payments_count': len(all_payments)
            },
            'records': records,
            'users': users,
            'payments': all_payments
        }
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
        output = BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            # –õ–∏—Å—Ç —Å –∑–∞–ø–∏—Å—è–º–∏
            if records:
                df_records = pd.DataFrame(records)
                df_records.to_excel(writer, sheet_name='–ó–∞–ø–∏—Å–∏', index=False)
            
            # –õ–∏—Å—Ç —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
            if all_payments:
                df_payments = pd.DataFrame(all_payments)
                df_payments.to_excel(writer, sheet_name='–ü–ª–∞—Ç–µ–∂–∏', index=False)
            
            # –õ–∏—Å—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            users_data = []
            for uid, user_data in users.items():
                users_data.append({
                    'user_id': uid,
                    'display_name': user_data.get('display_name', ''),
                    'daily_limit': user_data.get('daily_limit', ''),
                    'is_allowed': user_data.get('is_allowed', False)
                })
            
            if users_data:
                df_users = pd.DataFrame(users_data)
                df_users.to_excel(writer, sheet_name='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', index=False)
            
            # –õ–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_data = [
                ['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
                ['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
                ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π', len(records)],
                ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', len(users)],
                ['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π', len(all_payments)]
            ]
            
            df_stats = pd.DataFrame(stats_data[1:], columns=stats_data[0])
            df_stats.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
        
        output.seek(0)
        
        filename = f"full_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        await query.message.reply_document(
            document=output,
            filename=filename,
            caption=(
                f"üíæ <b>–ü–æ–ª–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è</b>\n\n"
                f"üìä –ó–∞–ø–∏—Å–µ–π: {len(records)}\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                f"üí∞ –ü–ª–∞—Ç–µ–∂–µ–π: {len(all_payments)}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            ),
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="export_menu")]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞")

async def schedule_automated_backup(context: CallbackContext):
    """–°–æ–∑–¥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        records = get_all_records()
        users = load_users()
        
        # –°–æ–∑–¥–∞–µ–º JSON –±—ç–∫–∞–ø
        backup_data = {
            'timestamp': datetime.now().isoformat(),
            'type': 'automated',
            'records': records,
            'users': users
        }
        
        backup_json = json.dumps(backup_data, indent=2, ensure_ascii=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
        filename = f"auto_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        buffer = BytesIO(backup_json.encode('utf-8'))
        
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_document(
                    chat_id=admin_id,
                    document=buffer,
                    filename=filename,
                    caption=f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è\nüìÖ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
                )
                buffer.seek(0)  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤—Ç–æ–±—ç–∫–∞–ø–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞: {e}")

async def cleanup_old_data(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if user_id not in ADMIN_IDS:
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    keyboard = [
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 1 –≥–æ–¥–∞", callback_data="cleanup_records_1y")],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 6 –º–µ—Å—è—Ü–µ–≤", callback_data="cleanup_records_6m")],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ —Å—Ç–∞—Ä—à–µ 1 –≥–æ–¥–∞", callback_data="cleanup_payments_1y")],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="cleanup_inactive_users")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_menu")]
    ]
    
    await query.edit_message_text(
        "üßπ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
