"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
import logging
import json
import os
from datetime import datetime
from telegram import Update
from telegram.ext import CallbackContext
from ...config.settings import ADMIN_IDS
from ...utils.config_utils import (
    add_allowed_user, remove_allowed_user, 
    load_allowed_users, update_user_settings,
    set_log_chat, set_report_settings
)
from ...database.database_manager import backup_db_to_dict
from ...utils.config_utils import (
    set_log_chat, set_report_settings,
    add_allowed_user, remove_allowed_user, load_allowed_users,
    load_users, save_users, update_user_settings
)
from ...database.database_manager import backup_db_to_dict

logger = logging.getLogger(__name__)

async def set_log_command(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∫–∞–∫ –ª–æ–≥-—á–∞—Ç"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    chat_id = update.effective_chat.id
    set_log_chat(chat_id)
    
    await update.message.reply_text(
        f"‚úÖ ‘∏’∂’©’°÷Å’´’Ø ’¶÷Ä’∏÷Ç’µ÷Å’® ’Ω’°’∞’¥’°’∂’æ’°’Æ ’ß ’∏÷Ä’∫’•’Ω ’£÷Ä’°’∂÷Å’°’¥’°’ø’µ’°’∂:\n"
        f"Chat ID: <code>{chat_id}</code>",
        parse_mode="HTML"
    )

async def set_sheet_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Google Sheet - –∑–∞–≥–ª—É—à–∫–∞"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    await update.message.reply_text("üîß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ")

async def set_report_command(update: Update, context: CallbackContext):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —á–∞—Ç–∞"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            "üìä ’Ä’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’Ø’°÷Ä’£’°’æ’∏÷Ä’∏÷Ç’¥:\n"
            "’ï’£’ø’°’£’∏÷Ä’Æ’•÷Ñ: <code>/set_report [chat_id] [chat_name]</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        report_chat_id = int(args[0])
        chat_name = ' '.join(args[1:])
        
        settings = {
            'chat_id': report_chat_id,
            'name': chat_name,
            'enabled': True
        }
        
        set_report_settings(report_chat_id, settings)
        
        await update.message.reply_text(
            f"‚úÖ ’Ä’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’Ø’°÷Ä’£’°’æ’∏÷Ä’∏÷Ç’¥ ’∫’°’∞’∫’°’∂’æ’°’Æ ’ß:\n"
            f"Chat ID: <code>{report_chat_id}</code>\n"
            f"‘±’∂’∏÷Ç’∂’®: {chat_name}",
            parse_mode="HTML"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå ’ç’≠’°’¨ chat_id ’±÷á’°’π’°÷É: ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’©’´’æ")

async def initialize_sheets_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets - –∑–∞–≥–ª—É—à–∫–∞"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    await update.message.reply_text("üîß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ")

async def allow_user_command(update: Update, context: CallbackContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    args = context.args
    if not args:
        await update.message.reply_text(
            "üë• ’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤’´’∂ ’©’∏÷Ç’µ’¨’°’ø÷Ä’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ÷Ö’£’ø’°’£’∏÷Ä’Æ’•÷Ñ:\n"
            "<code>/allow_user [user_id]</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        new_user_id = int(args[0])
        add_allowed_user(new_user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ users.json –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        users = load_users()
        user_id_str = str(new_user_id)
        if user_id_str not in users:
            users[user_id_str] = {
                'active_spreadsheet_id': None,
                'active_sheet_name': None,
                'name': f"User {new_user_id}",
                'display_name': None
            }
            save_users(users)
        
        await update.message.reply_text(
            f"‚úÖ ’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤ ID <code>{new_user_id}</code> ’°’æ’•’¨’°÷Å’æ’°’Æ ’ß ’©’∏÷Ç’µ’¨’°’ø÷Ä’•’¨’´ ÷Å’∏÷Ç÷Å’°’Ø’∏÷Ç’¥:",
            parse_mode="HTML"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå ’ç’≠’°’¨ user_id ’±÷á’°’π’°÷É: ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’©’´’æ")

async def disallow_user_command(update: Update, context: CallbackContext):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    args = context.args
    if not args:
        await update.message.reply_text(
            "üë• ’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤’´’∂ ’°÷Ä’£’•’¨’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ÷Ö’£’ø’°’£’∏÷Ä’Æ’•÷Ñ:\n"
            "<code>/disallow_user [user_id]</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        user_id_to_remove = int(args[0])
        remove_allowed_user(user_id_to_remove)
        await update.message.reply_text(
            f"‚úÖ ’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤ ID <code>{user_id_to_remove}</code> ’∞’•’º’°÷Å’æ’°’Æ ’ß ’©’∏÷Ç’µ’¨’°’ø÷Ä’•’¨’´ ÷Å’∏÷Ç÷Å’°’Ø’´÷Å:",
            parse_mode="HTML"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå ’ç’≠’°’¨ user_id ’±÷á’°’π’°÷É: ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’©’´’æ")

async def allowed_users_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    allowed = load_allowed_users()
    users = load_users()
    
    if not allowed:
        await update.message.reply_text("‚ÑπÔ∏è ‘π’∏÷Ç’µ’¨’°’ø÷Ä’•’¨’´ ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏’≤’∂’•÷Ä ’π’Ø’°’∂:")
        return
    
    text = "üë• ‘π’∏÷Ç’µ’¨’°’ø÷Ä’•’¨’´ ÷Ö’£’ø’°’£’∏÷Ä’Æ’∏’≤’∂’•÷Ä’´ ÷Å’∏÷Ç÷Å’°’Ø:\n\n"
    for idx, user_id in enumerate(allowed, 1):
        user_info = users.get(str(user_id), {})
        user_name = user_info.get('name', '‘±’∂’∞’°’µ’ø')
        display_name = user_info.get('display_name', '’â’Ø’°')
        text += f"{idx}. ID: <code>{user_id}</code>\n"
        text += f"   üë§ ’è÷Ä’æ’°’Æ ’°’∂’∏÷Ç’∂: <b>{display_name}</b>\n"
        text += f"   üë§ Telegram ’°’∂’∏÷Ç’∂: {user_name}\n\n"
    
    await update.message.reply_text(text, parse_mode="HTML")

async def set_user_name_command(update: Update, context: CallbackContext):
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            "üë§ ’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤’´’∂ ’°’∂’∏÷Ç’∂ ’∂’∑’°’∂’°’Ø’•’¨’∏÷Ç ’∞’°’¥’°÷Ä ÷Ö’£’ø’°’£’∏÷Ä’Æ’•÷Ñ:\n"
            "<code>/set_user_name [user_id] [’°’∂’∏÷Ç’∂]</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        target_user_id = int(args[0])
        display_name = ' '.join(args[1:])
        
        update_user_settings(target_user_id, {'display_name': display_name})
        
        await update.message.reply_text(
            f"‚úÖ ’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤ ID <code>{target_user_id}</code> ’Ω’°’∞’¥’°’∂’æ’°’Æ ’ß ’∂’∏÷Ä ’°’∂’∏÷Ç’∂’®: <b>{display_name}</b>",
            parse_mode="HTML"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå ’ç’≠’°’¨ user_id ’±÷á’°’π’°÷É: ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’©’´’æ")

async def sync_sheets_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets - –∑–∞–≥–ª—É—à–∫–∞"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    await update.message.reply_text("üîß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ")

async def my_report_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ - –∑–∞–≥–ª—É—à–∫–∞"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    await update.message.reply_text("üîß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ")

async def export_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    try:
        backup_data = backup_db_to_dict()
        
        if not backup_data:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.")
            return
        
        # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
        filename = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(backup_data, f, indent=2, ensure_ascii=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(filename, 'rb') as f:
            await update.message.reply_document(
                document=f,
                filename=filename,
                caption=f"üì§ ’è’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’¶’°’µ’´ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è\n"
                       f"üìä ‘≥÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä: {backup_data['stats']['total_records']}\n"
                       f"üí∞ ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’£’∏÷Ç’¥’°÷Ä: {backup_data['stats']['total_amount']:,.2f}\n"
                       f"üìÖ ’ç’ø’•’≤’Æ’¥’°’∂ ’°’¥’Ω’°’©’´’æ: {backup_data['backup_date']}"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filename)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå ‘±÷Ä’ø’°’∞’°’∂’¥’°’∂ ’Ω’≠’°’¨: {e}")

async def clean_duplicates_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå ‘¥’∏÷Ç÷Ñ ’π’∏÷Ç’∂’•÷Ñ ’°’µ’Ω ’∞÷Ä’°’¥’°’∂’® ’Ø’°’ø’°÷Ä’•’¨’∏÷Ç ’©’∏÷Ç’µ’¨’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂:")
        return
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        from ...database.database_manager import remove_duplicate_records
        
        await update.message.reply_text("üîç ’à÷Ç’Ω’∏÷Ç’¥’∂’°’Ω’´÷Ä’∏÷Ç’¥ ’•’∂ ’ø’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’¶’°’µ’∏÷Ç’¥ ’Ø÷Ä’Ø’∂’æ’∏’≤ ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä’®...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        removed_count = remove_duplicate_records()
        
        if removed_count > 0:
            await update.message.reply_text(
                f"‚úÖ ’è’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’¶’°’µ’´ ’¥’°÷Ñ÷Ä’∏÷Ç’¥’® ’°’æ’°÷Ä’ø’æ’°’Æ ’ß:\n"
                f"üóëÔ∏è ’ã’∂’ª’æ’°’Æ ’Ø÷Ä’Ø’∂÷Ö÷Ä’´’∂’°’Ø’∂’•÷Ä: {removed_count}\n"
                f"üìä ’è’æ’µ’°’¨’∂’•÷Ä’´ ’∫’°’∞’∏÷Å’® ’°’µ’™’¥ ’°’æ’•’¨’´ ’¥’°÷Ñ’∏÷Ç÷Ä ’ß:"
            )
        else:
            await update.message.reply_text(
                f"‚úÖ ’è’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’¶’°’µ’∏÷Ç’¥ ’Ø÷Ä’Ø’∂÷Ö÷Ä’´’∂’°’Ø’∂’•÷Ä ’π’•’∂ ’£’ø’∂’æ’•’¨:\n"
                f"üìä ’è’æ’µ’°’¨’∂’•÷Ä’´ ’∫’°’∞’∏÷Å’® ’°÷Ä’§’•’∂ ’¥’°÷Ñ’∏÷Ç÷Ä ’ß:"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {e}")
        await update.message.reply_text(f"‚ùå ‘ø÷Ä’Ø’∂÷Ö÷Ä’´’∂’°’Ø’∂’•÷Ä’´ ’¥’°÷Ñ÷Ä’¥’°’∂ ’Ω’≠’°’¨: {e}")
