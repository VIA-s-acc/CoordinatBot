"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∏ callback query
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler

from ..keyboards.inline_keyboards import (
    create_main_menu, create_workers_menu, create_payment_menu, 
    create_back_to_menu_keyboard, create_add_record_menu,
    create_edit_menu
)
from ..states.conversation_states import SUPPLIER_CHOICE, DIRECTION, SUPPLIER_MANUAL
from ...utils.config_utils import is_user_allowed, get_user_settings, update_user_settings
from ...database.database_manager import get_db_stats, get_record_from_db
from ...google_integration.sheets_manager import get_all_spreadsheets, get_spreadsheet_info, get_worksheets_info
from ...config.settings import ADMIN_IDS

from .payment_handlers import pay_menu_handler, pay_user_handler, send_payment_report

logger = logging.getLogger(__name__)

async def button_handler(update: Update, context: CallbackContext):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not is_user_allowed(user_id):
        await query.answer("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
        return
    
    await query.answer()
    
    data = query.data
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "back_to_menu" or data == "main_menu":
        await query.edit_message_text(
            "üìã ’Ä’´’¥’∂’°’Ø’°’∂ ’®’∂’ø÷Ä’°÷Å’°’∂’Ø:",
            reply_markup=create_main_menu(user_id)
        )
    
    # –ú–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    elif data == "add_record_menu":
        await query.edit_message_text(
            "‘∏’∂’ø÷Ä’•÷Ñ ’£’∏÷Ä’Æ’∏’≤’∏÷Ç’©’µ’∏÷Ç’∂’®’ù",
            reply_markup=create_add_record_menu()
        )
    
    # –°—Ç–∞—Ç—É—Å
    elif data == "show_status" or data == "status":
        await show_status(update, context)
        return

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    elif data == "show_stats" or data == "stats":
        await show_stats(update, context)
        return
    
    # –ú–µ–Ω—é —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    elif data == "workers_menu" or data == "pay_menu":
        if user_id in ADMIN_IDS:
            await query.edit_message_text(
                "üë• ‘∏’∂’ø÷Ä’•÷Ñ ’°’∑’≠’°’ø’°’Ø÷Å’´’∂:",
                reply_markup=create_workers_menu()
            )
        else:
            await query.edit_message_text("‚ùå ’Ñ’∏÷Ç’ø÷Ñ’∂ ’°÷Ä’£’•’¨’æ’°’Æ ’ß")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
    elif data.startswith("pay_user_"):
        display_name = data.replace("pay_user_", "")
        await query.edit_message_text(
            f"üë§ ‘±’∑’≠’°’ø’°’Ø’´÷Å: {display_name}",
            reply_markup=create_payment_menu(display_name)
        )
    
    # –í—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã
    elif data == "select_spreadsheet":
        await select_spreadsheet_menu(update, context)
    
    elif data.startswith("spreadsheet_"):
        await select_spreadsheet(update, context)
    
    elif data.startswith("final_sheet_"):
        await select_final_sheet(update, context)
    
    # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞
    elif data == "select_sheet_menu" or data == "select_sheet":
        await select_sheet_menu(update, context)
    
    elif data.startswith("sheet_"):
        await select_sheet(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
    elif data == "use_my_name":
        return await use_my_name(update, context)
    
    elif data == "use_firm_name":
        return await use_firm_name(update, context)
    
    elif data == "manual_input":
        return await manual_input(update, context)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π
    elif data.startswith("edit_"):
        from .edit_handlers import handle_edit_button
        return await handle_edit_button(update, context)
    
    elif data.startswith("delete_"):
        from .edit_handlers import handle_delete_button
        return await handle_delete_button(update, context)
    
    elif data.startswith("confirm_delete_"):
        from .edit_handlers import confirm_delete
        return await confirm_delete(update, context)
    
    elif data.startswith("cancel_edit_"):
        record_id = data.replace("cancel_edit_", "")
        keyboard = [[InlineKeyboardButton("‚úèÔ∏è ‘Ω’¥’¢’°’£÷Ä’•’¨", callback_data=f"edit_record_{record_id}")]]
        await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(keyboard))
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
    elif data.startswith("generate_report_"):
        display_name = data.replace("generate_report_", "")
        await generate_user_report(update, context, display_name)
    
    # –ü–ª–∞—Ç–µ–∂–∏
    elif data == "pay_menu" and user_id in ADMIN_IDS:
        await pay_menu_handler(update, context)
        return
    
    elif data.startswith("pay_user_") and user_id in ADMIN_IDS:
        await pay_user_handler(update, context)
        return
        
    elif data.startswith("get_payment_report_") and user_id in ADMIN_IDS:
        display_name = data.replace("get_payment_report_", "")
        await send_payment_report(update, context, display_name)
        return
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    elif data == "my_payments":
        await show_my_payments(update, context)
        return
    
    else:
        # Callback'–∏ add_payment_ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è ConversationHandler'–æ–º
        if not data.startswith("add_payment_"):
            logger.warning(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback: {data}")
        # –î–ª—è add_payment_ callback'–æ–≤ –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º, –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ ConversationHandler

async def show_status(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    if not is_user_allowed(user_id):
        return
    
    user_settings = get_user_settings(user_id)
    
    spreadsheet_id = user_settings.get('active_spreadsheet_id')
    sheet_name = user_settings.get('active_sheet_name')
    
    status_text = "üìä ‘∏’∂’©’°÷Å’´’Ø ’Ø’°÷Ä’£’°’æ’´’≥’°’Ø:\n\n"
    
    if spreadsheet_id:
        status_text += f"‚úÖ ’Ñ’´’°÷Å’æ’°’Æ ’°’≤’µ’∏÷Ç’Ω’°’Ø: <code>{spreadsheet_id}</code>\n"
        if sheet_name:
            status_text += f"üìã ‘±’Ø’ø’´’æ ’©’•÷Ä’©’´’Ø: <code>{sheet_name}</code>\n"
        else:
            status_text += "‚ö†Ô∏è ‘π’•÷Ä’©’´’Ø’® ’π’´ ’®’∂’ø÷Ä’æ’•’¨\n"
    else:
        status_text += "‚ùå ‘±’≤’µ’∏÷Ç’Ω’°’Ø’® ’π’´ ’¥’´’°÷Å’æ’°’Æ\n"
    
    display_name = user_settings.get('display_name')
    if display_name:
        status_text += f"üë§ ’Å’•÷Ä ’°’∂’∏÷Ç’∂’®: <b>{display_name}</b>\n"
    else:
        status_text += "üë§ ’Å’•÷Ä ’°’∂’∏÷Ç’∂’®: <b>’ç’°’∞’¥’°’∂’æ’°’Æ ’π’ß</b>\n"
    
    status_text += "\nü§ñ ‘≤’∏’ø’® ’°’∑’≠’°’ø’∏÷Ç’¥ ’ß\n"
    status_text += "üìä ’è’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’¶’°’µ’´ ’Ø’°’∫’®’ù ’°’Ø’ø’´’æ\n"
    status_text += "üîó Google Sheets ’Ø’°’∫’®’ù ’°’Ø’ø’´’æ\n"
    
    await query.edit_message_text(
        status_text, 
        parse_mode="HTML",
        reply_markup=create_back_to_menu_keyboard()
    )

async def show_stats(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    query = update.callback_query
    
    stats = get_db_stats()
    if stats:
        stats_text = (
            f"üìà ’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂:\n\n"
            f"üìù ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä: {stats['total_records']}\n"
            f"üí∞ ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’£’∏÷Ç’¥’°÷Ä: {stats['total_amount']:,.2f} ’§÷Ä’°’¥\n"
            f"üìÖ ’é’•÷Ä’ª’´’∂ 30 ÷Ö÷Ä’∏÷Ç’¥: {stats.get('recent_records', 0)} ’£÷Ä’°’º’∏÷Ç’¥"
        )
    else:
        stats_text = "‚ùå ’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ’Ω’ø’°’∂’°’¨’∏÷Ç ’Ω’≠’°’¨:"
    
    await query.edit_message_text(
        stats_text,
        reply_markup=create_back_to_menu_keyboard()
    )

async def select_spreadsheet_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    try:
        spreadsheets = get_all_spreadsheets()
        
        if not spreadsheets:
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=create_back_to_menu_keyboard()
            )
            return
        
        keyboard = []
        for spreadsheet in spreadsheets[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            title = spreadsheet.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:30]
            keyboard.append([InlineKeyboardButton(
                f"üìä {title}", 
                callback_data=f"spreadsheet_{spreadsheet['id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è ’Ä’•’ø", callback_data="back_to_menu")])
        
        await query.edit_message_text(
            "üìä ‘∏’∂’ø÷Ä’•÷Ñ ’°’≤’µ’∏÷Ç’Ω’°’Ø’®:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå ’á’≠’°’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø’∂’•÷Ä’´ ÷Å’°’∂’Ø’® ’Ω’ø’°’∂’°’¨’´’Ω: {e}",
            reply_markup=create_back_to_menu_keyboard()
        )

async def select_spreadsheet(update: Update, context: CallbackContext):
    """–í—ã–±–∏—Ä–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    spreadsheet_id = query.data.replace("spreadsheet_", "")
    
    try:
        sheets_info, spreadsheet_title = get_worksheets_info(spreadsheet_id)
        
        if not sheets_info:
            await query.edit_message_text(
                "‚ùå ’Ä’∂’°÷Ä’°’æ’∏÷Ä ’π’ß ’¥’∏÷Ç’ø÷Ñ ’£’∏÷Ä’Æ’•’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø",
                reply_markup=create_back_to_menu_keyboard()
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        update_user_settings(user_id, {'active_spreadsheet_id': spreadsheet_id})
        
        keyboard = []
        for sheet in sheets_info:
            keyboard.append([InlineKeyboardButton(
                f"üìã {sheet['title']}", 
                callback_data=f"final_sheet_{sheet['title']}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è ’Ä’•’ø", callback_data="select_spreadsheet")])
        
        await query.edit_message_text(
            f"‚úÖ ‘∏’∂’ø÷Ä’æ’°’Æ ’°’≤’µ’∏÷Ç’Ω’°’Ø: <b>{spreadsheet_title}</b>\n\n"
            f"üìã ‘∏’∂’ø÷Ä’•÷Ñ ’©’•÷Ä’©’´’Ø’®:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå ’á’≠’°’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø’´’∂ ’¥’´’°’∂’°’¨’´’Ω: {e}",
            reply_markup=create_back_to_menu_keyboard()
        )

async def select_final_sheet(update: Update, context: CallbackContext):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –ª–∏—Å—Ç"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    sheet_name = query.data.replace("final_sheet_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª–∏—Å—Ç
    update_user_settings(user_id, {'active_sheet_name': sheet_name})
    
    await query.edit_message_text(
        f"‚úÖ ‘∏’∂’ø÷Ä’æ’°’Æ ’©’•÷Ä’©’´’Ø: <b>{sheet_name}</b>\n\n"
        f"‘±’µ’™’¥ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä ’°’æ’•’¨’°÷Å’∂’•’¨:",
        parse_mode="HTML",
        reply_markup=create_main_menu(user_id)
    )

async def select_sheet_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    user_settings = get_user_settings(user_id)
    spreadsheet_id = user_settings.get('active_spreadsheet_id')
    
    if not spreadsheet_id:
        await query.edit_message_text(
            "‚ùå ’Ü’°’≠ ’∫’•’ø÷Ñ ’ß ’®’∂’ø÷Ä’•’¨ ’°’≤’µ’∏÷Ç’Ω’°’Ø’®",
            reply_markup=create_back_to_menu_keyboard()
        )
        return
    
    try:
        sheets_info, spreadsheet_title = get_worksheets_info(spreadsheet_id)
        
        if not sheets_info:
            await query.edit_message_text(
                "‚ùå ‘±’≤’µ’∏÷Ç’Ω’°’Ø’∏÷Ç’¥ ’©’•÷Ä’©’´’Ø’∂’•÷Ä ’π’Ø’°’∂",
                reply_markup=create_back_to_menu_keyboard()
            )
            return
        
        keyboard = []
        for sheet in sheets_info:
            keyboard.append([InlineKeyboardButton(
                f"üìã {sheet['title']}", 
                callback_data=f"sheet_{sheet['title']}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è ’Ä’•’ø", callback_data="back_to_menu")])
        
        await query.edit_message_text(
            f"üìã ‘∏’∂’ø÷Ä’•÷Ñ ’©’•÷Ä’©’´’Ø <b>{spreadsheet_title}</b> ’°’≤’µ’∏÷Ç’Ω’°’Ø’´÷Å:",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå ’á’≠’°’¨ ’©’•÷Ä’©’´’Ø’∂’•÷Ä’´ ÷Å’°’∂’Ø’® ’Ω’ø’°’∂’°’¨’´’Ω: {e}",
            reply_markup=create_back_to_menu_keyboard()
        )

async def select_sheet(update: Update, context: CallbackContext):
    """–í—ã–±–∏—Ä–∞–µ—Ç –ª–∏—Å—Ç"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    sheet_name = query.data.replace("sheet_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª–∏—Å—Ç
    update_user_settings(user_id, {'active_sheet_name': sheet_name})
    
    await query.edit_message_text(
        f"‚úÖ ‘∏’∂’ø÷Ä’æ’°’Æ ’©’•÷Ä’©’´’Ø: <b>{sheet_name}</b>\n\n"
        f"‘±’µ’™’¥ ’Ø’°÷Ä’∏’≤ ’•÷Ñ ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä ’°’æ’•’¨’°÷Å’∂’•’¨:",
        parse_mode="HTML",
        reply_markup=create_main_menu(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
async def use_my_name(update: Update, context: CallbackContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    user_settings = get_user_settings(user_id)
    display_name = user_settings.get('display_name')
    
    if not display_name:
        await query.edit_message_text("‚ùå ’Å’•÷Ä ’°’∂’∏÷Ç’∂’® ’π’´ ’Ω’°’∞’¥’°’∂’æ’°’Æ: ’ï’£’ø’°’£’∏÷Ä’Æ’æ’•’¨’∏÷Ç ’ß ’ñ’´÷Ä’¥’°’µ’´ ’°’∂’∏÷Ç’∂’®:")
        display_name = "’ñ"
    
    context.user_data['record']['supplier'] = display_name
    
    await query.edit_message_text(
        f"‚úÖ ’Ñ’°’ø’°’Ø’°÷Ä’°÷Ä: {display_name}\n\n"
        f"üß≠ ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂’®:"
    )
    
    return DIRECTION

async def use_firm_name(update: Update, context: CallbackContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º—è —Ñ–∏—Ä–º—ã –∫–∞–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    query = update.callback_query
    
    context.user_data['record']['supplier'] = "’ñ"
    
    await query.edit_message_text(
        f"‚úÖ ’Ñ’°’ø’°’Ø’°÷Ä’°÷Ä: ’ñ\n\n"
        f"üß≠ ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂’®:"
    )
    
    return DIRECTION

async def manual_input(update: Update, context: CallbackContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    query = update.callback_query
    
    await query.edit_message_text("üè™ ’Ñ’∏÷Ç’ø÷Ñ’°’£÷Ä’•÷Ñ ’¥’°’ø’°’Ø’°÷Ä’°÷Ä’´’∂:")
    
    return SUPPLIER_MANUAL

async def generate_user_report(update: Update, context: CallbackContext, display_name: str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    
    try:
        from ...database.database_manager import get_all_records
        from openpyxl import Workbook
        from io import BytesIO
        from datetime import datetime
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_records = get_all_records()
        user_records = [record for record in all_records if record.get('supplier') == display_name]
        
        if not user_records:
            await query.edit_message_text(
                f"üìä {display_name}-’´ ’∞’°’¥’°÷Ä ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä ’π’•’∂ ’£’ø’∂’æ’•’¨:",
                reply_markup=create_back_to_menu_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
        wb = Workbook()
        ws = wb.active
        ws.title = f"–û—Ç—á–µ—Ç {display_name}"
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = ['ID', '‘±’¥’Ω’°’©’´’æ', '’Ñ’°’ø’°’Ø’°÷Ä’°÷Ä', '’à÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂', '’Ü’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂', '‘≥’∏÷Ç’¥’°÷Ä', '‘π’•÷Ä’©’´’Ø']
        ws.append(headers)
        
        # –î–∞–Ω–Ω—ã–µ
        total_amount = 0
        for record in user_records:
            ws.append([
                record.get('id', ''),
                record.get('date', ''),
                record.get('supplier', ''),
                record.get('direction', ''),
                record.get('description', ''),
                record.get('amount', 0),
                record.get('sheet_name', '')
            ])
            total_amount += record.get('amount', 0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏—Ç–æ–≥–∞
        ws.append(['', '', '', '', '‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä:', total_amount, ''])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        file_buffer = BytesIO()
        wb.save(file_buffer)
        file_buffer.seek(0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        filename = f"report_{display_name}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        
        await query.message.reply_document(
            document=file_buffer,
            filename=filename,
            caption=f"üìä ’Ä’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂ {display_name}-’´ ’∞’°’¥’°÷Ä\n"
                   f"üìù ‘≥÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä: {len(user_records)}\n"
                   f"üí∞ ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’£’∏÷Ç’¥’°÷Ä: {total_amount:,.2f} ’§÷Ä’°’¥\n"
                   f"üìÖ ’ç’ø’•’≤’Æ’æ’•’¨ ’ß: {datetime.now().strftime('%Y-%m-%d %H:%M')}"
        )
        
        await query.edit_message_text(
            f"‚úÖ ’Ä’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂’® ’∏÷Ç’≤’°÷Ä’Ø’æ’°’Æ ’ß {display_name}-’´ ’∞’°’¥’°÷Ä",
            reply_markup=create_back_to_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –¥–ª—è {display_name}: {e}")
        await query.edit_message_text(
            f"‚ùå ’Ä’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂ ’Ω’ø’•’≤’Æ’•’¨’∏÷Ç ’Ω’≠’°’¨: {e}",
            reply_markup=create_back_to_menu_keyboard()
        )

async def send_payment_report(update: Update, context: CallbackContext, display_name: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ –ø–ª–∞—Ç–µ–∂–∞—Ö"""
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ payment_handlers
    from .payment_handlers import send_payment_report as payment_report_func
    await payment_report_func(update, context, display_name)

async def show_my_payments(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from ...utils.config_utils import get_user_settings
        user_settings = get_user_settings(user_id)
        display_name = user_settings.get('display_name')
        
        if not display_name:
            await query.edit_message_text(
                "‚ùå ’Å’•÷Ä ’°’∂’∏÷Ç’∂’® ’π’´ ’Ω’°’∞’¥’°’∂’æ’°’Æ: ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’§’´’¥’•’¨ ’°’§’¥’´’∂’´’Ω’ø÷Ä’°’ø’∏÷Ä’´’∂:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è ’Ä’•’ø", callback_data="back_to_menu")]
                ])
            )
            return
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ payment_handlers
        from .payment_handlers import send_payment_report
        await send_payment_report(update, context, display_name)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.edit_message_text(
            f"‚ùå ’é’≥’°÷Ä’∏÷Ç’¥’∂’•÷Ä’´ ’ø’•’≤’•’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’® ’Ω’ø’°’∂’°’¨’∏÷Ç ’Ω’≠’°’¨: ’ì’∏÷Ä’±’•÷Ñ ’∂’∏÷Ä’´÷Å:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è ’Ä’•’ø", callback_data="back_to_menu")]
            ])
        )
