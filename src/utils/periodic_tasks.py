"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏
"""
import asyncio
import logging
import os
import threading
import time
from datetime import datetime, timedelta
from telegram import Bot
from telegram.constants import ChatAction
from telegram.ext import Application
from ..config.settings import (
    AUTO_SEND_DATA_INTERVAL_HOURS, 
    AUTO_SEND_DATA_ADMIN_ID, 
    DATA_DIR, 
    TOKEN
)

logger = logging.getLogger(__name__)

class PeriodicTasks:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    
    def __init__(self, application: Application):
        self.application = application
        self.bot = application.bot
        self.thread = None
        self.running = False
    
    async def send_data_files_to_admin(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        try:
            admin_id = AUTO_SEND_DATA_ADMIN_ID
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ data
            if not os.path.exists(DATA_DIR):
                logger.warning(f"Data directory {DATA_DIR} does not exist")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            files = [f for f in os.listdir(DATA_DIR) if os.path.isfile(os.path.join(DATA_DIR, f))]
            if not files:
                logger.info("No files to send in data directory")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            await self.bot.send_message(
                chat_id=admin_id,
                text=f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è—é {len(files)} —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ data..."
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
            for fname in files:
                fpath = os.path.join(DATA_DIR, fname)
                try:
                    await self.bot.send_chat_action(chat_id=admin_id, action=ChatAction.UPLOAD_DOCUMENT)
                    with open(fpath, 'rb') as f:
                        await self.bot.send_document(
                            chat_id=admin_id, 
                            document=f, 
                            filename=fname,
                            caption=f"üìã –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö: {fname}"
                        )
                    logger.info(f"Successfully sent file {fname} to admin {admin_id}")
                except Exception as e:
                    logger.error(f"Failed to send file {fname}: {e}")
                    await self.bot.send_message(
                        chat_id=admin_id,
                        text=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {fname}: {e}"
                    )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            await self.bot.send_message(
                chat_id=admin_id,
                text="‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
            )
            
            logger.info(f"Periodic data files sent to admin {admin_id}")
            
        except Exception as e:
            logger.error(f"Error in periodic send_data_files_to_admin: {e}")
            try:
                await self.bot.send_message(
                    chat_id=AUTO_SEND_DATA_ADMIN_ID,
                    text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}"
                )
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    
    def sync_send_data_files(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π event loop –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
            loop.run_until_complete(self.send_data_files_to_admin())
            
        except Exception as e:
            logger.error(f"Error in sync_send_data_files: {e}")
        finally:
            if loop:
                loop.close()
    
    def periodic_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        logger.info(f"Starting periodic worker thread (interval: {AUTO_SEND_DATA_INTERVAL_HOURS} hours)")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏)
        if self.running:
            logger.info("Sending initial data files on startup")
            self.sync_send_data_files()
        
        while self.running:
            try:
                # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
                interval_seconds = int(AUTO_SEND_DATA_INTERVAL_HOURS * 3600)
                
                # –ñ–¥–µ–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã—Å—Ç—Ä–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                for _ in range(interval_seconds // 60):
                    if not self.running:
                        break
                    time.sleep(60)
                
                if self.running:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–µ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
                    self.sync_send_data_files()
                    
            except Exception as e:
                logger.error(f"Error in periodic worker: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                time.sleep(60)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
        
        logger.info("Periodic worker thread stopped")
    
    def start_periodic_tasks(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"""
        if self.running:
            logger.warning("Periodic tasks already running")
            return
            
        self.running = True
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
        self.thread = threading.Thread(target=self.periodic_worker, daemon=True)
        self.thread.start()
        
        logger.info("Periodic tasks started")
    
    def stop_periodic_tasks(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"""
        if not self.running:
            return
            
        self.running = False
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
        if self.thread and self.thread.is_alive():
            self.thread.join(timeout=5)  # –ñ–¥–µ–º –¥–æ 5 —Å–µ–∫—É–Ω–¥
        
        logger.info("Periodic tasks stopped")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á
periodic_tasks_manager = None

def start_periodic_tasks(application: Application):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"""
    global periodic_tasks_manager
    periodic_tasks_manager = PeriodicTasks(application)
    periodic_tasks_manager.start_periodic_tasks()

def stop_periodic_tasks():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"""
    global periodic_tasks_manager
    if periodic_tasks_manager:
        periodic_tasks_manager.stop_periodic_tasks()

def get_task_manager():
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–¥–∞—á"""
    global periodic_tasks_manager
    return periodic_tasks_manager
