"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–µ–π
"""
import json
import os
import logging
from typing import Dict, Any, Optional

logger = logging.getLogger(__name__)

class LocalizationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.translations: Dict[str, Dict[str, Any]] = {}
        self.default_language = "hy"  # –ê—Ä–º—è–Ω—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.supported_languages = {
            "hy": "üá¶üá≤ ’Ä’°’µ’•÷Ä’•’∂",
            "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π", 
            "en": "üá∫üá∏ English"
        }
        self.load_translations()
    
    def load_translations(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –ø–∞–ø–∫–µ config
            current_dir = os.path.dirname(os.path.abspath(__file__))
            config_dir = os.path.join(os.path.dirname(current_dir), "config")
            localization_file = os.path.join(config_dir, "localization.json")
            
            if os.path.exists(localization_file):
                with open(localization_file, 'r', encoding='utf-8') as f:
                    self.translations = json.load(f)
                logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —è–∑—ã–∫–æ–≤: {list(self.translations.keys())}")
            else:
                logger.warning(f"–§–∞–π–ª –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {localization_file}")
                self.translations = {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {e}")
            self.translations = {}
    
    def save_translations(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥—ã –≤ —Ñ–∞–π–ª"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –ø–∞–ø–∫–µ config
            current_dir = os.path.dirname(os.path.abspath(__file__))
            config_dir = os.path.join(os.path.dirname(current_dir), "config")
            localization_file = os.path.join(config_dir, "localization.json")
            
            with open(localization_file, 'w', encoding='utf-8') as f:
                json.dump(self.translations, f, ensure_ascii=False, indent=2)
            logger.info("–ü–µ—Ä–µ–≤–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤: {e}")
    
    def get_text(self, key: str, language: str = None, **kwargs) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ –∫–ª—é—á—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        
        Args:
            key: –ö–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'section.subsection.key'
            language: –ö–æ–¥ —è–∑—ã–∫–∞ (–µ—Å–ª–∏ None - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è default_language)
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
        
        Returns:
            –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if language is None:
            language = self.default_language
        
        if language not in self.translations:
            language = self.default_language
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–ª—é—á –Ω–∞ —á–∞—Å—Ç–∏
        keys = key.split('.')
        current = self.translations.get(language, {})
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
        for k in keys:
            if isinstance(current, dict) and k in current:
                current = current[k]
            else:
                # –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –≤ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º —è–∑—ã–∫–µ
                if language != self.default_language:
                    return self.get_text(key, self.default_language, **kwargs)
                # –ï—Å–ª–∏ –∏ –≤ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∞–º –∫–ª—é—á
                return key
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if isinstance(current, str) and kwargs:
            try:
                return current.format(**kwargs)
            except (KeyError, ValueError):
                return current
        
        return str(current)
    
    def get_supported_languages(self) -> Dict[str, str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏"""
        return self.supported_languages.copy()
    
    def add_language(self, language_code: str, language_name: str, translations: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —è–∑—ã–∫"""
        self.supported_languages[language_code] = language_name
        self.translations[language_code] = translations
        self.save_translations()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —è–∑—ã–∫: {language_code} ({language_name})")
    
    def add_translation_key(self, key: str, translations: Dict[str, str]):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∫–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤
        
        Args:
            key: –ö–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'section.subsection.key'
            translations: –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ {language_code: translation}
        """
        keys = key.split('.')
        
        for language, translation in translations.items():
            if language not in self.translations:
                self.translations[language] = {}
            
            current = self.translations[language]
            
            # –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            for k in keys[:-1]:
                if k not in current:
                    current[k] = {}
                current = current[k]
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
            current[keys[-1]] = translation
        
        self.save_translations()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞: {key}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
localization_manager = LocalizationManager()

def get_user_language(user_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        from .config_utils import get_user_settings
        settings = get_user_settings(user_id)
        return settings.get('language', localization_manager.default_language)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return localization_manager.default_language

def set_user_language(user_id: int, language: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from .config_utils import update_user_settings
        update_user_settings(user_id, {'language': language})
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫ {language} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def _(key: str, user_id: int = None, **kwargs) -> str:
    """
    –°–æ–∫—Ä–∞—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    
    Args:
        key: –ö–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞)
        **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Returns:
        –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """
    language = get_user_language(user_id) if user_id else localization_manager.default_language
    return localization_manager.get_text(key, language, **kwargs)

def get_available_languages() -> Dict[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏"""
    return localization_manager.get_supported_languages()

def add_custom_translation(key: str, translations: Dict[str, str]):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥"""
    localization_manager.add_translation_key(key, translations)
