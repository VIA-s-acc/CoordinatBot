"""
–°–∏—Å—Ç–µ–º–∞ –æ—Ç—á–µ—Ç–æ–≤ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
"""
import pandas as pd
import logging
from io import BytesIO
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram import Update
from telegram.ext import CallbackContext
from ..database.database_manager import get_all_records, get_payments
from ..utils.date_utils import normalize_date, format_date_for_interval
from ..config.settings import ADMIN_IDS
from .config_utils import load_bot_config

logger = logging.getLogger(__name__)

async def send_report(context: CallbackContext, action: str, record: dict, user: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ –¥–µ–π—Å—Ç–≤–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —á–∞—Ç—ã"""
    config = load_bot_config()
    report_chats = config.get('report_chats', {})
    
    if not report_chats:
        return

    user_name = user.get('display_name') or user.get('name') or f"User {user['id']}"
    record_id = record.get('id', 'N/A')

    if action == "‘Ω’¥’¢’°’£÷Ä’∏÷Ç’¥":
        report_text = (
            f"üì¢ üü•<b>‘Ω’Ñ‘≤‘±‘≥’ê’à’í’Ñ</b> ID: <code>{record_id}</code> üü•\n\n"
            f"üë§ ’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤: <b>{user_name}</b> \n"
        ) + format_record_info(record) + "\n\n" 
    elif action == "‘≤’°÷Å’©’∏’≤’∏÷Ç’¥":
        date = record.get('date', 'N/A')
        report_text = (
            f"üì¢ üü°<b>‘≤‘±’ë‘π’à’Ç’à’í’Ñ: {date} ’°’¥’Ω’°’©’æ’∏’æ</b>üü°\n\n"
            f"üë§ ’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤: <b>{user_name}</b>\n"
        ) + format_record_info(record) + "\n\n" 
    else:
        report_text = (
            f"üì¢ <b>‘±’æ’•’¨’°÷Å’∏÷Ç’¥</b>\n\n"
            f"üë§ ’ï’£’ø’°’£’∏÷Ä’Æ’∏’≤: <b>{user_name}</b>\n"
        ) + format_record_info(record)
        
    for chat_id, settings in report_chats.items():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –ª–∏—Å—Ç—É
            configured_sheet = settings.get('sheet_name')
            record_sheet = record.get('sheet_name')
            
            # –ï—Å–ª–∏ –¥–ª—è —á–∞—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–∏—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –ª–∏—Å—Ç–∞
            if configured_sheet and record_sheet and configured_sheet != record_sheet:
                logger.info(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç—á–µ—Ç –¥–ª—è —á–∞—Ç–∞ {chat_id}: –ª–∏—Å—Ç '{record_sheet}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º—É '{configured_sheet}'")
                continue
                
            await context.bot.send_message(
                chat_id=chat_id,
                text=report_text,
                parse_mode="HTML"
            )
            logger.info(f"–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id} –¥–ª—è –ª–∏—Å—Ç–∞ '{record_sheet}'")
        except Exception as e:
            logger.error(f"’ç’≠’°’¨ ’∞’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç’≤’°÷Ä’Ø’•’¨’´’Ω {chat_id}: {e}")

def     format_record_info(record: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏"""
    return (
        f"üÜî ID: <code>{record.get('id', 'N/A')}</code>\n\n\n"
        f"üè™ ’Ñ’°’ø’°’Ø’°÷Ä’°÷Ä: <b>{record.get('supplier', 'N/A')}</b>\n"
        f"üìÖ ‘±’¥’Ω’°’©’´’æ: <b>{record.get('date', 'N/A')}</b>\n"
        f"üß≠ ’à÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂: <b>{record.get('direction', 'N/A')}</b>\n"
        f"üìù ’Ü’Ø’°÷Ä’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂: <b>{record.get('description', 'N/A')}</b>\n"
        f"üí∞ ‘≥’∏÷Ç’¥’°÷Ä: <b>{record.get('amount', 0):,.2f}</b>\n"
    )

class ReportManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤"""
    
    def __init__(self):
        pass
    
    def merge_payment_intervals(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–ª–∞—Ç–µ–∂–µ–π
        """
        if df.empty:
            return df
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞
        df = df.sort_values('date_from').reset_index(drop=True)
        
        merged = []
        current_start = df.iloc[0]['date_from']
        current_end = df.iloc[0]['date_to']
        current_amount = df.iloc[0]['amount']
        
        for i in range(1, len(df)):
            row = df.iloc[i]
            
            # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è –∏–ª–∏ –∫–∞—Å–∞—é—Ç—Å—è
            if row['date_from'] <= current_end + timedelta(days=1):
                # –†–∞—Å—à–∏—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                current_end = max(current_end, row['date_to'])
                current_amount += row['amount']
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
                merged.append({
                    'date_from': current_start,
                    'date_to': current_end,
                    'amount': current_amount
                })
                current_start = row['date_from']
                current_end = row['date_to']
                current_amount = row['amount']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        merged.append({
            'date_from': current_start,
            'date_to': current_end,
            'amount': current_amount
        })
        
        return pd.DataFrame(merged)
    
    async def generate_user_report(self, display_name: str, update: Update, context: CallbackContext):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î
            db_records = get_all_records()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            filtered_records = []
            for record in db_records:
                if record['amount'] == 0:
                    continue
                if record['supplier'] != display_name:
                    continue
                
                record['date'] = normalize_date(record['date'])
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–∞–º (—Ä–∞–∑–Ω—ã–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
                if record['supplier'] == "’Ü’°÷Ä’•’Ø":
                    cutoff_date = datetime.strptime("2025-05-10", '%Y-%m-%d').date()
                else:
                    cutoff_date = datetime.strptime("2024-12-05", '%Y-%m-%d').date()
                
                record_date = datetime.strptime(record['date'], '%d.%m.%y').date()
                if record_date >= cutoff_date:
                    filtered_records.append(record)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ª–∏—Å—Ç–∞–º
            sheets = {}
            for rec in filtered_records:
                spreadsheet_id = rec.get('spreadsheet_id', '‚Äî')
                sheet_name = rec.get('sheet_name', '‚Äî')
                key = (spreadsheet_id, sheet_name)
                sheets.setdefault(key, []).append(rec)
            
            all_summaries = []
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –∫–∞–∂–¥–æ–º—É –ª–∏—Å—Ç—É
            for (spreadsheet_id, sheet_name), records in sheets.items():
                await self._generate_sheet_report(
                    display_name, spreadsheet_id, sheet_name, 
                    records, update, all_summaries
                )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
            if all_summaries:
                await self._generate_total_report(
                    display_name, spreadsheet_id, sheet_name, 
                    all_summaries, update
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è {display_name}: {e}")
            await update.effective_message.reply_text(f"‚ùå ’Ä’°’∑’æ’•’ø’æ’∏÷Ç’©’µ’∏÷Ç’∂ ’Ω’ø’•’≤’Æ’•’¨’∏÷Ç ’Ω’≠’°’¨: {e}")
    
    async def _generate_sheet_report(self, display_name: str, spreadsheet_id: str, 
                                   sheet_name: str, records: List[Dict], 
                                   update: Update, all_summaries: List[Dict]):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ–º—É –ª–∏—Å—Ç—É"""
        try:
            df = pd.DataFrame(records)
            if not df.empty:
                df['date'] = pd.to_datetime(df['date'], errors='coerce', dayfirst=True)
            else:
                df['date'] = pd.to_datetime([])
            
            df_amount_total = df['amount'].sum() if not df.empty else 0
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
            df.loc["‘ª’ø’∏’£"] = [
                '‚Äî', '‚Äî', '‚Äî', '‚Äî', '‚Äî', df_amount_total, '‚Äî', '‚Äî', '‚Äî', '‚Äî'  
            ]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π —Å–≤–æ–¥–∫–∏
            all_summaries.append({
                '‘±’≤’µ’∏÷Ç’Ω’°’Ø': spreadsheet_id,
                '‘π’•÷Ä’©': sheet_name,
                '‘æ’°’≠’Ω': df_amount_total,
                "’é’≥’°÷Ä": '‚Äî',  
                '’Ñ’∂’°÷Å’∏÷Ä’§': '‚Äî'
            })
            
            summary = pd.DataFrame([{
                '‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’Æ’°’≠’Ω': df_amount_total,
            }])
            
            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
            output = BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df.to_excel(writer, sheet_name='All Expenses', index=False)
                summary.to_excel(writer, sheet_name='Summary', index=False)
            output.seek(0)
            
            await update.effective_message.reply_document(
                document=output,
                filename=f"{display_name}_{sheet_name}_report.xlsx",
                caption=(
                    f"‘π’•÷Ä’©: {sheet_name}\n"
                    f"‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’Æ’°’≠’Ω: {df_amount_total:,.2f}\n"
                )
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –ª–∏—Å—Ç—É {sheet_name}: {e}")
    
    async def _generate_total_report(self, display_name: str, spreadsheet_id: str, 
                                   sheet_name: str, all_summaries: List[Dict], 
                                   update: Update):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –ª–∏—Å—Ç–∞–º"""
        try:
            df_total = pd.DataFrame(all_summaries)
            total_expenses_all = df_total['‘æ’°’≠’Ω'].sum()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏
            payments = get_payments(display_name, spreadsheet_id, sheet_name)
            if not payments:
                total_paid_all = 0
            else:
                df_pay_raw = pd.DataFrame(
                    payments, 
                    columns=['amount', 'date_from', 'date_to', 'comment', 'created_at']
                )
                
                # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø—ã
                df_pay_raw['amount'] = pd.to_numeric(df_pay_raw['amount'], errors='coerce').fillna(0)
                df_pay_raw['date_from'] = pd.to_datetime(df_pay_raw['date_from'], errors='coerce')
                df_pay_raw['date_to'] = pd.to_datetime(df_pay_raw['date_to'], errors='coerce')
                
                # –°–ª–∏—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∏ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                df_pay = self.merge_payment_intervals(df_pay_raw[['amount', 'date_from', 'date_to']])
                
                # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
                total_paid_all = df_pay['amount'].sum()
            
            total_left_all = total_expenses_all - total_paid_all
            df_total.loc['‘ª’ø’∏’£'] = [
                '‚Äî', '‚Äî',
                total_expenses_all,
                total_paid_all,
                total_left_all
            ]
            
            output_total = BytesIO()
            with pd.ExcelWriter(output_total, engine='openpyxl') as writer:
                df_total.to_excel(writer, sheet_name='‘ª’ø’∏’£’∂’•÷Ä', index=False)
            output_total.seek(0)
            
            await update.effective_message.reply_document(
                document=output_total,
                filename=f"{display_name}_TOTAL_report.xlsx",
                caption=(
                    f"‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’Æ’°’≠’Ω’•÷Ä:\n"
                    f"‚Ä¢ ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’Æ’°’≠’Ω: {total_expenses_all:,.2f}\n"
                    f"‚Ä¢ ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’é’≥’°÷Ä: {total_paid_all:,.2f}\n"
                    f"‚Ä¢ ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’¥’∂’°÷Å’∏÷Ä’§: {total_left_all:,.2f}"
                )
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def generate_statistics_report(self, update: Update, context: CallbackContext):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            records = get_all_records()
            
            if not records:
                await update.message.reply_text("üìä ’è’æ’µ’°’¨’∂’•÷Ä’´ ’¢’°’¶’°’µ’∏÷Ç’¥ ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä ’π’Ø’°’∂:")
                return
            
            df = pd.DataFrame(records)
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_records = len(df)
            total_amount = df['amount'].sum()
            avg_amount = df['amount'].mean()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
            supplier_stats = df.groupby('supplier').agg({
                'amount': ['count', 'sum']
            }).round(2)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–∏—Å—Ç–∞–º
            sheet_stats = df.groupby('sheet_name').agg({
                'amount': ['count', 'sum']
            }).round(2)
            
            stats_text = (
                f"üìä <b>‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’æ’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂</b>\n\n"
                f"üìù ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’£÷Ä’°’º’∏÷Ç’¥’∂’•÷Ä: <b>{total_records}</b>\n"
                f"üí∞ ‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’£’∏÷Ç’¥’°÷Ä: <b>{total_amount:,.2f}</b> ’§÷Ä’°’¥\n"
                f"üìà ’Ñ’´’ª’´’∂ ’£’∏÷Ç’¥’°÷Ä: <b>{avg_amount:,.2f}</b> ’§÷Ä’°’¥\n\n"
                f"<b>’Ñ’°’ø’°’Ø’°÷Ä’°÷Ä’∂’•÷Ä’´ ’Ø’∏’≤’¥’´÷Å ’æ’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂:</b>\n"
            )
            
            for supplier, data in supplier_stats.iterrows():
                count = int(data[('amount', 'count')])
                total = data[('amount', 'sum')]
                stats_text += f"‚Ä¢ {supplier}: {count} ’£÷Ä’°’º’∏÷Ç’¥, {total:,.2f} ’§÷Ä’°’¥\n"
            
            await update.message.reply_text(stats_text, parse_mode="HTML")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text(f"‚ùå ’é’´’≥’°’Ø’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂ ’Ω’ø’•’≤’Æ’•’¨’∏÷Ç ’Ω’≠’°’¨: {e}")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤
report_manager = ReportManager()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
async def generate_user_report(display_name: str, update: Update, context: CallbackContext):
    return await report_manager.generate_user_report(display_name, update, context)

async def generate_statistics_report(update: Update, context: CallbackContext):
    return await report_manager.generate_statistics_report(update, context)
