"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Sheets
"""
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import logging
from google.oauth2 import service_account
from googleapiclient.discovery import build
import datetime
import uuid
from datetime import datetime
from typing import List, Dict, Optional, Tuple
from ..config.settings import GOOGLE_CREDS_FILE, GOOGLE_SCOPE, GOOGLE_SCOPES

logger = logging.getLogger(__name__)

class GoogleSheetsManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Google Sheets"""
    
    def __init__(self, creds_file: str = GOOGLE_CREDS_FILE):
        self.creds_file = creds_file
        self._client = None
    
    def get_client(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets"""
        if self._client is None:
            try:
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    self.creds_file, GOOGLE_SCOPE
                )
                self._client = gspread.authorize(creds)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
                return None
        return self._client

    def list_spreadsheets(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø—Ä–µ–¥—à–∏—Ç–æ–≤"""
        try:
            client = self.get_client()
            if client:
                return client.list_spreadsheet_files()
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ø—Ä–µ–¥—à–∏—Ç–æ–≤: {e}")
            return []

    def get_all_spreadsheets(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–ø—Ä–µ–¥—à–∏—Ç—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        try:
            creds = service_account.Credentials.from_service_account_file(
                self.creds_file, scopes=GOOGLE_SCOPES
            )
            service = build('drive', 'v3', credentials=creds)
            
            results = service.files().list(
                q="mimeType='application/vnd.google-apps.spreadsheet'",
                fields="files(id, name, modifiedTime, size)"
            ).execute()
            
            return results.get('files', [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ø—Ä–µ–¥—à–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ Drive API: {e}")
            return []

    def open_sheet_by_id(self, spreadsheet_id: str):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø—Ä–µ–¥—à–∏—Ç –ø–æ ID"""
        try:
            client = self.get_client()
            if client:
                return client.open_by_key(spreadsheet_id)
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø—Ä–µ–¥—à–∏—Ç–∞ {spreadsheet_id}: {e}")
            return None

    def get_worksheets_info(self, spreadsheet_id: str) -> Tuple[List[Dict], str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö –≤ —Å–ø—Ä–µ–¥—à–∏—Ç–µ"""
        try:
            sheet = self.open_sheet_by_id(spreadsheet_id)
            if not sheet:
                return [], "Unknown"
            
            worksheets = sheet.worksheets()
            sheets_info = []
            
            for worksheet in worksheets:
                info = {
                    'title': worksheet.title,
                    'id': worksheet.id,
                    'row_count': worksheet.row_count,
                    'col_count': worksheet.col_count,
                    'url': worksheet.url
                }
                sheets_info.append(info)
            
            return sheets_info, sheet.title
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Å—Ç–∞—Ö: {e}")
            return [], "Error"

    def get_worksheet_by_name(self, spreadsheet_id: str, sheet_name: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–∏—Å—Ç –ø–æ –∏–º–µ–Ω–∏"""
        try:
            sheet = self.open_sheet_by_id(spreadsheet_id)
            if sheet:
                return sheet.worksheet(sheet_name)
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Å—Ç–∞ {sheet_name}: {e}")
            return None

    def get_spreadsheet_info(self, spreadsheet_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø—Ä–µ–¥—à–∏—Ç–µ"""
        try:
            sheet = self.open_sheet_by_id(spreadsheet_id)
            if not sheet:
                return None
            
            worksheets = sheet.worksheets()
            sheets_info = []
            
            for worksheet in worksheets:
                sheets_info.append({
                    'title': worksheet.title,
                    'row_count': worksheet.row_count,
                    'col_count': worksheet.col_count
                })
            
            return {
                'title': sheet.title,
                'id': spreadsheet_id,
                'sheets': sheets_info,
                'sheets_count': len(sheets_info)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø—Ä–µ–¥—à–∏—Ç–µ: {e}")
            return None

    def ensure_headers(self, worksheet, headers: List[str]):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ª–∏—Å—Ç–∞"""
        try:
            current_headers = worksheet.row_values(1)
            if current_headers != headers:
                logger.info("üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ –ª–∏—Å—Ç–µ")
                worksheet.update("A1:F1", [headers])
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")

    def add_record_to_sheet(self, spreadsheet_id: str, sheet_name: str, record: Dict) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ Google Sheet —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞–∫–µ—Ç–Ω—É—é –≤—Å—Ç–∞–≤–∫—É."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç
            worksheet = self.get_worksheet_by_name(spreadsheet_id, sheet_name)
            if not worksheet:
                logger.error(f"–õ–∏—Å—Ç {sheet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            headers = ['ID', '’°’¥’Ω’°’©’´’æ', '’¥’°’ø’°’Ø’°÷Ä’°÷Ä', '’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂', '’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä', '‘±÷Ä’™’•÷Ñ']
            self.ensure_headers(worksheet, headers)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ YYYY-MM-DD –≤ dd.mm.yy —Ñ–æ—Ä–º–∞—Ç
            formatted_date = record.get('date', '')
            if formatted_date:
                try:
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
                    date_obj = datetime.strptime(formatted_date, '%Y-%m-%d')
                    formatted_date = date_obj.strftime('%d.%m.%y')
                except ValueError:
                    logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {formatted_date}")
                    formatted_date = record.get('date', '')

            new_row = [
                record.get('id', ''),
                formatted_date,
                record.get('supplier', ''),
                record.get('direction', ''),
                record.get('description', ''),
                record.get('amount', 0)
            ]

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            all_records = worksheet.get_all_records()
            all_records.sort(key=lambda x: datetime.strptime(x['’°’¥’Ω’°’©’´’æ'], '%d.%m.%y') if x['’°’¥’Ω’°’©’´’æ'] else datetime.min)

            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            insert_row = len(all_records) + 2  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–º –º–µ—Å—Ç–æ, –¥–æ–±–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü

            if formatted_date:
                new_date = datetime.strptime(formatted_date, '%d.%m.%y')
                for i, existing_record in enumerate(all_records):
                    existing_date_str = existing_record.get('’°’¥’Ω’°’©’´’æ', '')
                    if existing_date_str:
                        try:
                            existing_date = datetime.strptime(existing_date_str, '%d.%m.%y')
                            if new_date < existing_date:
                                insert_row = i + 2  # +2 –ø–æ—Ç–æ–º—É —á—Ç–æ –∑–∞–ø–∏—Å–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 2-–π —Å—Ç—Ä–æ–∫–∏
                                break
                        except ValueError:
                            continue

            # –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
            worksheet.insert_row(new_row, insert_row)
            logger.info(f"–ó–∞–ø–∏—Å—å {record.get('id')} –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏—é {insert_row} —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ")

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
            return False


    def update_record_in_sheet(self, spreadsheet_id: str, sheet_name: str, 
                             record_id: str, field: str, new_value) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ Google Sheet —Å –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã"""
        try:
            worksheet = self.get_worksheet_by_name(spreadsheet_id, sheet_name)
            if not worksheet:
                return False

            records = worksheet.get_all_records()
            
            field_mapping = {
                'date': '’°’¥’Ω’°’©’´’æ',
                'supplier': '’¥’°’ø’°’Ø’°÷Ä’°÷Ä',
                'direction': '’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂',
                'description': '’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä',
                'amount': '‘±÷Ä’™’•÷Ñ'
            }
            
            sheet_field = field_mapping.get(field, field)
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            record_found = False
            record_row = None
            current_record = None
            
            for i, row in enumerate(records, start=2):
                if str(row.get('ID', '')).strip() == record_id:
                    record_found = True
                    record_row = i
                    current_record = row
                    break
            
            if not record_found:
                logger.error(f"–ó–∞–ø–∏—Å—å {record_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return False
            
            # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –¥–∞—Ç–∞, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            if field == 'date' and new_value:
                try:
                    # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—É—é –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD)
                    new_date = datetime.strptime(new_value, '%Y-%m-%d')
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç dd.mm.yy –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
                    formatted_new_date = new_date.strftime('%d.%m.%y')
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
                    updated_record = current_record.copy()
                    updated_record[sheet_field] = formatted_new_date
                    
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
                    worksheet.delete_rows(record_row)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π (–±–µ–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–π)
                    updated_records = worksheet.get_all_records()
                    
                    # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
                    insert_row = len(updated_records) + 2  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∫–æ–Ω–µ—Ü
                    
                    for i, existing_record in enumerate(updated_records):
                        existing_date_str = existing_record.get('’°’¥’Ω’°’©’´’æ', '')
                        if existing_date_str:
                            try:
                                # –ü–∞—Ä—Å–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yy
                                existing_date = datetime.strptime(existing_date_str, '%d.%m.%y')
                                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≥–æ–¥ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                                if existing_date.year < 2000:
                                    existing_date = existing_date.replace(year=existing_date.year + 100)
                                if new_date < existing_date:
                                    insert_row = i + 2
                                    break
                            except ValueError:
                                continue
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                    new_row = [
                        updated_record.get('ID', ''),
                        updated_record.get('’°’¥’Ω’°’©’´’æ', ''),
                        updated_record.get('’¥’°’ø’°’Ø’°÷Ä’°÷Ä', ''),
                        updated_record.get('’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂', ''),
                        updated_record.get('’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä', ''),
                        updated_record.get('‘±÷Ä’™’•÷Ñ', 0)
                    ]
                    
                    worksheet.insert_row(new_row, insert_row)
                    logger.info(f"–ó–∞–ø–∏—Å—å {record_id} –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏—é {insert_row} –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã")
                    
                except ValueError:
                    # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –º–µ—Å—Ç–µ
                    headers = worksheet.row_values(1)
                    if sheet_field in headers:
                        col_index = headers.index(sheet_field) + 1
                        worksheet.update_cell(record_row, col_index, new_value)
                        logger.info(f"–ó–∞–ø–∏—Å—å {record_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –º–µ—Å—Ç–µ (–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã)")
                    
            else:
                # –û–±—ã—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –±–µ–∑ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –¥–∞—Ç–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç
                if field == 'date' and new_value:
                    try:
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
                        date_obj = datetime.strptime(new_value, '%Y-%m-%d')
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç dd.mm.yy
                        new_value = date_obj.strftime('%d.%m.%y')
                    except ValueError:
                        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {new_value}")
                
                headers = worksheet.row_values(1)
                if sheet_field in headers:
                    col_index = headers.index(sheet_field) + 1
                    worksheet.update_cell(record_row, col_index, new_value)
                    logger.info(f"–ó–∞–ø–∏—Å—å {record_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Google Sheets")
                else:
                    logger.error(f"–ü–æ–ª–µ {sheet_field} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö")
                    return False
            
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
            return False

    def delete_record_from_sheet(self, spreadsheet_id: str, sheet_name: str, record_id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ Google Sheet"""
        try:
            worksheet = self.get_worksheet_by_name(spreadsheet_id, sheet_name)
            if not worksheet:
                return False

            records = worksheet.get_all_records()
            
            for i, row in enumerate(records, start=2):
                if str(row.get('ID', '')).strip() == record_id:
                    worksheet.delete_rows(i)
                    logger.info(f"–ó–∞–ø–∏—Å—å {record_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Google Sheets")
                    return True
            
            return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ Google Sheets: {e}")
            return False

    def sort_sheet_by_date(self, spreadsheet_id: str, sheet_name: str) -> bool:
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–∏—Å—Ç–µ –ø–æ –¥–∞—Ç–µ"""
        try:
            worksheet = self.get_worksheet_by_name(spreadsheet_id, sheet_name)
            if not worksheet:
                logger.error(f"–õ–∏—Å—Ç {sheet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            all_records = worksheet.get_all_records()
            if not all_records:
                logger.info("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
                return True

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ
            def get_sort_key(record):
                date_str = record.get('’°’¥’Ω’°’©’´’æ', '')
                if date_str:
                    try:
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yy
                        parsed_date = datetime.strptime(date_str, '%d.%m.%y')
                        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≥–æ–¥: –µ—Å–ª–∏ –≥–æ–¥ –º–µ–Ω—å—à–µ 2000, –¥–æ–±–∞–≤–ª—è–µ–º 100 –ª–µ—Ç
                        # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –≤—Å–µ –≥–æ–¥–∞ –±—É–¥—É—Ç –≤ 21 –≤–µ–∫–µ (2000-2099)
                        if parsed_date.year < 2000:
                            parsed_date = parsed_date.replace(year=parsed_date.year + 100)
                        return parsed_date
                    except ValueError:
                        try:
                            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –∞—Ä–º—è–Ω—Å–∫–∏–º–∏ —Ç–æ—á–∫–∞–º–∏
                            parsed_date = datetime.strptime(date_str, '%d‚Ä§%m‚Ä§%y')
                            if parsed_date.year < 2000:
                                parsed_date = parsed_date.replace(year=parsed_date.year + 100)
                            return parsed_date
                        except ValueError:
                            return datetime.min  # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ
                return datetime.min

            sorted_records = sorted(all_records, key=get_sort_key)

            # –û—á–∏—â–∞–µ–º –ª–∏—Å—Ç (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
            if len(all_records) > 0:
                worksheet.delete_rows(2, len(all_records))

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            for record in sorted_records:
                row = [
                    record.get('ID', ''),
                    record.get('’°’¥’Ω’°’©’´’æ', ''),
                    record.get('’¥’°’ø’°’Ø’°÷Ä’°÷Ä', ''),
                    record.get('’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂', ''),
                    record.get('’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä', ''),
                    record.get('‘±÷Ä’™’•÷Ñ', 0)
                ]
                worksheet.append_row(row)

            logger.info(f"–õ–∏—Å—Ç {sheet_name} –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ –¥–∞—Ç–µ ({len(sorted_records)} –∑–∞–ø–∏—Å–µ–π)")
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ª–∏—Å—Ç–∞ –ø–æ –¥–∞—Ç–µ: {e}")
            return False

    def initialize_sheet_headers(self, spreadsheet_id: str, sheet_name: str) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ª–∏—Å—Ç–µ"""
        try:
            # Get the worksheet by name
            worksheet = self.get_worksheet_by_name(spreadsheet_id, sheet_name)
            # If the worksheet does not exist, return False
            if not worksheet:
                return False

            # Define the headers
            headers = ['ID', '’°’¥’Ω’°’©’´’æ', '’¥’°’ø’°’Ø’°÷Ä’°÷Ä', '’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂', '’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä', '‘±÷Ä’™’•÷Ñ']
            # Ensure the headers are in the worksheet
            self.ensure_headers(worksheet, headers)
            
            # Return True if successful
            return True

        except Exception as e:
            # Log the error
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")
            # Return False if there is an error
            return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Google Sheets
sheets_manager = GoogleSheetsManager()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_client():
    return sheets_manager.get_client()

def list_spreadsheets():
    return sheets_manager.list_spreadsheets()

def get_all_spreadsheets():
    return sheets_manager.get_all_spreadsheets()

def open_sheet_by_id(spreadsheet_id: str):
    return sheets_manager.open_sheet_by_id(spreadsheet_id)

def get_worksheets_info(spreadsheet_id: str):
    return sheets_manager.get_worksheets_info(spreadsheet_id)

def get_worksheet_by_name(spreadsheet_id: str, sheet_name: str):
    return sheets_manager.get_worksheet_by_name(spreadsheet_id, sheet_name)

def get_spreadsheet_info(spreadsheet_id: str):
    return sheets_manager.get_spreadsheet_info(spreadsheet_id)

def add_record_to_sheet(spreadsheet_id: str, sheet_name: str, record: Dict) -> bool:
    return sheets_manager.add_record_to_sheet(spreadsheet_id, sheet_name, record)

def update_record_in_sheet(spreadsheet_id: str, sheet_name: str, 
                          record_id: str, field: str, new_value) -> bool:
    return sheets_manager.update_record_in_sheet(spreadsheet_id, sheet_name, 
                                               record_id, field, new_value)

def delete_record_from_sheet(spreadsheet_id: str, sheet_name: str, record_id: str) -> bool:
    return sheets_manager.delete_record_from_sheet(spreadsheet_id, sheet_name, record_id)

def initialize_sheet_headers(spreadsheet_id: str, sheet_name: str) -> bool:
    return sheets_manager.initialize_sheet_headers(spreadsheet_id, sheet_name)

def sort_sheet_by_date(spreadsheet_id: str, sheet_name: str) -> bool:
    return sheets_manager.sort_sheet_by_date(spreadsheet_id, sheet_name)
