"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Sheets
"""
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import logging
from google.oauth2 import service_account
from googleapiclient.discovery import build
import datetime
from datetime import datetime
from typing import List, Dict, Optional, Tuple
from ..config.settings import GOOGLE_CREDS_FILE, GOOGLE_SCOPE, GOOGLE_SCOPES
from ..utils.date_utils import safe_parse_date_or_none

logger = logging.getLogger(__name__)

class GoogleSheetsManager:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Google Sheets"""
    
    def __init__(self, creds_file: str = GOOGLE_CREDS_FILE):
        self.creds_file = creds_file
        self._client = None
    
    def get_client(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets"""
        if self._client is None:
            try:
                creds = ServiceAccountCredentials.from_json_keyfile_name(
                    self.creds_file, GOOGLE_SCOPE
                )
                self._client = gspread.authorize(creds)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
                return None
        return self._client

    def list_spreadsheets(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø—Ä–µ–¥—à–∏—Ç–æ–≤"""
        try:
            client = self.get_client()
            if client:
                return client.list_spreadsheet_files()
            return []
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ø—Ä–µ–¥—à–∏—Ç–æ–≤: {e}")
            return []

    def get_all_spreadsheets(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–ø—Ä–µ–¥—à–∏—Ç—ã —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        try:
            creds = service_account.Credentials.from_service_account_file(
                self.creds_file, scopes=GOOGLE_SCOPES
            )
            service = build('drive', 'v3', credentials=creds)
            
            results = service.files().list(
                q="mimeType='application/vnd.google-apps.spreadsheet'",
                fields="files(id, name, modifiedTime, size)"
            ).execute()
            
            return results.get('files', [])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ø—Ä–µ–¥—à–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ Drive API: {e}")
            return []

    def open_sheet_by_id(self, spreadsheet_id: str):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø—Ä–µ–¥—à–∏—Ç –ø–æ ID"""
        try:
            client = self.get_client()
            if client:
                return client.open_by_key(spreadsheet_id)
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø—Ä–µ–¥—à–∏—Ç–∞ {spreadsheet_id}: {e}")
            return None

    def get_worksheets_info(self, spreadsheet_id: str) -> Tuple[List[Dict], str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö –≤ —Å–ø—Ä–µ–¥—à–∏—Ç–µ"""
        try:
            sheet = self.open_sheet_by_id(spreadsheet_id)
            if not sheet:
                return [], "Unknown"
            
            worksheets = sheet.worksheets()
            sheets_info = []
            
            for worksheet in worksheets:
                info = {
                    'title': worksheet.title,
                    'id': worksheet.id,
                    'row_count': worksheet.row_count,
                    'col_count': worksheet.col_count,
                    'url': worksheet.url
                }
                sheets_info.append(info)
            
            return sheets_info, sheet.title
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Å—Ç–∞—Ö: {e}")
            return [], "Error"

    def get_worksheet_by_name(self, spreadsheet_id: str, sheet_name: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–∏—Å—Ç –ø–æ –∏–º–µ–Ω–∏"""
        try:
            sheet = self.open_sheet_by_id(spreadsheet_id)
            if sheet:
                return sheet.worksheet(sheet_name)
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Å—Ç–∞ {sheet_name}: {e}")
            return None

    def get_spreadsheet_info(self, spreadsheet_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø—Ä–µ–¥—à–∏—Ç–µ"""
        try:
            sheet = self.open_sheet_by_id(spreadsheet_id)
            if not sheet:
                return None
            
            worksheets = sheet.worksheets()
            sheets_info = []
            
            for worksheet in worksheets:
                sheets_info.append({
                    'title': worksheet.title,
                    'row_count': worksheet.row_count,
                    'col_count': worksheet.col_count
                })
            
            return {
                'title': sheet.title,
                'id': spreadsheet_id,
                'sheets': sheets_info,
                'sheets_count': len(sheets_info)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø—Ä–µ–¥—à–∏—Ç–µ: {e}")
            return None

    def ensure_headers(self, worksheet, headers: List[str]):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ª–∏—Å—Ç–∞"""
        try:
            current_headers = worksheet.row_values(1)
            if current_headers != headers:
                logger.info("üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ –ª–∏—Å—Ç–µ")
                worksheet.update("A1:F1", [headers])
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")

    def add_record_to_sheet(self, spreadsheet_id: str, sheet_name: str, record: Dict) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ Google Sheet —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞–∫–µ—Ç–Ω—É—é –≤—Å—Ç–∞–≤–∫—É."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—á–∏–π –ª–∏—Å—Ç
            worksheet = self.get_worksheet_by_name(spreadsheet_id, sheet_name)
            if not worksheet:
                logger.error(f"–õ–∏—Å—Ç {sheet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            headers = ['ID', '’°’¥’Ω’°’©’´’æ', '’¥’°’ø’°’Ø’°÷Ä’°÷Ä', '’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂', '’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä', '‘±÷Ä’™’•÷Ñ']
            self.ensure_headers(worksheet, headers)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ YYYY-MM-DD –≤ dd.mm.yy —Ñ–æ—Ä–º–∞—Ç
            formatted_date = record.get('date', '')
            if formatted_date:
                try:
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
                    date_obj = datetime.strptime(formatted_date, '%Y-%m-%d')
                    formatted_date = date_obj.strftime('%d.%m.%y')
                except ValueError:
                    logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {formatted_date}")
                    formatted_date = record.get('date', '')

            new_row = [
                record.get('id', ''),
                formatted_date,
                record.get('supplier', ''),
                record.get('direction', ''),
                record.get('description', ''),
                record.get('amount', 0)
            ]

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
            all_records = worksheet.get_all_records()
            
            def safe_sort_key(record):
                """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ"""
                date_str = record.get('’°’¥’Ω’°’©’´’æ', '')
                if not date_str:
                    return datetime.min
                try:
                    parsed_date = safe_parse_date_or_none(date_str)
                    return datetime.combine(parsed_date, datetime.min.time()) if parsed_date else datetime.min
                except Exception:
                    return datetime.min
            
            all_records.sort(key=safe_sort_key)

            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            insert_row = len(all_records) + 2  # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–º –º–µ—Å—Ç–æ, –¥–æ–±–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü

            if formatted_date:
                try:
                    new_date = safe_parse_date_or_none(formatted_date)
                    if new_date:
                        for i, existing_record in enumerate(all_records):
                            existing_date_str = existing_record.get('’°’¥’Ω’°’©’´’æ', '')
                            if existing_date_str:
                                existing_date = safe_parse_date_or_none(existing_date_str)
                                if existing_date and new_date < existing_date:
                                    insert_row = i + 2  # +2 –ø–æ—Ç–æ–º—É —á—Ç–æ –∑–∞–ø–∏—Å–∏ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 2-–π —Å—Ç—Ä–æ–∫–∏
                                    break
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: {e}")

            # –ü–∞–∫–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
            worksheet.insert_row(new_row, insert_row)
            logger.info(f"–ó–∞–ø–∏—Å—å {record.get('id')} –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏—é {insert_row} —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–∞—Ç–µ")

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
            return False


    def update_record_in_sheet(self, spreadsheet_id: str, sheet_name: str, 
                             record_id: str, field: str, new_value) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ Google Sheet —Å –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã"""
        try:
            worksheet = self.get_worksheet_by_name(spreadsheet_id, sheet_name)
            if not worksheet:
                logger.error(f"–õ–∏—Å—Ç {sheet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            records = worksheet.get_all_records()
            
            field_mapping = {
                'date': '’°’¥’Ω’°’©’´’æ',
                'supplier': '’¥’°’ø’°’Ø’°÷Ä’°÷Ä',
                'direction': '’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂',
                'description': '’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä',
                'amount': '‘±÷Ä’™’•÷Ñ'
            }
            
            sheet_field = field_mapping.get(field, field)
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            record_found = False
            record_row = None
            current_record = None
            
            logger.debug(f"–ò—â–µ–º –∑–∞–ø–∏—Å—å —Å ID: '{record_id}' –≤ {len(records)} –∑–∞–ø–∏—Å—è—Ö")
            
            for i, row in enumerate(records, start=2):
                row_id = str(row.get('ID', '')).strip()
                logger.debug(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å {i}: ID='{row_id}'")
                if row_id == record_id:
                    record_found = True
                    record_row = i
                    current_record = row
                    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å {record_id} –≤ —Å—Ç—Ä–æ–∫–µ {record_row}")
                    break
            
            if not record_found:
                logger.error(f"–ó–∞–ø–∏—Å—å {record_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ ID: {[str(r.get('ID', '')).strip() for r in records[:5]]}")
                return False
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
            formatted_value = new_value
            if field == 'date' and new_value:
                try:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
                    parsed_date = safe_parse_date_or_none(new_value)
                    if parsed_date:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç dd.mm.yy –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
                        formatted_value = parsed_date.strftime('%d.%m.%y')
                        logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–ª–∏ –¥–∞—Ç—É '{new_value}' –≤ '{formatted_value}'")
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É: {new_value}")
                        formatted_value = str(new_value)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞—Ç—ã {new_value}: {e}")
                    formatted_value = str(new_value)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ –∑–∞–ø–∏—Å–∏
            headers = worksheet.row_values(1)
            if sheet_field not in headers:
                logger.error(f"–ü–æ–ª–µ {sheet_field} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö: {headers}")
                return False
            
            col_index = headers.index(sheet_field) + 1
            worksheet.update_cell(record_row, col_index, formatted_value)
            logger.info(f"–ó–∞–ø–∏—Å—å {record_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: –ø–æ–ª–µ '{sheet_field}' = '{formatted_value}'")
            
            # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–∏–ª–∏ –¥–∞—Ç—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
            if field == 'date':
                logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ {record_id}")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—è–¥–∫–∞
                updated_records = worksheet.get_all_records()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ä—É—à–µ–Ω –ª–∏ –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ
                need_resort = False
                prev_date = None
                
                for record in updated_records:
                    date_str = record.get('’°’¥’Ω’°’©’´’æ', '')
                    if date_str:
                        current_date = safe_parse_date_or_none(date_str)
                        if current_date and prev_date and current_date < prev_date:
                            need_resort = True
                            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –¥–∞—Ç: {current_date} < {prev_date}")
                            break
                        prev_date = current_date
                
                # –ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–∞
                if need_resort:
                    logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ª–∏—Å—Ç–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ {record_id}")
                    self.sort_sheet_by_date(spreadsheet_id, sheet_name)
                else:
                    logger.info(f"–ü–µ—Ä–µ—Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –ø–æ—Ä—è–¥–æ–∫ –¥–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
            
            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ {record_id} –≤ Google Sheets: {e}", exc_info=True)
            return False

    def delete_record_from_sheet(self, spreadsheet_id: str, sheet_name: str, record_id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ Google Sheet"""
        try:
            worksheet = self.get_worksheet_by_name(spreadsheet_id, sheet_name)
            if not worksheet:
                return False

            records = worksheet.get_all_records()
            
            for i, row in enumerate(records, start=2):
                if str(row.get('ID', '')).strip() == record_id:
                    worksheet.delete_rows(i)
                    logger.info(f"–ó–∞–ø–∏—Å—å {record_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Google Sheets")
                    return True
            
            return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ Google Sheets: {e}")
            return False

    def sort_sheet_by_date(self, spreadsheet_id: str, sheet_name: str) -> bool:
        """–°–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–∏—Å—Ç–µ –ø–æ –¥–∞—Ç–µ –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        try:
            worksheet = self.get_worksheet_by_name(spreadsheet_id, sheet_name)
            if not worksheet:
                logger.error(f"–õ–∏—Å—Ç {sheet_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
            all_records = worksheet.get_all_records()
            if not all_records:
                logger.info("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")
                return True

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ –¥–∞—Ç–µ
            def get_sort_key(record):
                date_str = record.get('’°’¥’Ω’°’©’´’æ', '')
                if date_str:
                    parsed_date = safe_parse_date_or_none(date_str)
                    if parsed_date:
                        return datetime.combine(parsed_date, datetime.min.time())
                return datetime.min

            sorted_records = sorted(all_records, key=get_sort_key)

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            sorted_data = []
            for record in sorted_records:
                row = [
                    record.get('ID', ''),
                    record.get('’°’¥’Ω’°’©’´’æ', ''),
                    record.get('’¥’°’ø’°’Ø’°÷Ä’°÷Ä', ''),
                    record.get('’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂', ''),
                    record.get('’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä', ''),
                    record.get('‘±÷Ä’™’•÷Ñ', 0)
                ]
                sorted_data.append(row)

            # –ü–∞–∫–µ—Ç–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏ 2
            if sorted_data:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–æ—Ç A2 –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω—É–∂–Ω–æ–π —è—á–µ–π–∫–∏)
                start_row = 2
                end_row = start_row + len(sorted_data) - 1
                end_col = 6  # –£ –Ω–∞—Å 6 –∫–æ–ª–æ–Ω–æ–∫ (ID, –¥–∞—Ç–∞, –ø–æ—Å—Ç–∞–≤—â–∏–∫, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Å—É–º–º–∞)
                
                # –§–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞: A2:F{end_row}
                range_name = f"A{start_row}:F{end_row}"
                
                logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω {range_name} —Å {len(sorted_data)} –∑–∞–ø–∏—Å—è–º–∏")
                worksheet.update(range_name, sorted_data, value_input_option='USER_ENTERED')
                
                logger.info(f"–õ–∏—Å—Ç {sheet_name} –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ –¥–∞—Ç–µ –ø–∞–∫–µ—Ç–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º ({len(sorted_records)} –∑–∞–ø–∏—Å–µ–π)")
            else:
                logger.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏")

            return True

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ª–∏—Å—Ç–∞ –ø–æ –¥–∞—Ç–µ: {e}", exc_info=True)
            return False

    def initialize_sheet_headers(self, spreadsheet_id: str, sheet_name: str) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ª–∏—Å—Ç–µ"""
        try:
            # Get the worksheet by name
            worksheet = self.get_worksheet_by_name(spreadsheet_id, sheet_name)
            # If the worksheet does not exist, return False
            if not worksheet:
                return False

            # Define the headers
            headers = ['ID', '’°’¥’Ω’°’©’´’æ', '’¥’°’ø’°’Ø’°÷Ä’°÷Ä', '’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂', '’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä', '‘±÷Ä’™’•÷Ñ']
            # Ensure the headers are in the worksheet
            self.ensure_headers(worksheet, headers)
            
            # Return True if successful
            return True

        except Exception as e:
            # Log the error
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")
            # Return False if there is an error
            return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Google Sheets
sheets_manager = GoogleSheetsManager()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_client():
    return sheets_manager.get_client()

def list_spreadsheets():
    return sheets_manager.list_spreadsheets()

def get_all_spreadsheets():
    return sheets_manager.get_all_spreadsheets()

def open_sheet_by_id(spreadsheet_id: str):
    return sheets_manager.open_sheet_by_id(spreadsheet_id)

def get_worksheets_info(spreadsheet_id: str):
    return sheets_manager.get_worksheets_info(spreadsheet_id)

def get_worksheet_by_name(spreadsheet_id: str, sheet_name: str):
    return sheets_manager.get_worksheet_by_name(spreadsheet_id, sheet_name)

def get_spreadsheet_info(spreadsheet_id: str):
    return sheets_manager.get_spreadsheet_info(spreadsheet_id)

def add_record_to_sheet(spreadsheet_id: str, sheet_name: str, record: Dict) -> bool:
    return sheets_manager.add_record_to_sheet(spreadsheet_id, sheet_name, record)

def update_record_in_sheet(spreadsheet_id: str, sheet_name: str, 
                          record_id: str, field: str, new_value) -> bool:
    return sheets_manager.update_record_in_sheet(spreadsheet_id, sheet_name, 
                                               record_id, field, new_value)

def delete_record_from_sheet(spreadsheet_id: str, sheet_name: str, record_id: str) -> bool:
    return sheets_manager.delete_record_from_sheet(spreadsheet_id, sheet_name, record_id)

def initialize_sheet_headers(spreadsheet_id: str, sheet_name: str) -> bool:
    return sheets_manager.initialize_sheet_headers(spreadsheet_id, sheet_name)

def sort_sheet_by_date(spreadsheet_id: str, sheet_name: str) -> bool:
    return sheets_manager.sort_sheet_by_date(spreadsheet_id, sheet_name)
