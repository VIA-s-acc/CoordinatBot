import json
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
from google_connector import list_spreadsheets, open_sheet_by_id
import os 
# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
TOKEN = os.environ.get('TOKEN')
CONFIG_FILE = 'config.json'
spreadsheet_map = {}

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def load_config():
    with open(CONFIG_FILE, 'r') as f:
        return json.load(f)

def save_config(config):
    with open(CONFIG_FILE, 'w') as f:
        json.dump(config, f, indent=2)

def get_active_spreadsheet_id():
    return load_config().get('active_spreadsheet_id')

def set_active_spreadsheet_id(spreadsheet_id: str):
    config = load_config()
    config['active_spreadsheet_id'] = spreadsheet_id
    save_config(config)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /list_tables –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /connect_id <N> –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω—É–∂–Ω–æ–π."
    )

async def list_tables(update: Update, context: CallbackContext):
    global spreadsheet_map
    try:
        files = list_spreadsheets()
        if not files:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü.")
            return

        spreadsheet_map = {str(i): f for i, f in enumerate(files, 1)}
        reply = "üìÑ –°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü:\n"
        for idx, f in spreadsheet_map.items():
            reply += f"{idx}. {f['name']} (ID: `{f['id']}`)\n"
        reply += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /connect_id <–Ω–æ–º–µ—Ä>"
        await update.message.reply_text(reply, parse_mode="Markdown")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

async def connect_id(update: Update, context: CallbackContext):
    global spreadsheet_map
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã. –ü—Ä–∏–º–µ—Ä: /connect_id 1")
        return

    idx = context.args[0]
    selected = spreadsheet_map.get(idx)

    if not selected:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return

    try:
        sheet = open_sheet_by_id(selected['id'])
        first_tab = sheet.worksheets()[0].title
        set_active_spreadsheet_id(selected['id'])
        await update.message.reply_text(
            f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: *{selected['name']}*\n"
            f"–ü–µ—Ä–≤—ã–π –ª–∏—Å—Ç: `{first_tab}`",
            parse_mode="Markdown"
        )
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {e}")

# === –ó–∞–ø—É—Å–∫ ===

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list_tables", list_tables))
    app.add_handler(CommandHandler("connect_id", connect_id))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == '__main__':
    main()
