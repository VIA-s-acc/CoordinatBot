import json
import logging
import os
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, filters, CallbackContext
from google_connector import (get_worksheets_info, add_record_to_sheet, 
                            update_record_in_sheet, delete_record_from_sheet, 
                            get_record_by_id, get_all_spreadsheets, get_spreadsheet_info)
from database import init_db, add_record_to_db, update_record_in_db, delete_record_from_db, get_record_from_db, get_db_stats
import uuid

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
from dotenv import load_dotenv
load_dotenv()
TOKEN = os.getenv('TOKEN')
if not TOKEN:
    raise ValueError("TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª")

CONFIG_FILE = 'config.json'
ADMIN_IDS = [714158870]  # –î–æ–±–∞–≤—å—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(DATE, SUPPLIER, DIRECTION, DESCRIPTION, AMOUNT, 
 EDIT_FIELD, EDIT_VALUE, CONFIRM_DELETE) = range(8)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def load_config():
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {
            'active_spreadsheet_id': None,
            'active_sheet_name': None,
            'log_chat_id': None
        }

def save_config(config):
    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)

def get_active_spreadsheet_id():
    return load_config().get('active_spreadsheet_id')

def get_active_sheet_name():
    return load_config().get('active_sheet_name')

def get_log_chat_id():
    return load_config().get('log_chat_id')

def set_active_spreadsheet(spreadsheet_id: str, sheet_name: str = None):
    config = load_config()
    config['active_spreadsheet_id'] = spreadsheet_id
    config['active_sheet_name'] = sheet_name
    save_config(config)

def set_log_chat(chat_id: int):
    config = load_config()
    config['log_chat_id'] = chat_id
    save_config(config)

async def send_to_log_chat(context: CallbackContext, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-—á–∞—Ç"""
    log_chat_id = get_log_chat_id()
    if log_chat_id:
        try:
            await context.bot.send_message(chat_id=log_chat_id, text=f"üìù LOG: {message}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª–æ–≥-—á–∞—Ç: {e}")

def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="add_record")],
        [InlineKeyboardButton("üìä –í—ã–±—Ä–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="select_spreadsheet")],
        [InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –ª–∏—Å—Ç", callback_data="select_sheet")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
        [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_edit_menu(record_id: str):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    keyboard = [
        [InlineKeyboardButton("üìÖ –î–∞—Ç–∞", callback_data=f"edit_date_{record_id}")],
        [InlineKeyboardButton("üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫", callback_data=f"edit_supplier_{record_id}")],
        [InlineKeyboardButton("üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"edit_direction_{record_id}")],
        [InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description_{record_id}")],
        [InlineKeyboardButton("üí∞ –°—É–º–º–∞", callback_data=f"edit_amount_{record_id}")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{record_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ]
    return InlineKeyboardMarkup(keyboard)

def format_record_info(record: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏"""
    return (
        f"üÜî ID: <code>{record.get('id', 'N/A')}</code>\n"
        f"üìÖ –î–∞—Ç–∞: <b>{record.get('date', 'N/A')}</b>\n"
        f"üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫: <b>{record.get('supplier', 'N/A')}</b>\n"
        f"üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{record.get('direction', 'N/A')}</b>\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: <b>{record.get('description', 'N/A')}</b>\n"
        f"üí∞ –°—É–º–º–∞: <b>{record.get('amount', 0):,.2f}</b>"
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===

async def start(update: Update, context: CallbackContext):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    init_db()
    
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤!\n\n"
        "–§—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ Google Sheets\n"
        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π\n"
        "‚Ä¢ üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/menu - –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/set_log - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥-—á–∞—Ç (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)\n"
        "/set_sheet - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Google Sheet ID",
        reply_markup=create_main_menu()
    )

async def menu_command(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=create_main_menu()
    )

async def set_log_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS and len(ADMIN_IDS) > 0:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    chat_id = update.effective_chat.id
    set_log_chat(chat_id)
    await update.message.reply_text(
        f"‚úÖ –õ–æ–≥-—á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
        f"Chat ID: <code>{chat_id}</code>\n"
        f"–í—Å–µ –ª–æ–≥–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
        parse_mode="HTML"
    )
    await send_to_log_chat(context, f"–õ–æ–≥-—á–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. Chat ID: {chat_id}")

async def set_sheet_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ID Google Spreadsheet"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS and len(ADMIN_IDS) > 0:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = context.args
    if not args:
        await update.message.reply_text(
            "üìä –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Google Spreadsheet –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "<code>/set_sheet YOUR_SPREADSHEET_ID</code>\n\n"
            "ID –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ URL —Ç–∞–±–ª–∏—Ü—ã:\n"
            "https://docs.google.com/spreadsheets/d/<b>SPREADSHEET_ID</b>/edit",
            parse_mode="HTML"
        )
        return
    
    spreadsheet_id = args[0].strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã
    try:
        sheets_info, spreadsheet_title = get_worksheets_info(spreadsheet_id)
        if not sheets_info:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–∞–±–ª–∏—Ü—ã
        set_active_spreadsheet(spreadsheet_id)
        
        await update.message.reply_text(
            f"‚úÖ Google Spreadsheet –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!\n"
            f"üìä –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{spreadsheet_title}</b>\n"
            f"üÜî ID: <code>{spreadsheet_id}</code>\n"
            f"üìã –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(sheets_info)}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ /menu ‚Üí üìã –í—ã–±—Ä–∞—Ç—å –ª–∏—Å—Ç",
            parse_mode="HTML"
        )
        
        await send_to_log_chat(context, f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∞ Google Spreadsheet: {spreadsheet_title} (ID: {spreadsheet_id})")
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–∞–±–ª–∏—Ü–µ:\n<code>{str(e)}</code>\n\n"
            f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            f"‚Ä¢ ID —Ç–∞–±–ª–∏—Ü—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π\n"
            f"‚Ä¢ –°–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ\n"
            f"‚Ä¢ –§–∞–π–ª credentials –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π",
            parse_mode="HTML"
        )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ===

async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "add_record":
        return await start_add_record(update, context)
    elif data == "select_spreadsheet":
        return await select_spreadsheet_menu(update, context)
    elif data == "select_sheet":
        return await select_sheet_menu(update, context)
    elif data == "status":
        return await show_status(update, context)
    elif data == "stats":
        return await show_stats(update, context)
    elif data.startswith("spreadsheet_"):
        return await select_spreadsheet(update, context)
    elif data.startswith("sheet_"):
        return await select_sheet(update, context)
    elif data.startswith("final_sheet_"):
        return await select_final_sheet(update, context)
    elif data.startswith("edit_"):
        return await handle_edit_button(update, context)
    elif data.startswith("delete_"):
        return await handle_delete_button(update, context)
    elif data.startswith("confirm_delete_"):
        return await confirm_delete(update, context)
    elif data == "cancel_edit":
        await query.edit_message_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    elif data == "back_to_menu":
        await query.edit_message_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=create_main_menu())

async def show_status(update: Update, context: CallbackContext):
    query = update.callback_query
    config = load_config()
    
    spreadsheet_id = config.get('active_spreadsheet_id')
    sheet_name = config.get('active_sheet_name')
    log_chat_id = config.get('log_chat_id')
    
    status_text = "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n\n"
    
    if spreadsheet_id:
        status_text += f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: <code>{spreadsheet_id[:10]}...</code>\n"
        if sheet_name:
            status_text += f"üìã –ê–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç: <code>{sheet_name}</code>\n"
        else:
            status_text += "‚ö†Ô∏è –õ–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω\n"
    else:
        status_text += "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
    
    if log_chat_id:
        status_text += f"üìù –õ–æ–≥-—á–∞—Ç: <code>{log_chat_id}</code>\n"
    else:
        status_text += "üìù –õ–æ–≥-—á–∞—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    
    await query.edit_message_text(
        status_text, 
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def show_stats(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    query = update.callback_query
    
    stats = get_db_stats()
    if stats:
        stats_text = (
            f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n"
            f"üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats['total_records']}\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']:,.2f}\n"
            f"üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: {stats['recent_records']} –∑–∞–ø–∏—Å–µ–π"
        )
    else:
        stats_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
    
    await query.edit_message_text(
        stats_text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def select_sheet_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    
    spreadsheet_id = get_active_spreadsheet_id()
    if not spreadsheet_id:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        await query.edit_message_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_sheet",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    try:
        sheets_info, spreadsheet_title = get_worksheets_info(spreadsheet_id)
        
        if not sheets_info:
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            await query.edit_message_text(
                "‚ùå –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –ª–∏—Å—Ç–æ–≤.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        keyboard = []
        for info in sheets_info:
            keyboard.append([InlineKeyboardButton(
                f"üìã {info['title']}", 
                callback_data=f"sheet_{info['title']}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        
        await query.edit_message_text(
            f"üìã –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã <b>{spreadsheet_title}</b>:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
        
    except Exception as e:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        await query.edit_message_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def select_sheet(update: Update, context: CallbackContext):
    """–í—ã–±–∏—Ä–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç"""
    query = update.callback_query
    sheet_name = query.data.replace("sheet_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ª–∏—Å—Ç
    spreadsheet_id = get_active_spreadsheet_id()
    set_active_spreadsheet(spreadsheet_id, sheet_name)
    
    await query.edit_message_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω –ª–∏—Å—Ç: <b>{sheet_name}</b>\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏!",
        parse_mode="HTML",
        reply_markup=create_main_menu()
    )
    
    await send_to_log_chat(context, f"–í—ã–±—Ä–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç: {sheet_name}")

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ===

async def start_add_record(update: Update, context: CallbackContext):
    query = update.callback_query
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not get_active_spreadsheet_id() or not get_active_sheet_name():
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        await query.edit_message_text(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ª–∏—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üìã –í—ã–±—Ä–∞—Ç—å –ª–∏—Å—Ç",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return ConversationHandler.END
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    record_id = str(uuid.uuid4())[:8]
    current_date = datetime.now().strftime("%Y-%m-%d")
    
    context.user_data['record'] = {
        'id': record_id,
        'date': current_date
    }
    
    await query.edit_message_text(
        f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏\n"
        f"üÜî ID: <code>{record_id}</code>\n\n"
        f"üìÖ –î–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {current_date})\n"
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '+' –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã:",
        parse_mode="HTML"
    )
    
    return DATE

async def get_date(update: Update, context: CallbackContext):
    date_input = update.message.text.strip()
    
    if date_input == '+':
        date_value = context.user_data['record']['date']
    else:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            datetime.strptime(date_input, "%Y-%m-%d")
            date_value = date_input
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '+' –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã."
            )
            return DATE
    
    context.user_data['record']['date'] = date_value
    
    await update.message.reply_text(
        f"‚úÖ –î–∞—Ç–∞: {date_value}\n\n"
        f"üè™ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (’¥’°’ø’°’Ø’°÷Ä’°÷Ä):"
    )
    
    return SUPPLIER

async def get_supplier(update: Update, context: CallbackContext):
    supplier = update.message.text.strip()
    context.user_data['record']['supplier'] = supplier
    
    await update.message.reply_text(
        f"‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier}\n\n"
        f"üß≠ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂):"
    )
    
    return DIRECTION

async def get_direction(update: Update, context: CallbackContext):
    direction = update.message.text.strip()
    context.user_data['record']['direction'] = direction
    
    await update.message.reply_text(
        f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ (’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä):"
    )
    
    return DESCRIPTION

async def get_description(update: Update, context: CallbackContext):
    description = update.message.text.strip()
    context.user_data['record']['description'] = description
    
    await update.message.reply_text(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (‘±÷Ä’™’•÷Ñ):"
    )
    
    return AMOUNT

async def get_amount(update: Update, context: CallbackContext):
    amount_input = update.message.text.strip()
    
    try:
        amount = float(amount_input)
        context.user_data['record']['amount'] = amount
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∑–∞–ø–∏—Å—å
        record = context.user_data['record']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_success = add_record_to_db(record)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
        spreadsheet_id = get_active_spreadsheet_id()
        sheet_name = get_active_sheet_name()
        sheet_success = add_record_to_sheet(spreadsheet_id, sheet_name, record)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = "‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        result_text += format_record_info(record)
        result_text += "\n\n"
        
        if db_success and sheet_success:
            result_text += "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î –∏ Google Sheets"
        elif db_success:
            result_text += "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î\n‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Google Sheets"
        elif sheet_success:
            result_text += "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î\n‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ Google Sheets"
        else:
            result_text += "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î –∏ Google Sheets"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [[InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_record_{record['id']}")]]
        
        await update.message.reply_text(
            result_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–≥-—á–∞—Ç
        await send_to_log_chat(context, f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å ID: {record['id']}, —Å—É–º–º–∞: {amount}")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        
        return ConversationHandler.END
        
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 1000.50):"
        )
        return AMOUNT

# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π ===

async def handle_edit_button(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query
    data = query.data
    
    if data.startswith("edit_record_"):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        record_id = data.replace("edit_record_", "")
        return await show_edit_menu(update, context, record_id)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
    parts = data.split("_")
    if len(parts) >= 3:
        field = parts[1]
        record_id = "_".join(parts[2:])
        
        context.user_data['edit_record_id'] = record_id
        context.user_data['edit_field'] = field
        
        field_names = {
            'date': '–¥–∞—Ç—É (YYYY-MM-DD)',
            'supplier': '–ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
            'direction': '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
            'description': '–æ–ø–∏—Å–∞–Ω–∏–µ',
            'amount': '—Å—É–º–º—É'
        }
        
        await query.edit_message_text(
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ID: <code>{record_id}</code>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_names.get(field, field)}':",
            parse_mode="HTML"
        )
        
        return EDIT_VALUE

async def show_edit_menu(update: Update, context: CallbackContext, record_id: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    query = update.callback_query
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    record = get_record_from_db(record_id)
    if not record:
        await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END
    
    text = "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n\n"
    text += format_record_info(record)
    text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    
    await query.edit_message_text(
        text,
        parse_mode="HTML",
        reply_markup=create_edit_menu(record_id)
    )

async def get_edit_value(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ –ø–æ–ª—è"""
    new_value = update.message.text.strip()
    record_id = context.user_data.get('edit_record_id')
    field = context.user_data.get('edit_field')
    
    if not record_id or not field:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return ConversationHandler.END
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if field == 'date':
        try:
            datetime.strptime(new_value, "%Y-%m-%d")
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD."
            )
            return EDIT_VALUE
    elif field == 'amount':
        try:
            new_value = float(new_value)
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
            )
            return EDIT_VALUE
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_success = update_record_in_db(record_id, field, new_value)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ Google Sheets
    spreadsheet_id = get_active_spreadsheet_id()
    sheet_name = get_active_sheet_name()
    sheet_success = update_record_in_sheet(spreadsheet_id, sheet_name, record_id, field, new_value)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    if db_success and sheet_success:
        result_text = f"‚úÖ –ü–æ–ª–µ '{field}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ '{new_value}'"
    elif db_success:
        result_text = f"‚úÖ –ü–æ–ª–µ '{field}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –ë–î\n‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Google Sheets"
    elif sheet_success:
        result_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î\n‚úÖ –ü–æ–ª–µ '{field}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Google Sheets"
    else:
        result_text = f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è '{field}'"
    
    await update.message.reply_text(result_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–≥-—á–∞—Ç
    await send_to_log_chat(context, f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å ID: {record_id}, –ø–æ–ª–µ: {field}, –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    return ConversationHandler.END

# === –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π ===

async def handle_delete_button(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è"""
    query = update.callback_query
    record_id = query.data.replace("delete_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
    record = get_record_from_db(record_id)
    if not record:
        await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return ConversationHandler.END
    
    text = "üóë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
    text += format_record_info(record)
    text += "\n\n‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
    
    keyboard = [
        [InlineKeyboardButton("üóë –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{record_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ]
    
    await query.edit_message_text(
        text,
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def confirm_delete(update: Update, context: CallbackContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    query = update.callback_query
    record_id = query.data.replace("confirm_delete_", "")
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_success = delete_record_from_db(record_id)
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ Google Sheets
    spreadsheet_id = get_active_spreadsheet_id()
    sheet_name = get_active_sheet_name()
    sheet_success = delete_record_from_sheet(spreadsheet_id, sheet_name, record_id)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    if db_success and sheet_success:
        result_text = f"‚úÖ –ó–∞–ø–∏—Å—å ID: <code>{record_id}</code> —É–¥–∞–ª–µ–Ω–∞"
    elif db_success:
        result_text = f"‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î\n‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Google Sheets"
    elif sheet_success:
        result_text = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î\n‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Google Sheets"
    else:
        result_text = f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ ID: <code>{record_id}</code>"
    
    await query.edit_message_text(
        result_text,
        parse_mode="HTML",
        reply_markup=create_main_menu()
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–æ–≥-—á–∞—Ç
    await send_to_log_chat(context, f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å ID: {record_id}")
    
    return ConversationHandler.END

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã ===

async def cancel(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=create_main_menu()
    )
    context.user_data.clear()
    return ConversationHandler.END

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ===

async def error_handler(update: object, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏"""
    logger.error(f"Exception while handling an update: {context.error}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –≤ –ª–æ–≥-—á–∞—Ç
    if context.error:
        await send_to_log_chat(context, f"–û–®–ò–ë–ö–ê: {str(context.error)}")

# === –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π ===

async def search_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π"""
    args = context.args
    if not args:
        await update.message.reply_text(
            "üîç –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π:\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/search [—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞]</code>\n\n"
            "–ü–æ–∏—Å–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –ø–æ–ª—è–º: –ø–æ—Å—Ç–∞–≤—â–∏–∫, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ",
            parse_mode="HTML"
        )
        return
    
    query = " ".join(args)
    
    try:
        from database import search_records
        records = search_records(query, limit=10)
        
        if not records:
            await update.message.reply_text(
                f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '<b>{query}</b>' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                parse_mode="HTML"
            )
            return
        
        result_text = f"üîç –ù–∞–π–¥–µ–Ω–æ {len(records)} –∑–∞–ø–∏—Å–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '<b>{query}</b>':\n\n"
        
        for i, record in enumerate(records, 1):
            result_text += f"{i}. ID: <code>{record['id']}</code>\n"
            result_text += f"   üìÖ {record['date']} | üí∞ {record['amount']:,.2f}\n"
            result_text += f"   üè™ {record['supplier']}\n"
            result_text += f"   üìù {record['description'][:50]}{'...' if len(record['description']) > 50 else ''}\n\n"
        
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –º–Ω–æ–≥–æ, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        if len(records) == 10:
            result_text += "‚ÑπÔ∏è –ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."
        
        await update.message.reply_text(result_text, parse_mode="HTML")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")

# === –ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö ===

async def export_command(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS and len(ADMIN_IDS) > 0:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        from database import backup_db_to_dict
        backup_data = backup_db_to_dict()
        
        if not backup_data:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.")
            return
        
        # –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª
        import json
        filename = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(backup_data, f, indent=2, ensure_ascii=False)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(filename, 'rb') as f:
            await update.message.reply_document(
                document=f,
                filename=filename,
                caption=f"üì§ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
                       f"üìä –ó–∞–ø–∏—Å–µ–π: {backup_data['stats']['total_records']}\n"
                       f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {backup_data['stats']['total_amount']:,.2f}\n"
                       f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {backup_data['backup_date']}"
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filename)
        
        await send_to_log_chat(context, f"–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_data['stats']['total_records']} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

# === –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π ===

async def recent_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    try:
        from database import get_all_records
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5
        args = context.args
        limit = 5
        if args:
            try:
                limit = min(int(args[0]), 1000)  # –ú–∞–∫—Å–∏–º—É–º 1000 –∑–∞–ø–∏—Å–µ–π
            except ValueError:
                pass
        
        records = get_all_records(limit=limit)
        
        if not records:
            await update.message.reply_text("üìù –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
            return
        
        result_text = f"üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(records)} –∑–∞–ø–∏—Å–µ–π:\n\n"
        
        for i, record in enumerate(records, 1):
            result_text += f"{i}. ID: <code>{record['id']}</code>\n"
            result_text += f"   üìÖ {record['date']} | üí∞ {record['amount']:,.2f}\n"
            result_text += f"   üè™ {record['supplier']}\n"
            result_text += f"   üß≠ {record['direction']}\n"
            result_text += f"   üìù {record['description']}\n\n"
        
        await update.message.reply_text(result_text, parse_mode="HTML")
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {e}")

# === –ö–æ–º–∞–Ω–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏ ===

async def info_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ –ø–æ ID"""
    args = context.args
    if not args:
        await update.message.reply_text(
            "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏:\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/info [ID –∑–∞–ø–∏—Å–∏]</code>",
            parse_mode="HTML"
        )
        return
    
    record_id = args[0].strip()
    
    try:
        record = get_record_from_db(record_id)
        
        if not record:
            await update.message.reply_text(
                f"‚ùå –ó–∞–ø–∏—Å—å —Å ID <code>{record_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
                parse_mode="HTML"
            )
            return
        
        result_text = "‚ÑπÔ∏è –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏:\n\n"
        result_text += format_record_info(record)
        result_text += f"\n\nüìÖ –°–æ–∑–¥–∞–Ω–∞: {record.get('created_at', 'N/A')}"
        result_text += f"\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞: {record.get('updated_at', 'N/A')}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [[InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_record_{record_id}")]]
        
        await update.message.reply_text(
            result_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

# === –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ ===

async def help_command(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
/menu - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏:**
/recent [N] - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
/search [—Ç–µ–∫—Å—Ç] - –ø–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π –ø–æ —Ç–µ–∫—Å—Ç—É
/info [ID] - –¥–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏

**–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**
/set_sheet [ID] - –ø–æ–¥–∫–ª—é—á–∏—Ç—å Google Spreadsheet
/set_log - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç –∫–∞–∫ –ª–æ–≥-—á–∞—Ç
/export - —ç–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ JSON

**–†–∞–±–æ—Ç–∞ —Å –∑–∞–ø–∏—Å—è–º–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é:**
‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å - –ø–æ—à–∞–≥–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
‚Ä¢ üìã –í—ã–±—Ä–∞—Ç—å –ª–∏—Å—Ç - –≤—ã–±–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
‚Ä¢ üìä –°—Ç–∞—Ç—É—Å - —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

**–ü–æ–ª—è –∑–∞–ø–∏—Å–∏:**
‚Ä¢ ’°’¥’Ω’°’©’´’æ (–¥–∞—Ç–∞) - –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
‚Ä¢ ’¥’°’ø’°’Ø’°÷Ä’°÷Ä (–ø–æ—Å—Ç–∞–≤—â–∏–∫) - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
‚Ä¢ ’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂ (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ) - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
‚Ä¢ ’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä (–æ–ø–∏—Å–∞–Ω–∏–µ) - –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
‚Ä¢ ‘±÷Ä’™’•÷Ñ (—Å—É–º–º–∞) - —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–∞

**–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
/recent 10 - –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
/search –ø—Ä–æ–¥—É–∫—Ç—ã - –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å–∏ —Å–æ —Å–ª–æ–≤–æ–º "–ø—Ä–æ–¥—É–∫—Ç—ã"
/info abc12345 - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏ —Å ID "abc12345"

–í—Å–µ –∑–∞–ø–∏—Å–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –º–µ–∂–¥—É Telegram, Google Sheets –∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
"""
    
    await update.message.reply_text(help_text, parse_mode="Markdown")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not init_db():
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
        add_record_conv = ConversationHandler(
            entry_points=[CallbackQueryHandler(start_add_record, pattern="^add_record$")],
            states={
                DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
                SUPPLIER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_supplier)],
                DIRECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_direction)],
                DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
                AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_amount)],
            },
            fallbacks=[CommandHandler("cancel", cancel)],
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
        edit_record_conv = ConversationHandler(
            entry_points=[CallbackQueryHandler(button_handler, pattern="^edit_")],
            states={
                EDIT_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_edit_value)],
            },
            fallbacks=[
                CommandHandler("cancel", cancel),
                CallbackQueryHandler(button_handler, pattern="^cancel_edit$")
            ],
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("menu", menu_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("set_log", set_log_command))
        application.add_handler(CommandHandler("set_sheet", set_sheet_command))
        application.add_handler(CommandHandler("search", search_command))
        application.add_handler(CommandHandler("export", export_command))
        application.add_handler(CommandHandler("recent", recent_command))
        application.add_handler(CommandHandler("info", info_command))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ConversationHandler'–æ–≤
        application.add_handler(add_record_conv)
        application.add_handler(edit_record_conv)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ ConversationHandler'–æ–≤)
        application.add_handler(CallbackQueryHandler(button_handler))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

async def select_spreadsheet_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ Google Spreadsheet"""
    query = update.callback_query
    
    from google_connector import get_all_spreadsheets
    
    try:
        spreadsheets = get_all_spreadsheets()
        
        if not spreadsheets:
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            await query.edit_message_text(
                "‚ùå –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–∞–º.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        keyboard = []
        for spreadsheet in spreadsheets[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 —Ç–∞–±–ª–∏—Ü
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
            name = spreadsheet['name'][:30] + "..." if len(spreadsheet['name']) > 30 else spreadsheet['name']
            keyboard.append([InlineKeyboardButton(
                f"üìä {name}", 
                callback_data=f"spreadsheet_{spreadsheet['id']}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        
        text = f"üìä –í—ã–±–µ—Ä–∏—Ç–µ Google Spreadsheet ({len(spreadsheets)} –¥–æ—Å—Ç—É–ø–Ω–æ):"
        if len(spreadsheets) > 10:
            text += f"\n\n–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10 —Ç–∞–±–ª–∏—Ü."
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        
    except Exception as e:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        await query.edit_message_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: {e}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def select_spreadsheet(update: Update, context: CallbackContext):
    """–í—ã–±–∏—Ä–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é Google Spreadsheet –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ—ë –ª–∏—Å—Ç—ã"""
    query = update.callback_query
    spreadsheet_id = query.data.replace("spreadsheet_", "")
    
    from google_connector import get_spreadsheet_info
    
    try:
        spreadsheet_info = get_spreadsheet_info(spreadsheet_id)
        
        if not spreadsheet_info:
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="select_spreadsheet")]]
            await query.edit_message_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        if not spreadsheet_info['sheets']:
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="select_spreadsheet")]]
            await query.edit_message_text(
                f"‚ùå –í —Ç–∞–±–ª–∏—Ü–µ '{spreadsheet_info['title']}' –Ω–µ—Ç –ª–∏—Å—Ç–æ–≤.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        context.user_data['selected_spreadsheet_id'] = spreadsheet_id
        context.user_data['selected_spreadsheet_title'] = spreadsheet_info['title']
        
        keyboard = []
        for sheet in spreadsheet_info['sheets']:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫
            sheet_info = f"{sheet['title']} ({sheet['row_count']} —Å—Ç—Ä–æ–∫)"
            keyboard.append([InlineKeyboardButton(
                f"üìã {sheet_info}", 
                callback_data=f"final_sheet_{sheet['title']}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É —Ç–∞–±–ª–∏—Ü", callback_data="select_spreadsheet")])
        
        await query.edit_message_text(
            f"üìä –¢–∞–±–ª–∏—Ü–∞: <b>{spreadsheet_info['title']}</b>\n"
            f"üìã –õ–∏—Å—Ç–æ–≤: {spreadsheet_info['sheets_count']}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
        
    except Exception as e:
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="select_spreadsheet")]]
        await query.edit_message_text(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def select_final_sheet(update: Update, context: CallbackContext):
    """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞–µ—Ç –ª–∏—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    query = update.callback_query
    sheet_name = query.data.replace("final_sheet_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ user_data
    spreadsheet_id = context.user_data.get('selected_spreadsheet_id')
    spreadsheet_title = context.user_data.get('selected_spreadsheet_title')
    
    if not spreadsheet_id:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    set_active_spreadsheet(spreadsheet_id, sheet_name)
    
    await query.edit_message_text(
        f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"üìä –¢–∞–±–ª–∏—Ü–∞: <b>{spreadsheet_title}</b>\n"
        f"üìã –õ–∏—Å—Ç: <b>{sheet_name}</b>\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å–∏!",
        parse_mode="HTML",
        reply_markup=create_main_menu()
    )
    
    await send_to_log_chat(context, f"–í—ã–±—Ä–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: {spreadsheet_title}, –ª–∏—Å—Ç: {sheet_name}")
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('selected_spreadsheet_id', None)
    context.user_data.pop('selected_spreadsheet_title', None)

if __name__ == '__main__':
    main()