import json
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ConversationHandler, MessageHandler, filters, CallbackContext
from google_connector import get_worksheets_info, add_record_to_sheet, update_record_in_sheet, delete_record_from_sheet, get_record_by_id
from database import init_db, add_record_to_db, update_record_in_db, delete_record_from_db, get_record_from_db
import uuid

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
from dotenv import load_dotenv
load_dotenv()
TOKEN = os.getenv('TOKEN')
CONFIG_FILE = 'config.json'
ADMIN_IDS = [714158870]  # –î–æ–±–∞–≤—å—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(DATE, SUPPLIER, DIRECTION, DESCRIPTION, AMOUNT, 
 EDIT_FIELD, EDIT_VALUE, CONFIRM_DELETE) = range(8)

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ===

def load_config():
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {
            'active_spreadsheet_id': None,
            'active_sheet_name': None,
            'log_chat_id': None
        }

def save_config(config):
    with open(CONFIG_FILE, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)

def get_active_spreadsheet_id():
    return load_config().get('active_spreadsheet_id')

def get_active_sheet_name():
    return load_config().get('active_sheet_name')

def get_log_chat_id():
    return load_config().get('log_chat_id')

def set_active_spreadsheet(spreadsheet_id: str, sheet_name: str = None):
    config = load_config()
    config['active_spreadsheet_id'] = spreadsheet_id
    config['active_sheet_name'] = sheet_name
    save_config(config)

def set_log_chat(chat_id: int):
    config = load_config()
    config['log_chat_id'] = chat_id
    save_config(config)

async def send_to_log_chat(context: CallbackContext, message: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥-—á–∞—Ç"""
    log_chat_id = get_log_chat_id()
    if log_chat_id:
        try:
            await context.bot.send_message(chat_id=log_chat_id, text=f"üìù LOG: {message}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª–æ–≥-—á–∞—Ç: {e}")

def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="add_record")],
        [InlineKeyboardButton("üìã –í—ã–±—Ä–∞—Ç—å –ª–∏—Å—Ç", callback_data="select_sheet")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_edit_menu(record_id: str):
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    keyboard = [
        [InlineKeyboardButton("üìÖ –î–∞—Ç–∞", callback_data=f"edit_date_{record_id}")],
        [InlineKeyboardButton("üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫", callback_data=f"edit_supplier_{record_id}")],
        [InlineKeyboardButton("üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data=f"edit_direction_{record_id}")],
        [InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_description_{record_id}")],
        [InlineKeyboardButton("üí∞ –°—É–º–º–∞", callback_data=f"edit_amount_{record_id}")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{record_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ]
    return InlineKeyboardMarkup(keyboard)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ===

async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤!\n\n"
        "–§—É–Ω–∫—Ü–∏–∏:\n"
        "‚Ä¢ ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ Google Sheets\n"
        "‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π\n"
        "‚Ä¢ üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/menu - –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/set_log - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥-—á–∞—Ç (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)",
        reply_markup=create_main_menu()
    )

async def menu_command(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=create_main_menu()
    )

async def set_log_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS and len(ADMIN_IDS) > 0:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    chat_id = update.effective_chat.id
    set_log_chat(chat_id)
    await update.message.reply_text(
        f"‚úÖ –õ–æ–≥-—á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n"
        f"Chat ID: <code>{chat_id}</code>\n"
        f"–í—Å–µ –ª–æ–≥–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
        parse_mode="HTML"
    )
    await send_to_log_chat(context, f"–õ–æ–≥-—á–∞—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. Chat ID: {chat_id}")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ ===

async def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "add_record":
        return await start_add_record(update, context)
    elif data == "select_sheet":
        return await select_sheet_menu(update, context)
    elif data == "status":
        return await show_status(update, context)
    elif data.startswith("edit_"):
        return await handle_edit_button(update, context)
    elif data.startswith("delete_"):
        return await handle_delete_button(update, context)
    elif data == "cancel_edit":
        await query.edit_message_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

async def show_status(update: Update, context: CallbackContext):
    query = update.callback_query
    config = load_config()
    
    spreadsheet_id = config.get('active_spreadsheet_id')
    sheet_name = config.get('active_sheet_name')
    log_chat_id = config.get('log_chat_id')
    
    status_text = "üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:\n\n"
    
    if spreadsheet_id:
        status_text += f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: <code>{spreadsheet_id}</code>\n"
        if sheet_name:
            status_text += f"üìã –ê–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç: <code>{sheet_name}</code>\n"
        else:
            status_text += "‚ö†Ô∏è –õ–∏—Å—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω\n"
    else:
        status_text += "‚ùå –¢–∞–±–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞\n"
    
    if log_chat_id:
        status_text += f"üìù –õ–æ–≥-—á–∞—Ç: <code>{log_chat_id}</code>\n"
    else:
        status_text += "üìù –õ–æ–≥-—á–∞—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
    
    await query.edit_message_text(status_text, parse_mode="HTML")

async def select_sheet_menu(update: Update, context: CallbackContext):
    query = update.callback_query
    
    spreadsheet_id = get_active_spreadsheet_id()
    if not spreadsheet_id:
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É.")
        return
    
    try:
        sheets_info, spreadsheet_title = get_worksheets_info(spreadsheet_id)
        
        if not sheets_info:
            await query.edit_message_text("‚ùå –í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –ª–∏—Å—Ç–æ–≤.")
            return
        
        keyboard = []
        for info in sheets_info:
            keyboard.append([InlineKeyboardButton(
                f"üìã {info['title']}", 
                callback_data=f"sheet_{info['title']}"
            )])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        
        await query.edit_message_text(
            f"üìã –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç –∏–∑ —Ç–∞–±–ª–∏—Ü—ã <b>{spreadsheet_title}</b>:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
        
    except Exception as e:
        await query.edit_message_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ ===

async def start_add_record(update: Update, context: CallbackContext):
    query = update.callback_query
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not get_active_spreadsheet_id() or not get_active_sheet_name():
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –ª–∏—Å—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã.")
        return ConversationHandler.END
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    record_id = str(uuid.uuid4())[:8]
    current_date = datetime.now().strftime("%Y-%m-%d")
    
    context.user_data['record'] = {
        'id': record_id,
        'date': current_date
    }
    
    await query.edit_message_text(
        f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏\n"
        f"üÜî ID: <code>{record_id}</code>\n\n"
        f"üìÖ –î–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {current_date})\n"
        f"–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '+' –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã:",
        parse_mode="HTML"
    )
    
    return DATE

async def get_date(update: Update, context: CallbackContext):
    date_input = update.message.text.strip()
    
    if date_input == '+':
        date_value = context.user_data['record']['date']
    else:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            datetime.strptime(date_input, "%Y-%m-%d")
            date_value = date_input
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '+' –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã."
            )
            return DATE
    
    context.user_data['record']['date'] = date_value
    
    await update.message.reply_text(
        f"‚úÖ –î–∞—Ç–∞: {date_value}\n\n"
        f"üè™ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (’¥’°’ø’°’Ø’°÷Ä’°÷Ä):"
    )
    
    return SUPPLIER

async def get_supplier(update: Update, context: CallbackContext):
    supplier = update.message.text.strip()
    context.user_data['record']['supplier'] = supplier
    
    await update.message.reply_text(
        f"‚úÖ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {supplier}\n\n"
        f"üß≠ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂):"
    )
    
    return DIRECTION

async def get_direction(update: Update, context: CallbackContext):
    direction = update.message.text.strip()
    context.user_data['record']['direction'] = direction
    
    await update.message.reply_text(
        f"‚úÖ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n\n"
        f"üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ (’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä):"
    )
    
    return DESCRIPTION

async def get_description(update: Update, context: CallbackContext):
    description = update.message.text.strip()
    context.user_data['record']['description'] = description
    
    await update.message.reply_text(
        f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (‘±÷Ä’™’•÷Ñ):"
    )
    
    return AMOUNT

async def get_amount(update: Update, context: CallbackContext):
    amount_text = update.message.text.strip()
    
    try:
        amount = float(amount_text)
        context.user_data['record']['amount'] = amount
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 –∏–ª–∏ 1000.50):"
        )
        return AMOUNT
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
    record = context.user_data['record']
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Google Sheets
        spreadsheet_id = get_active_spreadsheet_id()
        sheet_name = get_active_sheet_name()
        
        sheet_success = add_record_to_sheet(spreadsheet_id, sheet_name, record)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_success = add_record_to_db(record)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        if sheet_success and db_success:
            status = "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!"
            log_message = f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å ID: {record['id']}"
        elif sheet_success:
            status = "‚ö†Ô∏è –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."
            log_message = f"–ó–∞–ø–∏—Å—å ID: {record['id']} –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Google Sheets"
        elif db_success:
            status = "‚ö†Ô∏è –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å Google Sheets."
            log_message = f"–ó–∞–ø–∏—Å—å ID: {record['id']} –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ë–î"
        else:
            status = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏!"
            log_message = f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ ID: {record['id']}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = [[InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_record_{record['id']}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        result_message = (
            f"{status}\n\n"
            f"üìã –î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:\n"
            f"üÜî ID: <code>{record['id']}</code>\n"
            f"üìÖ –î–∞—Ç–∞: {record['date']}\n"
            f"üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {record['supplier']}\n"
            f"üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {record['direction']}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {record['description']}\n"
            f"üí∞ –°—É–º–º–∞: {record['amount']}"
        )
        
        await update.message.reply_text(
            result_message,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        await send_to_log_chat(context, log_message)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        await send_to_log_chat(context, f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏: {e}")
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    return ConversationHandler.END

# === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π ===

async def handle_edit_button(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    
    if data.startswith("edit_record_"):
        record_id = data.replace("edit_record_", "")
        context.user_data['editing_record_id'] = record_id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        record = get_record_from_db(record_id)
        if not record:
            await query.edit_message_text("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        record_info = (
            f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ <code>{record_id}</code>\n\n"
            f"üìÖ –î–∞—Ç–∞: {record.get('date', 'N/A')}\n"
            f"üè™ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {record.get('supplier', 'N/A')}\n"
            f"üß≠ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {record.get('direction', 'N/A')}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {record.get('description', 'N/A')}\n"
            f"üí∞ –°—É–º–º–∞: {record.get('amount', 'N/A')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        )
        
        await query.edit_message_text(
            record_info,
            reply_markup=create_edit_menu(record_id),
            parse_mode="HTML"
        )

async def handle_delete_button(update: Update, context: CallbackContext):
    query = update.callback_query
    record_id = query.data.replace("delete_", "")
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{record_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"edit_record_{record_id}")]
    ]
    
    await query.edit_message_text(
        f"üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å <code>{record_id}</code>?\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
    add_record_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_add_record, pattern="^add_record$")],
        states={
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
            SUPPLIER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_supplier)],
            DIRECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_direction)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_description)],
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_amount)]
        },
        fallbacks=[CommandHandler('cancel', lambda u, c: ConversationHandler.END)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("menu", menu_command))
    app.add_handler(CommandHandler("set_log", set_log_command))
    app.add_handler(add_record_handler)
    app.add_handler(CallbackQueryHandler(button_handler))
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == '__main__':
    main()