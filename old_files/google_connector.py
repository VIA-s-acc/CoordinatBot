import gspread
from oauth2client.service_account import ServiceAccountCredentials
import logging
from google.oauth2 import service_account
from database import add_record_to_db
from googleapiclient.discovery import build
import datetime
import uuid
from datetime import datetime

SCOPE = [
    'https://spreadsheets.google.com/feeds',
    'https://www.googleapis.com/auth/drive',
]
SCOPES = ['https://www.googleapis.com/auth/drive.metadata.readonly']

CREDS_FILE = 'coordinate-462818-8da128264452.json'

logger = logging.getLogger(__name__)

def get_client():
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Google Sheets"""
    try:
        creds = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
        return gspread.authorize(creds)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        return None

def list_spreadsheets():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø—Ä–µ–¥—à–∏—Ç–æ–≤"""
    try:
        client = get_client()
        if client:
            return client.list_spreadsheet_files()
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ø—Ä–µ–¥—à–∏—Ç–æ–≤: {e}")
        return []

def open_sheet_by_id(spreadsheet_id: str):
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø—Ä–µ–¥—à–∏—Ç –ø–æ ID"""
    try:
        client = get_client()
        if client:
            return client.open_by_key(spreadsheet_id)
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ø—Ä–µ–¥—à–∏—Ç–∞ {spreadsheet_id}: {e}")
        return None

def get_worksheets_info(spreadsheet_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ª–∏—Å—Ç–∞—Ö –≤ —Å–ø—Ä–µ–¥—à–∏—Ç–µ"""
    try:
        sheet = open_sheet_by_id(spreadsheet_id)
        if not sheet:
            return [], "Unknown"
        
        worksheets = sheet.worksheets()
        sheets_info = []
        
        for worksheet in worksheets:
            info = {
                'title': worksheet.title,
                'id': worksheet.id,
                'row_count': worksheet.row_count,
                'col_count': worksheet.col_count,
                'url': worksheet.url
            }
            sheets_info.append(info)
        
        return sheets_info, sheet.title
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—Å—Ç–∞—Ö: {e}")
        return [], "Error"

def get_worksheet_by_name(spreadsheet_id: str, sheet_name: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ª–∏—Å—Ç –ø–æ –∏–º–µ–Ω–∏"""
    try:
        sheet = open_sheet_by_id(spreadsheet_id)
        if sheet:
            # for ws in sheet.worksheets():
            #     logger.info(f"üìÑ –õ–∏—Å—Ç: {ws.title}, ID: {ws.id}")
            return sheet.worksheet(sheet_name)
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Å—Ç–∞ {sheet_name}: {e}")
        return None

def ensure_headers(worksheet, headers):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –ª–∏—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ.
    """
    try:
        current_headers = worksheet.row_values(1)
        if current_headers != headers:
            logger.info("üîÅ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ –ª–∏—Å—Ç–µ")
            worksheet.update("A1:F1", [headers])
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: {e}")
        raise
    
from datetime import datetime

def add_record_to_sheet(spreadsheet_id: str, sheet_name: str, record: dict) -> bool:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ª–∏—Å—Ç Google Sheet.
    –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–æ–≤—à–≥–æ —Ä–µ–∫–æ—Ä–¥–∞ —Ä–∞–Ω—å—à–µ, —á–µ–º —É —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö, –≤—Å—Ç–∞–≤–ª—è–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ,
    —Å–¥–≤–∏–≥–∞—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤–Ω–∏–∑, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –¥–∞—Ç–µ.
    
    :param spreadsheet_id: ID Google-—Ç–∞–±–ª–∏—Ü—ã
    :param sheet_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
    :param record: —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—è–º–∏ ['id', 'date', 'supplier', 'direction', 'description', 'amount']
    :return: True, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –∏–Ω–∞—á–µ False
    """
    try:
        logger.info(f"üìÑ –ü–æ–∏—Å–∫ –ª–∏—Å—Ç–∞ '{sheet_name}' –≤ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id}")
        worksheet = get_worksheet_by_name(spreadsheet_id, sheet_name)
        if not worksheet:
            logger.error(f"‚ùå –õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ '{spreadsheet_id}'")
            return False
        
        # –®–∞–ø–∫–∞
        headers = ['ID', '’°’¥’Ω’°’©’´’æ', '’¥’°’ø’°’Ø’°÷Ä’°÷Ä', '’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂', '’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä', '‘±÷Ä’™’•÷Ñ']
        ensure_headers(worksheet, headers)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤—Ö–æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏
        raw_date = str(record.get('date', '')).strip()
        try:
            date_obj_new = datetime.strptime(raw_date, "%Y-%m-%d")
            formatted_date = date_obj_new.strftime("%d.%m.%y")  # –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–∏—Å—Ç
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {raw_date}, –æ—à–∏–±–∫–∞: {e}")
            formatted_date = raw_date
            date_obj_new = None  # –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –≤—Å—Ç–∞–≤–∏–º –≤ –∫–æ–Ω–µ—Ü
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        row_data = [
            str(record.get('id', '')).strip(),
            formatted_date,
            str(record.get('supplier', '')).strip(),
            str(record.get('direction', '')).strip(),
            str(record.get('description', '')).strip(),
            float(record.get('amount', 0))
        ]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∞, –≤–∫–ª—é—á–∞—è —à–∞–ø–∫—É
        all_values = worksheet.get_all_values()
        
        # –ï—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π (—Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ —Å–æ–≤—Å–µ–º –ø—É—Å—Ç)
        if len(all_values) <= 1:
            # –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
            worksheet.append_row(row_data, value_input_option="USER_ENTERED")
            logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—É—Å—Ç–æ–π –ª–∏—Å—Ç –∏–ª–∏ –ø–æ—Å–ª–µ —à–∞–ø–∫–∏.")
            return True
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—ã –∏–∑ –ª–∏—Å—Ç–∞ (–Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏, —Ç.–∫. 1-—è - —à–∞–ø–∫–∞)
        def parse_date(date_str):
            
            try:
                clean_str = date_str.replace("‚Ä§", ".").strip()
                return datetime.strptime(clean_str, "%d.%m.%y")
            except:
                return None
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ –≤ –ª–∏—Å—Ç–µ, –¥–∞—Ç–∞) –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        indexed_dates = []
        for idx, row in enumerate(all_values[1:], start=2):  # —Å—Ç—Ä–æ–∫–∏ —Å 2-–π
            
            dt = parse_date(row[1]) if len(row) > 1 else None
            indexed_dates.append((idx, dt))

        # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∞—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
        if date_obj_new is None:
            worksheet.append_row(row_data, value_input_option="USER_ENTERED")
            logger.info(f"‚úÖ –î–∞—Ç–∞ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–∞, –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–Ω–µ—Ü.")
            return True
        
        # –ò—â–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–∞—Ç—ã
        insert_index = None
        for idx, dt in indexed_dates:
            if dt is None:
                # –ï—Å–ª–∏ –≤ –ª–∏—Å—Ç–µ –¥–∞—Ç–∞ –Ω–µ –ø–∞—Ä—Å–∏—Ç—Å—è, —Å—Ç–∞–≤–∏–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–¥ —ç—Ç–∏–º
                insert_index = idx
                break
            if date_obj_new < dt:
                insert_index = idx
                break
        
        if insert_index is None:
            # –î–∞—Ç–∞ –±–æ–ª—å—à–µ –≤—Å–µ—Ö ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
            worksheet.append_row(row_data, value_input_option="USER_ENTERED")
            logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å —Å —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –¥–∞—Ç–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–Ω–µ—Ü.")
            return True
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –ø–æ–∑–∏—Ü–∏—é insert_index (—Å–¥–≤–∏–≥–∞—è –≤–Ω–∏–∑)
        worksheet.insert_row(row_data, index=insert_index, value_input_option="USER_ENTERED")
        logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏—é {insert_index}, —Å–¥–≤–∏–Ω—É–≤ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–Ω–∏–∑.")
        return True

    except Exception as e:
        import traceback
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheet: {e}")
        logger.error(traceback.format_exc())
        return False
    
def initialize_and_sync_sheets():
    """
    –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º Google-—Ç–∞–±–ª–∏—Ü–∞–º –∏ –∏—Ö –ª–∏—Å—Ç–∞–º,
    –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ ID, –≤—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç),
    –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë—Ç –ª–∏—Å—Ç—ã —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ ‚Äî —á–µ—Ä–µ–∑ batch update.
    """
    import uuid
    import logging
    from database import get_record_from_db, add_record_to_db
    from google_connector import (
        get_all_spreadsheets,
        open_sheet_by_id
    )

    logger = logging.getLogger(__name__)
    headers = ['ID', '’°’¥’Ω’°’©’´’æ', '’¥’°’ø’°’Ø’°÷Ä’°÷Ä', '’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂', '’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä', '‘±÷Ä’™’•÷Ñ']
    spreadsheets = get_all_spreadsheets()

    for spreadsheet in spreadsheets:
        spreadsheet_id = spreadsheet['id']
        spreadsheet_name = spreadsheet['name']
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã: {spreadsheet_name} ({spreadsheet_id})")

        sheet = open_sheet_by_id(spreadsheet_id)
        if not sheet:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É: {spreadsheet_name}")
            continue

        for worksheet in sheet.worksheets():
            sheet_name = worksheet.title
            logger.info(f"  üìã –õ–∏—Å—Ç: {sheet_name}")

            try:
                rows = worksheet.get_all_records()
                new_rows = []
                last_valid_date = None
                for row in rows:
                    if all(not str(value).strip() for value in row.values()):
                        continue

                    row_id = str(row.get('ID', '')).strip()
                    if not row_id:
                        row_id = "cb-"+str(uuid.uuid4())[:8]

                    # üóì –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
                    raw_date = str(row.get('’°’¥’Ω’°’©’´’æ', '')).strip()
                    if raw_date:
                        # –û–±–Ω–æ–≤–ª—è–µ–º last_valid_date, –Ω–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã
                        normalized_date = raw_date.replace("‚Ä§", ".").strip()
                        last_valid_date = normalized_date
                    elif last_valid_date:
                        # –ù–∞—Å–ª–µ–¥—É–µ–º –¥–∞—Ç—É
                        normalized_date = last_valid_date
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –¥–∞—Ç—ã ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ
                        normalized_date = ""

                    # üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã
                    raw_amount = str(row.get('‘±÷Ä’™’•÷Ñ', '0'))
                    cleaned_amount = (
                        raw_amount.replace('\xa0', '')
                                .replace('\u202f', '')
                                .replace(' ', '')
                                .replace(',', '.')
                                .strip()
                    )
                    try:
                        amount = float(cleaned_amount)
                    except ValueError:
                        amount = 0.0
                        logger.warning(f"‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—É–º–º—É '{raw_amount}' ‚Üí 0.0")

                    # üì¶ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏
                    record = {
                        'id': row_id,
                        'date': normalized_date,
                        'supplier': str(row.get('’¥’°’ø’°’Ø’°÷Ä’°÷Ä', '')).strip(),
                        'direction': str(row.get('’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂', '')).strip(),
                        'description': str(row.get('’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä', '')).strip(),
                        'amount': amount,
                        'spreadsheet_id': spreadsheet_id,
                        'sheet_name': sheet_name
                    }

                    if not get_record_from_db(row_id):
                        success = add_record_to_db(record)
                        if success:
                            logger.info(f"    ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –ë–î: {row_id}")
                        else:
                            logger.warning(f"    ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –ë–î: {row_id}")
                    new_rows.append([
                        row_id,
                        normalized_date,
                        record['supplier'],
                        record['direction'],
                        record['description'],
                        amount
                    ])

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏—Å—Ç–∞ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
                all_data = [headers] + new_rows
                worksheet.clear()
                worksheet.update(f"A1:F{len(all_data)}", all_data)

                logger.info(f"    ‚úÖ –õ–∏—Å—Ç {sheet_name} –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω ({len(new_rows)} —Å—Ç—Ä–æ–∫)")

            except Exception as e:
                logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏—Å—Ç–∞ {sheet_name}: {e}")


from datetime import datetime

def update_record_in_sheet(spreadsheet_id: str, sheet_name: str, record_id: str, field: str, new_value):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–ª–µ –∑–∞–ø–∏—Å–∏ –≤ Google Sheet.
    –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –¥–∞—Ç–∞, –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ç–∞–∫, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ –¥–∞—Ç–µ.
    """
    try:
        worksheet = get_worksheet_by_name(spreadsheet_id, sheet_name)
        if not worksheet:
            logger.error(f"–õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ '{spreadsheet_id}'")
            return False
        
        headers = ['ID', '’°’¥’Ω’°’©’´’æ', '’¥’°’ø’°’Ø’°÷Ä’°÷Ä', '’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂', '’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä', '‘±÷Ä’™’•÷Ñ']
        field_map = {
            'date': '’°’¥’Ω’°’©’´’æ',
            'supplier': '’¥’°’ø’°’Ø’°÷Ä’°÷Ä',
            'direction': '’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂',
            'description': '’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä',
            'amount': '‘±÷Ä’™’•÷Ñ'
        }
        
        header_name = field_map.get(field)
        if not header_name or header_name not in headers:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {field}")
            return False
        
        records = worksheet.get_all_records()
        
        # –ù–∞–π–¥–µ–º –∏–Ω–¥–µ–∫—Å –∑–∞–ø–∏—Å–∏ –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ (—É—á–∏—Ç—ã–≤–∞—è —à–∞–ø–∫—É)
        record_index = None
        for i, rec in enumerate(records):
            if str(rec.get('ID', '')) == record_id:
                record_index = i
                break
        
        if record_index is None:
            logger.warning(f"–ó–∞–ø–∏—Å—å —Å ID={record_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        row_num = record_index + 2  # +1 —à–∞–ø–∫–∞, +1 –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 1
        col_num = headers.index(header_name) + 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É
        worksheet.update_cell(row_num, col_num, new_value)
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ '{field}' –∑–∞–ø–∏—Å–∏ {record_id}")
        
        # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–∏–ª–∏ –¥–∞—Ç—É ‚Äî –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Å—Ç—Ä–æ–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        if field == 'date':
            # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–î–î.–ú–ú.–ì–ì"
            try:
                new_date_obj = datetime.strptime(new_value, "%Y-%m-%d")
                new_date_obj = new_date_obj.strftime("%d.%m.%y")
            except Exception as e:
                logger.warning(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–æ–≤—É—é –¥–∞—Ç—É '{new_value}': {e}")
                return True  # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏–ª–∏, –±–µ–∑ —Å–¥–≤–∏–≥–∞
            
            # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Å—Ç—Ä–æ–∫–∏ (–≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫)
            all_values = worksheet.get_all_values()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É (—Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞ –ª–∏—Å—Ç–µ)
            updated_row = all_values[row_num - 1]
            
            # –£–¥–∞–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
            worksheet.delete_row(row_num)
            logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ {row_num} –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è")
            
            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –∏–∑ –ª–∏—Å—Ç–∞
            def parse_date(date_str):
                try:
                    return datetime.strptime(date_str, "%d.%m.%y")
                except:
                    return None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ (–∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏, –¥–∞—Ç–∞) –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–∞ –≤—Å—Ç–∞–≤–∫–∏
            indexed_dates = []
            for idx, row in enumerate(all_values[1:], start=2):
                if idx == row_num:
                    # –£–∂–µ —É–¥–∞–ª–∏–ª–∏ —ç—Ç—É —Å—Ç—Ä–æ–∫—É ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    continue
                dt = parse_date(row[1]) if len(row) > 1 else None
                indexed_dates.append((idx, dt))
            
            # –ò—â–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –¥–∞—Ç—ã
            new_date_obj = datetime.strptime(new_date_obj, "%d.%m.%y")
            insert_index = None
            for idx, dt in indexed_dates:
                if dt is None or new_date_obj < dt:
                    insert_index = idx
                    break
            
            if insert_index is None:
                # –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
                worksheet.append_row(updated_row, value_input_option="USER_ENTERED")
                logger.info(f"–°—Ç—Ä–æ–∫–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –∫–æ–Ω–µ—Ü –ª–∏—Å—Ç–∞")
            else:
                worksheet.insert_row(updated_row, index=insert_index, value_input_option="USER_ENTERED")
                logger.info(f"–°—Ç—Ä–æ–∫–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é {insert_index}")
        
        return True
    
    except Exception as e:
        import traceback
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheet: {e}")
        logger.error(traceback.format_exc())
        return False

def delete_record_from_sheet(spreadsheet_id: str, sheet_name: str, record_id: str):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ Google Sheet"""
    try:
        worksheet = get_worksheet_by_name(spreadsheet_id, sheet_name)
        if not worksheet:
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        records = worksheet.get_all_records()
        
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –ø–æ ID
        for i, record in enumerate(records):
            if str(record.get('ID', '')) == record_id:
                # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É (i+2, —Ç–∞–∫ –∫–∞–∫ +1 –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ +1 –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ —Å 1)
                row_num = i + 2
                worksheet.delete_rows(row_num)
                logger.info(f"–ó–∞–ø–∏—Å—å {record_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Google Sheet")
                return True
        
        logger.warning(f"–ó–∞–ø–∏—Å—å {record_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Google Sheet –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return False
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∏–∑ Google Sheet: {e}")
        return False

def get_record_by_id(spreadsheet_id: str, sheet_name: str, record_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ ID –∏–∑ Google Sheet"""
    try:
        worksheet = get_worksheet_by_name(spreadsheet_id, sheet_name)
        if not worksheet:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        records = worksheet.get_all_records()
        
        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –ø–æ ID
        for record in records:
            if str(record.get('ID', '')) == record_id:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É
                normalized_record = {
                    'id': record.get('ID', ''),
                    'date': record.get('’°’¥’Ω’°’©’´’æ', ''),
                    'supplier': record.get('’¥’°’ø’°’Ø’°÷Ä’°÷Ä', ''),
                    'direction': record.get('’∏÷Ç’≤’≤’∏÷Ç’©’µ’∏÷Ç’∂', ''),
                    'description': record.get('’Æ’°’≠’Ω’´ ’¢’∂’∏÷Ç’©’°’£’´÷Ä', ''),
                    'amount': record.get('‘±÷Ä’™’•÷Ñ', 0)
                }
                return normalized_record
        
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ {record_id} –∏–∑ Google Sheet: {e}")
        

def get_all_spreadsheets():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö Google Spreadsheets —á–µ—Ä–µ–∑ Google Drive API"""
    try:
        creds = service_account.Credentials.from_service_account_file(
            CREDS_FILE, scopes=SCOPES
        )
        service = build('drive', 'v3', credentials=creds)

        query = "mimeType='application/vnd.google-apps.spreadsheet'"
        results = service.files().list(
            q=query,
            pageSize=1000,
            fields="files(id, name)"
        ).execute()

        items = results.get('files', [])
        spreadsheets = []
        for file in items:
            spreadsheets.append({
                'id': file['id'],
                'name': file['name'],
                'url': f"https://docs.google.com/spreadsheets/d/{file['id']}/edit"
            })

        print(f"–ù–∞–π–¥–µ–Ω–æ {len(spreadsheets)} —Ç–∞–±–ª–∏—Ü")
        return spreadsheets

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü: {e}")
        return []

def get_spreadsheet_info(spreadsheet_id: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ"""
    try:
        sheet = open_sheet_by_id(spreadsheet_id)
        if not sheet:
            return None
        
        worksheets = sheet.worksheets()
        sheets_info = []
        
        for worksheet in worksheets:
            info = {
                'title': worksheet.title,
                'id': worksheet.id,
                'row_count': worksheet.row_count,
                'col_count': worksheet.col_count,
                'url': worksheet.url
            }
            sheets_info.append(info)
        
        spreadsheet_info = {
            'id': spreadsheet_id,
            'title': sheet.title,
            'url': sheet.url,
            'sheets': sheets_info,
            'sheets_count': len(sheets_info)
        }
        
        return spreadsheet_info
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ {spreadsheet_id}: {e}")
        return None